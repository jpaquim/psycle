#! /usr/bin/env scons

# This source is free software ; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation ; either version 2, or (at your option) any later version.
# copyright 2006-2007 johan boule <bohan@jabber.org>
# copyright 2006-2007 psycledelics http://psycle.pastnotecut.org

# To be able to import the packageneric package, we add the parent dir of this SConstruct file to the python path:
import sys, os ; sys.path.append(os.path.split(os.getcwd())[0]) # SCons always makes the dir of the SConstruct file the current dir.

# project

from packageneric.scons.project import project
project = project(name = 'freepsycle')

# source package

from packageneric.scons.source_package import source_package
from packageneric.scons.version import version
source_package = source_package(project,
	name = project.name(),
	version = version(0, 0),
	description = '%(name)s modular music creation studio' % {'name': project.name()},
	long_description = \
		"%(name)s is a modular music creation studio." % {'name': project.name()}
)

source_package.add_files(['README', 'NEWS', 'ChangeLog', 'AUTHORS', 'COPYING', 'TODO'])

# external packages

from packageneric.scons.check.external_package import external_package as external_package_check
from packageneric.scons.check.pkg_config import pkg_config as pkg_config_check
from packageneric.scons.check.cxx_build import cxx_build as cxx_build_check

universalis = os.path.join(os.pardir, 'universalis', 'SConstruct')
if os.path.exists(universalis): universalis = project.subscript(universalis).local_package()
else:
	universalis = external_package_check(project, name = 'universalis', url = 'http://psycle.sourceforge.net',
		distribution_packages = {
			'zero-install': 'http://psycle.sourceforge.net/packages/0install/interfaces/universalis-dev.xml',
			'debian and ubuntu': 'lib-universalis-dev (>= 0)',
			'gentoo': '...',
			'fedora': '...',
			'cygwin': '...'
		},
		dependencies = [pkg_config_check(project, name = 'universalis >= 0')]
	)

helpers = os.path.join(os.pardir, 'psycle-helpers', 'SConstruct')
if os.path.exists(helpers): helpers = project.subscript(helpers).local_package()
else:
	helpers = external_package_check(project, name = 'psycle-helpers', url = 'http://psycle.sourceforge.net',
		distribution_packages = {
			'zero-install': 'http://psycle.sourceforge.net/packages/0install/interfaces/psycle-helpers-dev.xml',
			'debian and ubuntu': 'lib-psycle-helpers-dev (>= 0)',
			'gentoo': '...',
			'fedora': '...',
			'cygwin': '...'
		},
		dependencies = [pkg_config_check(project, name = 'psycle-helpers >= 0')]
	)

gstreamer = external_package_check(project, name = 'gstreamer', url = 'http://gstreamer.net',
	distribution_packages = {
		'zero-install': '...',
		'debian and ubuntu': 'libgstreamer0.10-dev (>= 0.10), libgstreamer-plugins-base0.10-dev (>= 0.10)',
		'gentoo': '...',
		'fedora': '...',
		'cygwin': '...'
	},
	dependencies = [pkg_config_check(project, name = 'gstreamer-0.10 >= 0.10 gstreamer-plugins-base-0.10 >= 0.10')]
)

alsa = external_package_check(project, name = 'alsa', url = 'http://alsa-project.org',
	distribution_packages = {
		'zero-install': '...',
		'debian and ubuntu': 'libasound2-dev (>= 1.0)',
		'gentoo': '...',
		'fedora': '...',
		'cygwin': '...'
	},
	dependencies = [pkg_config_check(project, name = 'alsa >= 1.0')]
)

microsoft_direct_sound = external_package_check(project, name = 'microsoft direct sound', url = 'http://msdn.microsoft.com',
	distribution_packages = {'microsoft (maybe windows updates?)': 'direct sound'},
	dependencies = [
		cxx_build_check(project, name = 'microsoft direct sound', libraries = ['dsound'], source_text = \
			"""\
				#include <dsound.h>
				#if DIRECTSOUND_VERSION < 0x0900  /* Version 9.0 */
					#error microsoft direct sound version too old
				#endif
				void microsoft_direct_sound()
				{
					// todo do something with it for a complete check
				}
			"""
		)
	]
)

gtkmm = external_package_check(project, name = 'gtkmm', url = 'http://gtkmm.org',
	distribution_packages = {
		'zero-install': 'http://0install.net/interfaces/2006/GTKmm-dev.xml',
		'debian and ubuntu': 'libgtkmm-2.4-dev (>= 2.4)',
		'gentoo': '...',
		'fedora': '...',
		'cygwin': 'gtk2-x11-devel (>= 2.6.10)' # mm!
	},
	dependencies = [pkg_config_check(project, name = 'gtkmm-2.4 >= 2.4')]
)

gnomecanvasmm = external_package_check(project, name = 'gnomecanvasmm', url = 'http://gnome.org',
	distribution_packages = {
		'zero-install': '...',
		'debian and ubuntu': 'libgnomecanvasmm-2.6-dev (>= 2.6)',
		'gentoo': '...',
		'fedora': '...',
		'cygwin': '...'
	},
	dependencies = [gtkmm, pkg_config_check(project, name = 'libgnomecanvasmm-2.6 >= 2.6')]
)

# modules and pkg-config packages

from packageneric.scons.module import module
from packageneric.scons.pkg_config_package import pkg_config_package
from packageneric.scons.find import find

modules = []
pkg_config_packages = []

class uniform_module(module):
	def __init__(self, name, path = None, dir = None, *args, **kw):
		module.__init__(self, source_package,
			name = source_package.name() + '-' + name,
			version = source_package.version(),
			*args, **kw
		)
		modules.append(self)
		self.pkg_config_package() # todo hmm?
		if path is not None: self._path = path
		else:
			if dir is None: self._path = name
			else: self._path = os.path.join(dir, name)
		
	def dynamic_dependencies(self):
		self.contexes().source().compilers().cxx().paths().add(['src'])
		if os.path.exists(os.path.join('src', 'psycle', self._path)):
			self.add_sources(find(self.project(), 'src', [os.path.join('psycle', self._path, '*.cpp')]))
			self.add_headers(find(self.project(), 'src', [os.path.join('psycle', self._path, '*.hpp')]))
		else:
			self.add_sources(find(self.project(), 'src', [os.path.join('psycle', self._path + '.cpp')]))
			self.add_headers(find(self.project(), 'src', [os.path.join('psycle', self._path + '.hpp')]))
		if not len(self.sources()): self.project().abort('could not find sources for module ' + self.name())
	
	def pkg_config_package(self):
		try: return self._pkg_config_package
		except AttributeError:
			self._pkg_config_package = pkg_config_package(project,
				name = self.name(),
				version = self.version(),
				description = self.description(),
				modules = [self]
			)
			pkg_config_packages.append(self._pkg_config_package)
			return self._pkg_config_package
	
	def as_dependency(self): return self.pkg_config_package().local_package()

paths_module = uniform_module(
	name = 'paths',
	description = 'paths',
	dependencies = [universalis]
)

engine_module = uniform_module(
	name = 'engine',
	description = 'audio engine',
	dependencies = [universalis]
)

host_module = uniform_module(
	name = 'host',
	description = 'plugin host',
	dependencies = [engine_module.as_dependency()]
)

stream_module = uniform_module(
	name = 'stream',
	description = 'stream format handling',
	dependencies = [universalis]
)

bipolar_filter_module = uniform_module(
	dir = 'plugins',
	name = 'bipolar_filter',
	description = 'bipolar filter plugin abstraction',
	dependencies = [engine_module.as_dependency()]
)

resource_module = uniform_module(
	dir = 'plugins',
	name = 'resource',
	description = 'resource',
	dependencies = [engine_module.as_dependency()]
)

class plugin_uniform_module(uniform_module):
	def __init__(self, name, *args, **kw):
		if 'dependencies' in kw: dependencies = kw['dependencies']
		else: dependencies = kw['dependencies'] = []
		dependencies.append(helpers)
		dependencies.append(resource_module.as_dependency()) # todo why resource?
		uniform_module.__init__(self,
			path = os.path.join('plugins', name),
			name = 'plugin-' + name,
			*args, **kw
		)
	
decay_plugin_module = plugin_uniform_module(
	name = 'decay',
	description = 'decaying pulse plugin',
)

sequence_plugin_module = plugin_uniform_module(
	name = 'sequence',
	description = 'sequence plugin',
)

sine_plugin_module = plugin_uniform_module(
	name = 'sine',
	description = 'sine plugin'
)

additioner_plugin_module = plugin_uniform_module(
	name = 'additioner',
	description = 'additioner plugin',
	dependencies = [bipolar_filter_module.as_dependency()]
)

multiplier_plugin_module = plugin_uniform_module(
	name = 'multiplier',
	description = 'multiplier plugin',
	dependencies = [bipolar_filter_module.as_dependency()]
)

class output_plugin_uniform_module(uniform_module):
	def __init__(self, name, *args, **kw):
		if 'dependencies' in kw: dependencies = kw['dependencies']
		else: dependencies = kw['dependencies'] = []
		dependencies.append(resource_module.as_dependency())
		uniform_module.__init__(self,
			path = os.path.join('plugins', 'outputs', name),
			name = 'plugin-output-' + name,
			*args, **kw
		)
		self._short_name = name
	
	def short_name(self): return self._short_name

default_output_plugin_module = None

if microsoft_direct_sound.result():
	microsoft_direct_sound_output_plugin_module = output_plugin_uniform_module(
		name = 'direct_sound',
		description = 'microsoft direct sound output plugin',
		dependencies = [microsoft_direct_sound, stream_module.as_dependency()]
	)
	if not default_output_plugin_module: default_output_plugin_module = microsoft_direct_sound_output_plugin_module

if gstreamer.result():
	gstreamer_output_plugin_module = output_plugin_uniform_module(
		name = 'gstreamer',
		description = 'gstreamer output plugin',
		dependencies = [gstreamer, stream_module.as_dependency()]
	)
	if not default_output_plugin_module: default_output_plugin_module = gstreamer_output_plugin_module

if alsa.result():
	alsa_output_plugin_module = output_plugin_uniform_module(
		name = 'alsa',
		description = 'alsa output plugin',
		dependencies = [alsa, stream_module.as_dependency()]
	)
	if not default_output_plugin_module: default_output_plugin_module = alsa_output_plugin_module

dummy_output_plugin_module = output_plugin_uniform_module(
	name = 'dummy',
	description = 'dummy, null, silent output plugin'
)
if not default_output_plugin_module: default_output_plugin_module = dummy_output_plugin_module

if default_output_plugin_module:
	project.information('selected ' + default_output_plugin_module.name() + ' as default output plugin module.')
	defines = {'PSYCLE__PLUGINS__OUTPUTS__DEFAULT__' + default_output_plugin_module.short_name().upper() : None}
	default_output_plugin_module = plugin_uniform_module(
		name = 'output',
		description = 'default output plugin',
		dependencies = [default_output_plugin_module.as_dependency()]
	)
	default_output_plugin_module.contexes().compilers().cxx().defines().add(defines)

front_end_modules = []

class text_front_end_module(module):
	def __init__(self):
		module.__init__(self, source_package,
			name = source_package.name() + '-text',
			version = source_package.version(),
			description = 'text front-end',
			dependencies = [
				paths_module.as_dependency(),
				host_module.as_dependency(),
				sequence_plugin_module.as_dependency()
			],
			target_type = module.target_types.program
		)
		modules.append(self)
		front_end_modules.append(self)
	def dynamic_dependencies(self):
		self.contexes().source().compilers().cxx().paths().add(['src'])
		self.add_sources(find(self.project(), 'src', [os.path.join('psycle', 'front_ends', 'text', '*.cpp')]))
		self.add_headers(find(self.project(), 'src', [os.path.join('psycle', 'front_ends', 'text', '*.hpp')]))
text_front_end_module = text_front_end_module()

if gtkmm.result() and gnomecanvasmm.result():
	class gui_front_end_module(module):
		def __init__(self):
			module.__init__(self, source_package,
				name = source_package.name() + '-gui',
				version = source_package.version(),
				description = 'gui front-end',
				dependencies = [gtkmm, gnomecanvasmm, paths_module.as_dependency(), host_module.as_dependency()],
				target_type = module.target_types.program
			)
			modules.append(self)
			front_end_modules.append(self)
		def dynamic_dependencies(self):
			self.contexes().source().compilers().cxx().paths().add(['src'])
			self.add_sources(find(self.project(), 'src', [os.path.join('psycle', 'front_ends', 'gui', '*.cpp')]))
			self.add_headers(find(self.project(), 'src', [os.path.join('psycle', 'front_ends', 'gui', '*.hpp')]))
	gui_front_end_module = gui_front_end_module()

project.default_targets(pkg_config_packages + front_end_modules)
