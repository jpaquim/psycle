#! /usr/bin/env scons

# This source is free software ; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation ; either version 2, or (at your option) any later version.
# copyright 2006-2009 members of the psycle project http://psycle.sourceforge.net ; johan boule <bohan@jabber.org>

# To be able to import the sconscrap package, we add the parent dir of this SConstruct file to the python path:
import sys, os ; sys.path.append(os.path.join(os.path.split(os.getcwd())[0]), 'build-systems') # SCons always makes the dir of the SConstruct file the current dir.

# project

from sconscrap.scons.project import project
project = project(name = 'psycle-helpers')

# source package

from sconscrap.scons.source_package import source_package
from sconscrap.scons.version import version

source_package = source_package(project,
	name = project.name(),
	version = version(1, 9),
	description = 'helper routines for psycle',
	long_description = \
		"these are the some helper routines for psycle."
		"psycle is a modular music creation studio."
)

source_package.add_files(['README', 'NEWS', 'ChangeLog', 'AUTHORS', 'COPYING', 'TODO'])

# external packages

from sconscrap.scons.check.external_package import external_package as external_package_check
from sconscrap.scons.check.pkg_config import pkg_config as pkg_config_check
from sconscrap.scons.check.cxx_build import cxx_build as cxx_build_check

import os.path
universalis = os.path.join(os.pardir, 'universalis', 'SConstruct')
if os.path.exists(universalis): universalis = project.subscript(universalis).local_package()
else:
	universalis = external_package_check(project, name = 'universalis',
		url = 'http://psycle.sourceforge.net',
		distribution_packages = {
			'zero-install': 'http://psycle.sourceforge.net/packages/0install/interfaces/universalis-dev.xml',
			'debian and ubuntu': 'lib-universalis-dev (>= 0)',
			'gentoo': '...',
			'fedora': '...',
			'cygwin': '...'
		},
		dependencies = [pkg_config_check(project, name = 'universalis >= 0')]
	)

# modules

from sconscrap.scons.module import module as base_module

class module(base_module):
	def __init__(self):
		base_module.__init__(self, source_package,
			name = source_package.name(),
			dependencies = [universalis]
	)

	def dynamic_dependencies(self):
		from sconscrap.scons.find import find
		self.add_sources(find(self.project(), 'src', [os.path.join('psycle', 'helpers', '*.cpp')]))
		self.add_headers(find(self.project(), 'src', [os.path.join('psycle', 'helpers', '*.hpp')]))
		self.contexes().source().compilers().cxx().paths().add(['src'])
module = module()

# pkg-config packages

from sconscrap.scons.pkg_config_package import pkg_config_package
pkg_config_package = pkg_config_package(project,
	name = module.name(),
	version = module.version(),
	description = module.description(),
	modules = [module]
)

# unit tests

from sconscrap.std_checks.boost import boost
boost_test = boost(project, 103300, ['unit_test_framework'])

unit_test_module = base_module(source_package,
			name = source_package.name() + '_unit_tests',
			version = source_package.version(),
			dependencies = [pkg_config_package.local_package(), boost_test],
			target_type = base_module.target_types.program
)
unit_test_module.contexes().source().compilers().cxx().paths().add(['src'])
from sconscrap.scons.find import find
unit_test_module.add_sources(find(project, 'src', [os.path.join(os.curdir, 'unit_tests.cpp')]))

###
project.default_targets([pkg_config_package, unit_test_module])
Return('pkg_config_package')
