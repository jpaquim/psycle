<?xml version='1.0' ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 2.0//EN" "http://www.w3.org/MarkUp/DTD/xhtml2.dtd">
<html xmlns='http://www.w3.org/1999/xhtml'>
	<head>
		<meta http-equiv='content-type' content='application/xhtml+xml' />
		<title>bohan mozilla audio data api test</title>
		<script type='text/javascript'>
			// <![CDATA[
			
			function AudioDataDestination(sampleRate, readFn) {
				// Initialize the audio output.
				var audio = new Audio();
				audio.mozSetup(1, sampleRate);

				var currentWritePosition = 0;
				var prebufferSize = Math.ceil(0.5 * sampleRate);
				var buffer = new Float32Array(prebufferSize);
				var tail = null, tailPosition;

				// The function called with regular interval to populate 
				// the audio output buffer.
				setInterval(
					function() {
						var written;
				
						// Check if some data was not written in previous attempts.
						if(tail) {
							written = audio.mozWriteAudio(tail.subarray(tailPosition));
							currentWritePosition += written;
							tailPosition += written;
							if(tailPosition < tail.length) {
								// Not all the data was written, saving the tail...
								return; // ... and exit the function.
							}
							tail = null;
						}

						// Check if we need add some data to the audio output.
						var currentPosition = audio.mozCurrentSampleOffset();
						var available = currentPosition - currentWritePosition + buffer.length;
						if(available > 0) {
							// Request some sound data from the callback function.
							readFn(buffer);
							// Writting the data.
							written = audio.mozWriteAudio(buffer);
							if(written < buffer.length) {
								// Not all the data was written, saving the tail.
								tail = buffer;
								tailPosition = written;
							}
							currentWritePosition += written;
						}
					},
					100
				);
			}

			// Control and generate the sound.

			var freq = 0, timeInSamples;
			var sampleRate = 44100;

			function requestSoundData(soundData) {
				if(!freq) { 
					// no sound selected
					for(var i = 0, size = soundData.length; i < size; ++i) {
						soundData[i] = 0;
					}
					return;
				}

				var w = 2 * Math.PI * freq / sampleRate;
				for(var i = 0, size = soundData.length; i < size; ++i) {
					soundData[i] = Math.sin(w * timeInSamples++);
				}
			}

			var audioDestination = new AudioDataDestination(sampleRate, requestSoundData);

			function start() {
				timeInSamples = 0;
				freq = parseFloat(document.getElementById("freq").value);
			}

			function stop() {
				freq = 0;
			}
			
			function main(window) {
				start();
			}
			
			// ]]>
		</script>
	</head>
	<body onload='main(this);'>
		<input type='text' size='6' id='freq' value='220' onchange='start();'><label for='hz'>Hz</label></input>
		<button onclick='start();'>Play</button>
		<button onclick='stop();'>Stop</button>
	</body>
</html>

