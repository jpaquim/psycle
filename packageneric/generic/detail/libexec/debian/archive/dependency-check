#! /bin/bash

###########################################################################################################
#
# This source is free software ; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation ; either version 2, or (at your option) any later version.
# Copyright (C) 1999-2005 Psycledelics http://psycle.pastnotecut.org : Johan Boule
#
# Builds and rsync debian archive
# \meta generic
# \meta standard gnu
#
###########################################################################################################

set -o nounset &&

function main # $binary_dist, $source_dist, $source, arch
{
	dist-download $binary_dist
	incoming $binary_dist $source_dist $source $arch
	dist-upload $binary_dist
} &&

function incoming # $binary_dist, $source_dist $source, arch
{
	if source_is_in_dist $source_dist $source $(source-incoming-version $source)
	then
		for binary in $(source-binaries $binary_dist $source $arch)
		do
			error dist $binary_dist already has $arch binaries for source $source version $version
			return
		done
	fi
	dep $binary_dist $source_dist $source $arch
} &&

function dep # $binary_dist, $source_dist, $source, arch
{
	build $source $arch
	if source_is_in_dist $source_dist $source
	then
		for any_binary in $(dist-binaries $binary_dist)
		do
			if $(binary-arch $any_binary) = $arch
			then
				for dependency in $(binary-dependencies $any_binary)
				do
					for binary in $(source-binaries $binary_dist $source $arch)
					do
						if test $dependency = $(binary-name $binary)
						then
							dep $binary_dist $source_dist $(binary-source $any_binary) $arch
						fi
					done
				done
			done
		done
	fi
	put $binary_dist $source_dist $source $arch
} &&

function build # $source, $arch
{
	...
} &&

function put # $binary_dist, $source_dist, $source, $arch
{
	remove-source $source_dist $source
	put-source $source_dist $source
	found_in_other_arch=false
	for binary in $(source-binaries $source $arch)
	do
		for any_binary in $(dist-binaries $binary_dist)
		do
			if $(binary-arch $binary) != $arch -a test $(binary-name $any_binary) = $(binary-name $binary)
			then
				found_in_other_arch=true
				break
			fi
		done
	done
	for binary in $(source-binaries $source $arch)
	do
		if test $(binary-arch $binary) = all
		then
			if ! $found_in_other_arch
			then
				remove-binary $binary_dist $source_dist $binary
			fi
		else
			remove-binary $binary_dist $source_dist $binary
		fi
		put-binary $binary_dist $source_dist $binary
	done
} &&

function remove-source # $source_dist, $source
{
	rm $root/source/$source_dist/$source
	found_in_other_dist=false
	for any_dist in $(source-dists)
	do
		if test -e $root/source/$any_dist/$source
		then
			found_in_other_dist=true
			break
		fi
	done
	if ! found_in_other_dist
	then
		rm $root/source/$source
	fi
} &&

function put-source # $source_dist, $source
{
	mv $incoming/$source $root/source
	ln --symbolic ../$source $root/source/$source_dist
} &&

function remove-binary # $dist_root, $binary_dist, $source_dist, $binary__file__basename
{
	rm $root/$binary_dist/$source_dist/$binary__file__basename
	found_in_other_dist=false
	for any_source_dist in $(source-dists)
	do
		if test -e $root/$binary_dist/$any_source_dist/$binary__file__basename
		then
			found_in_other_dist=true
			break
		fi
	done
	if ! found_in_other_dist
	then
		if test $(binary-arch $binary__file__basename) = all
		then
			rm $root/$binary__file__basename
		else
			rm $root/$binary_dist/$binary__file__basename
		fi
	fi
} &&

function put-binary # $dist_root $binary_dist, $source_dist, $binary_file
{
	if test $(binary-arch $binary_file) = all
	then
		mv $binary_file $dist_root
		ln --symbolic ../../$(basename $binary_file) $root/$binary_dist/$source_dist
	else
		mv $binary_file $root/$binary_dist
		ln --symbolic ../$(basename $binary_file) $root/$binary_dist/$source_dist
	fi
} &&

#####################################################################################################
#####################################################################################################
#####################################################################################################

main "$@" &&
echoing "completed successfully for $(pwd) $*" ||
{
	echoing "failed for $(pwd) $*" &&
	false
}
