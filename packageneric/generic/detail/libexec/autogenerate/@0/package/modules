#! /usr/bin/env bash
. $PACKAGENERIC__ROOT/packageneric/generic/bin/posix.shell &&

##############################################################################
#
# This source is free software ; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation ; either version 2, or (at your option) any later version.
# Copyright (C) 1999-2005 Psycledelics http://psycle.pastnotecut.org : Johan Boule
#
# autotools autogenerator plugin
#
# \meta generic
# \meta standard posix
#
##############################################################################

set -o nounset &&

main()
{
	local modules__ac__subpath=autotools/autoconf/$PACKAGENERIC__SUBPATH &&
	local modules__am__subpath=autotools/automake/$PACKAGENERIC__SUBPATH &&
	local modules__ac=$PACKAGENERIC__OUTPUT/$modules__ac__subpath &&
	local modules__am=$PACKAGENERIC__OUTPUT/$modules__am__subpath &&
	local modules__ac__subpath=$PACKAGENERIC__OUTPUT__SUBPATH/$modules__ac__subpath &&
	local modules__am__subpath=$PACKAGENERIC__OUTPUT__SUBPATH/$modules__am__subpath &&
	mkdir -p $(dirname $modules__ac) $(dirname $modules__am) &&
	{
		cat <<-eof > $modules__ac.ac
			#! /usr/bin/autoconf
			# This file was autogenerated by $PACKAGENERIC__SUBPATH ; do not edit.
			
		eof
	} &&
	{
		cat <<-eof > $modules__am.am
			#! /usr/bin/automake
			# This file was autogenerated by $PACKAGENERIC__SUBPATH ; do not edit.
			
		eof
	} &&
	local modules__path=packageneric/$PACKAGENERIC__SUBPATH &&
	if test -d $modules__path
	then
		mkdir -p $modules__ac $modules__am &&
		cd $modules__path &&
		local modules=$(eval find . -maxdepth 1 $(packageneric__find__file \\\( -name hpp.\\\*.am -or -name lib.\\\*.am -or -name bin.\\\*.am \\\))) &&
		for module in $modules
		do
			module=$(basename $module .am) &&
			echoing $module &&
			module $module ||
			return
		done &&
		echo PACKAGENERIC__INCLUDE\($modules__path.ac\) >> $modules__ac.ac &&
		echo include \$\(top_srcdir\)/$modules__path.am >> $modules__am.am &&
		echo DISTCLEANFILES += $modules__path/dependencies.dot >> $modules__am.am
	fi
} &&

module()
{
	local module=$1 && shift &&
	local module__ac=$modules__ac/$module.ac &&
	local module__am__unconditional=$modules__am/$module/unconditional.am &&
	local module__am__conditional=$modules__am/$module/conditional.am &&
	mkdir -p $modules__am/$module &&
	local module__type=$(echo $module | sed 's:\..*::') &&
	local module__name=$(echo $module | sed 's:^[^.]*\.::') &&
	local module__name__underscores=$(echo $module__name | tr '.-' '__') &&
	local module__prefix__lower=$(if test $module__type = bin ; then echo bin__ ; fi)$(echo $module__name | tr '-' '_' | sed 's:\.:__:g') &&
	local module__prefix__upper=$(echo $module__prefix__lower | tr '[:lower:]' '[:upper:]') &&
	
	#########################
	# autoconf substitutions
	#########################
	
	{
		echo PACKAGENERIC__INCLUDE\($modules__ac__subpath/$module.ac\) >> $modules__ac.ac &&
		cat <<-eof >> $module__ac
			#! /usr/bin/autoconf
			# This file was autogenerated by $PACKAGENERIC__SUBPATH ; do not edit.
			
			AC_SUBST(${module__prefix__upper}__CFLAGS)
			AC_SUBST(${module__prefix__upper}__LIBS__NO_SELF)
			AC_SUBST(${module__prefix__upper}__LIBS__NO_SELF__INTERNAL)
			AC_SUBST(${module__prefix__upper}__VERSION)
			AC_SUBST(${module__prefix__upper}__DESCRIPTION)
		eof
	} &&
	
	###########
	# automake
	###########
	
	{
		echo include \$\(top_srcdir\)/$modules__am__subpath/$module/unconditional.am >> $modules__am.am &&
		cat <<-eof > $module__am__unconditional
			#! /usr/bin/automake
			# This file was autogenerated by $PACKAGENERIC__SUBPATH ; do not edit.
			
		eof
	} &&
	{
		cat <<-eof > $module__am__conditional
			#! /usr/bin/automake
			# This file was autogenerated by $PACKAGENERIC__SUBPATH ; do not edit.
			
		eof
	} &&
	
	##########
	# sources
	##########
	
	if test $module__type = lib -o $module__type = bin
	then
		{
			cat <<-eof >> $module__am__unconditional
				${module__prefix__lower}__defines =
				${module__prefix__lower}__sources =
			eof
		} &&
		local module__sources=$module.sources &&
		if test -e $module__sources
		then
			###################################
			# source files from listing script
			###################################
			
			if test -x $module__sources
			then
				local module__sources__path=$(pwd) &&
				module__sources=$(cd $PACKAGENERIC__ROOT/src && $module__sources__path/$module__sources) &&
				unset module__sources__path &&
				for source in $module__sources
				do
					echo "${module__prefix__lower}__sources += src/$source" >> $module__am__unconditional || return
				done
			else
				echo "$(basename $PACKAGENERIC__SUBPATH): expected existing file $(pwd)/$module__sources to be an executable file." &&
				false
			fi
		else
			local module__source=$module.cpp &&
			if test -e $module__source
			then
				#####################
				# single source file
				#####################
				
				echo "${module__prefix__lower}__sources += $modules__path/$module__source" >> $module__am__unconditional
			fi
		fi
	fi &&
	
	##############################
	# ! monolitic compilation ...
	##############################
	
	{
		cat <<-eof >> $module__am__conditional
			if !PACKAGENERIC__CONFIGURATION__OPTION__ENABLE__MONOLITHIC_COMPILATION
		eof
	} &&

	##################
	# pkg-config file
	##################
		
	if test $module__type != bin
	then
		local module__pkgconfig=$modules__path/pkgconfig/$module__name &&
		{
			cat <<-eof >> $module__am__conditional
				pkgconfig_DATA += $module__pkgconfig.pc
				DISTCLEANFILES += $module__pkgconfig.pc
				DISTCLEANFILES += $module__pkgconfig-uninstalled.pc
			eof
		} &&
		unset module__pkgconfig
	fi &&
	
	#################
	# lib or bin ...
	#################
	
	if test $module__type = lib -o $module__type = bin
	then
		################################################
		# lib or bin, different automake variable names
		################################################
		
		if test $module__type = lib
		then
			local automake__category=lib_LTLIBRARIES &&
			local automake__file=lib-$module__name.la &&
			local automake=lib_${module__name__underscores}_la &&
			local automake__link=LIBADD
		elif test $module__type = bin
		then
			local automake__category=bin_PROGRAMS &&
			local automake__file=$module__name &&
			local automake=${module__name__underscores} &&
			local automake__link=LDADD
		fi &&
		
		##################################################
		# automake declaration for the module to be built
		##################################################
		
		{
			local module__includes=$modules__path/$module/autoconf/packageneric/module.private.hpp
			local module__dependencies=$modules__path/$module/dependencies-stamp.cpp
			cat <<-eof >> $module__am__conditional
				$automake__category += $automake__file
				${automake}_CPPFLAGS = -DPACKAGENERIC__PRE_COMPILED=PACKAGENERIC -I$modules__path/$module/autoconf -DPACKAGENERIC=\<packageneric/module.private.hpp\> \$(${module__prefix__lower}__defines) \$(PACKAGENERIC__COMPILER__cppflags) \$(AM_CPPFLAGS)
				${automake}_CXXFLAGS = \$(${module__prefix__upper}__CFLAGS) \$(PACKAGENERIC__COMPILER__cxxflags) \$(AM_CXXFLAGS)
				${automake}_LDFLAGS  = $(if test $module__type = lib ; then echo "-version-info \$(${module__prefix__upper}__VERSION)" ; fi) \$(PACKAGENERIC__COMPILER__ldflags) \$(AM_LDFLAGS)
				${automake}_$automake__link = \$(${module__prefix__upper}__LIBS__NO_SELF)
				nodist_${automake}_SOURCES = $module__dependencies $module__includes \$(${module__prefix__lower}__sources)
				#BUILT_SOURCES += $module__dependencies
				CLEANFILES += $module__dependencies
				$module__dependencies : \$(${module__prefix__upper}__LIBS__NO_SELF__INTERNAL)
			eof
		} &&
		{
			cat<<eof >> $module__am__conditional
				@ \\
				\$(PACKAGENERIC__ECHO__HEADER) \$@ && \\
				for file in \$^ ; \\
				do \\
					\$(PACKAGENERIC__ECHO) \$\$file || \\
					return ; \\
				done && \\
				if test ! -e \$@ ; \\
				then \\
					\$(mkdir_p) \$\$(dirname \$@) && \\
					echo "///@file" > \$@ && \\
					echo "///@brief packageneric internal dependencies for module $module__name" >> \$@ && \\
					echo "/// This file was autogenerated by $PACKAGENERIC__SUBPATH ; do not edit." >> \$@ && \\
					echo >> \$@ && \\
					for file in \$^ ; \\
					do \\
						echo "// \$\$file" >> \$@ || \\
						return ; \\
					done \\
				fi
eof
		} &&
		
		#######################################################################
		# automake declaration for the module to be built ... meta information
		#######################################################################
		
		{
			cat<<-eof >> $module__am__unconditional
				${automake}_CPPFLAGS ${automake}_CXXFLAGS ${automake}_LDFLAGS ${automake}_$automake__link nodist_${automake}_SOURCES:
			eof
		} &&
		{
			cat <<eof >> $module__am__unconditional
				@echo \$@: \$(\$@)
eof
		} &&
		
		#################
		# module defines
		#################
		
		{
			local module__defines=$modules__path/$module/defines.private.hpp
			cat <<-eof >> $module__am__unconditional
				BUILT_SOURCES += \$(PACKAGENERIC__HARDCODED)$module__defines
				EXTRA_DIST += \$(PACKAGENERIC__HARDCODED)$module__defines
				CLEANFILES += \$(PACKAGENERIC__HARDCODED)$module__defines
				\$(PACKAGENERIC__HARDCODED)$module__defines: Makefile
			eof
		} &&
		{
			cat <<eof >> $module__am__unconditional
				@ \\
				\$(PACKAGENERIC__ECHO) making: \$@ && \\
				\$(mkdir_p) \$\$(dirname \$@) && \\
				echo "///@file" > \$@ && \\
				echo "///@brief packageneric configuration for module $module__name" >> \$@ && \\
				echo "/// This file was autogenerated by $PACKAGENERIC__SUBPATH ; do not edit." >> \$@ && \\
				echo "#pragma once" >> \$@ && \\
				echo "#define PACKAGENERIC__MODULE__NAME \"$module__name\"" >> \$@ && \\
				echo "#define PACKAGENERIC__MODULE__VERSION \"\$(${module__prefix__upper}__VERSION)\"" >> \$@ && \\
				echo "#define PACKAGENERIC__MODULE__DESCRIPTION \"\$(${module__prefix__upper}__DESCRIPTION)\"" >> \$@ && \\
				if test $module__type = lib ; \\
				then \\
					for file in \$(${module__prefix__lower}__sources) ; \\
					do \\
						echo "#define PACKAGENERIC__MODULE__SOURCE__"\$\$(echo \$\$(dirname \$\$file)/\$\$(basename \$\$file .cpp) | sed -e's:^\./::' -e's:^src/::' -e's:^\./::' -e':/./::g' -e'://::g' | tr [:lower:] [:upper:] | sed 's:/:__:g') 1 >> \$@ ; \\
					done \\
				fi
eof
		} &&

		###############################
		# module defines, program logo
		###############################
		
		if test $module__type = bin
		then
			local module__logo=$module.logo &&
			if test -e $module__logo
			then
				module__logo=$(cat $module__logo)
				cat <<logo >> $module__am__unconditional
					@echo "#define PACKAGENERIC__MODULE__LOGO \"$module__logo\"" >> \$@
logo
			fi
		fi &&
		
		##################
		# module includes
		##################
		
		{
			cat <<-eof >> $module__am__conditional
				BUILT_SOURCES += $module__includes
				CLEANFILES += $module__includes
				$module__includes: Makefile
			eof
		} &&
		{
			cat <<eof >> $module__am__conditional
				@ \\
				\$(PACKAGENERIC__ECHO) making: \$@ && \\
				\$(mkdir_p) \$\$(dirname \$@) && \\
				echo "///@file" > \$@ && \\
				echo "///@brief packageneric configuration for module $module__name" >> \$@ && \\
				echo "/// This file was autogenerated by $PACKAGENERIC__SUBPATH ; do not edit." >> \$@ && \\
				echo "#pragma once" >> \$@ && \\
				echo '#include <packageneric/package/configurations/autoconf/configuration.private.hpp>' >> \$@ && \\
				echo '#include <$module__defines>' >> \$@
eof
		} &&
		
		###########################
		# microsoft only stuff ...
		###########################
		
		#############################################################
		# microsoft, module includes, host unknown-microsoft-unknown
		#############################################################
		
		{
			local module__harcoded__microsoft__includes='$(PACKAGENERIC__HARDCODED)'$modules__path/$module/hardcoded/unknown-microsoft-unknown/packageneric/module.private.hpp
			cat <<-eof >> $module__am__unconditional
				BUILT_SOURCES += $module__harcoded__microsoft__includes
				EXTRA_DIST += $module__harcoded__microsoft__includes
				CLEANFILES += $module__harcoded__microsoft__includes
				$module__harcoded__microsoft__includes: Makefile
			eof
		} &&
		{
			cat <<eof >> $module__am__unconditional
				@ \\
				\$(PACKAGENERIC__ECHO) making: \$@ && \\
				\$(mkdir_p) \$\$(dirname \$@) && \\
				echo "///@file" > \$@ && \\
				echo "///@brief packageneric configuration for host unknown-microsoft-unknown, module $module__name" >> \$@ && \\
				echo "/// This file was autogenerated by $PACKAGENERIC__SUBPATH ; do not edit." >> \$@ && \\
				echo "#pragma once" >> \$@ && \\
				echo "#include <packageneric/package/configurations/hardcoded/unknown-microsoft-unknown/configuration.private.hpp>" >> \$@ && \\
				echo "#include <$module__defines>" >> \$@
eof
		} &&
		
		####################
		# microsoft, vcproj
		####################
		
		{
			local microsoft__vcproj=\$\(top_srcdir\)/packageneric/generic/detail/libexec/microsoft/vcproj
			local module__harcoded__microsoft__vcproj='$(PACKAGENERIC__HARDCODED)'$modules__path/$module/hardcoded/unknown-microsoft-unknown/$module.vcproj
			cat <<-eof >> $module__am__unconditional
				BUILT_SOURCES += $module__harcoded__microsoft__vcproj
				CLEANFILES += $module__harcoded__microsoft__vcproj
				EXTRA_DIST += $module__harcoded__microsoft__vcproj
				$module__harcoded__microsoft__vcproj: Makefile $microsoft__vcproj
			eof
		} &&
		{
			cat <<eof >> $module__am__unconditional
				@ \\
				\$(PACKAGENERIC__ECHO) making: \$@ && \\
				\$(mkdir_p) \$\$(dirname \$@) && \\
				echo \$(${module__prefix__lower}__sources) resources.rc | \\
				$microsoft__vcproj \\
				\$(PACKAGENERIC__MICROSOFT__VCPROJ__FLAGS) \\
				--name $(if test $module__type = lib ; then echo "lib-" ; fi)$module__name \\
				--type $module__type \\
				--srcdir ../../../../../../src \\
				\$\$(echo " \$(${automake}_CPPFLAGS) \$(${automake}_CXXFLAGS)" | sed 's/ -[^D][^ ]*/ /g' | sed 's/\\\\//g') \\
				-I. \$\$(for i in \$\$(echo " \$(PACKAGENERIC__MODULE__EXTERNAL__PATH__INCLUDES)" | sed 's: -I: -I../../../../../../:g') ; do echo \$\$i \$\$i/$module__harcoded__microsoft__includes ; done) \\
				> \$@
eof
		} &&
		unset microsoft__vcproj
		
		####################################
		# microsoft, conditionnal build ...
		####################################
		
		{
			cat <<-eof >> $module__am__conditional
				if PACKAGENERIC__OPERATING_SYSTEM__MICROSOFT
			eof
		} &&
		
		############################################
		# microsoft, program wrappers for build dir
		############################################
		
		if test $module__type = bin
		then
			{
				cat <<-eof >> $module__am__conditional
					noinst_SCRIPTS += $module__name.sh $module__name.cmd
					CLEANFILES += $module__name.sh $module__name.cmd
					$module__name.sh: \$(${automake}_DEPENDENCIES) Makefile
				eof
			} &&
			{
				cat <<eof >> $module__am__conditional
					@ \\
					echo '#! /bin/sh' > \$@ && \\
					echo "PATH='\$(PACKAGENERIC__MODULE__EXTERNAL__PATH__PATH)' \`pwd\`/.libs/$module__name\$(EXEEXT)" >> \$@ && \\
					chmod +x \$@
eof
			} &&
			{
				cat <<-eof >> $module__am__conditional
					$module__name.cmd: \$(${automake}_DEPENDENCIES) Makefile
				eof
			} &&
			{
				cat <<eof >> $module__am__conditional
					@ \\
					echo "set PATH=\$(PACKAGENERIC__MODULE__EXTERNAL__PATH__PATH);%PATH%" > \$@ && \\
					echo "\`cmd //c cd\`\\.libs\\$module__name\$(EXEEXT) || pause" >> \$@
eof
			}
		fi &&
		
		#######################
		# microsoft, resources
		#######################
		
		{
			local module__resource=$automake-resources.o
			cat <<-resources >> $module__am__conditional
				nodist_EXTRA_${automake}_RESOURCES = resources.rc $module__includes
				${automake}_LDFLAGS += -Wl,$module__resource
				BUILT_SOURCES += $module__resource
				CLEANFILES += $module__resource $module__resource.preprocessed.rc
				$module__resource: \$(nodist_EXTRA_${automake}_RESOURCES) Makefile
			resources
		} &&
		{
			cat <<resources >> $module__am__conditional
				@ \\
				\$(PACKAGENERIC__ECHO) making: \$@ && \\
				\$(CPP) -xc++ -DRC_INVOKED \\
				\$(${automake}_CPPFLAGS) \$(${automake}_CXXFLAGS) \\
				\$< -o \$@.preprocessed.rc && \\
				\$(RC) \\
				--input-format rc --input \$@.preprocessed.rc \\
				--output-format coff --output \$@ && \\
				rm -f \$@.preprocessed.rc
resources
		######################################
		# microsoft, resources (alternatives)
		######################################
		
		if false ###############################################################################################################################################
		then
			local module__resource=$automake-resources.lo
			cat <<-resources >> $module__am__conditional
				nodist_EXTRA_${automake}_RESOURCES = resources.rc $module__header \$(PACKAGENERIC__COMPILER__RESOURCE__DEPENDENCIES__GENERIC)
				${automake}_$automake__link += $module__resource
				CLEANFILES += $module__resource
				$module__resource: \$(nodist_EXTRA_${automake}_RESOURCES) Makefile
			resources
			
			local module__resource=$automake-resources.o
			cat <<-resources >> $module__am__conditional
				nodist_EXTRA_${automake}_RESOURCES = resources.rc $module__header \$(PACKAGENERIC__COMPILER__RESOURCE__DEPENDENCIES__GENERIC)
				${automake}_LDFLAGS += -Wl,$module__resource
				BUILT_SOURCES += $module__resource
				CLEANFILES += $module__resource
				$module__resource: \$(nodist_EXTRA_${automake}_RESOURCES) Makefile
			resources
			cat <<resources >> $module__am__conditional
				@ \\
				\$(PACKAGENERIC__ECHO) making: \$@ && \\
				for i in \$\$(echo " \$(${automake}_CPPFLAGS) \$(${automake}_CXXFLAGS)" | sed 's/ -[^I][^ ]*/ /g' | sed 's/ -I/ /g') ; \\
				do \\
					if test -n "\$\$i" ; \\
					then \\
						echo "unix: \$\$i" && \\
						i=\$\$(cd \$\$i && cmd //c cd) && \\
						echo "wind: \$\$i" && \\
						CPATH=\$\$CPATH\\;\$\$i ; \\
					fi ; \\
				done && \\
				echo \$\$CPATH && \\
				export CPATH && \\
				\$(RC) \\
				\$\$(echo " \$(${automake}_CPPFLAGS) \$(${automake}_CXXFLAGS)" | sed 's/ -[^DU][^ ]*/ /g') \\
				\$< -o \$@
resources
			cat <<resources >> $module__am__conditional
				@ \\
				\$(CPP) -xc++ -DRC_INVOKED \\
				\$(${automake}_CPPFLAGS) \$(${automake}_CXXFLAGS) \\
				\$< | \\
				\$(RC) --input-format rc --output-format coff --output \$@
resources
			cat <<resources >> $module__am__conditional
				@ \\
				\$(PACKAGENERIC__ECHO) making: \$@ && \\
				\$(RC) \\
				\$\$(echo " \$(${automake}_CPPFLAGS) \$(${automake}_CXXFLAGS)" | sed 's/ -[^DU][^ ]*/ /g') \\
				--input-format rc --input \$< \\
				--output-format coff --output \$@
resources
			cat <<resources >> $module__am__conditional
				@ \\
				\$(PACKAGENERIC__ECHO) making: \$@ && \\
				\$(LIBTOOL) --tag=RC --mode=compile \\
				\$(RC) \\
				\$\$(echo " \$(${automake}_CPPFLAGS) \$(${automake}_CXXFLAGS)" | sed 's/ -[^DU][^ ]*/ /g') \\
				--input-format rc --input \$< \\
				--output-format coff -o \$@
resources
			cat <<resources >> $module__am__conditional
				@ \\
				\$(PACKAGENERIC__ECHO) making: \$@ && \\
				\$(PACKAGENERIC__COMPILER__RESOURCE) \\
				\$\$(echo " \$(${automake}_CPPFLAGS) \$(${automake}_CXXFLAGS)" | sed 's/ -[^DU][^ ]*/ /g') \\
				\$< -o \$@
resources
		fi ###############################################################################################################################################
		} &&
		
		#####################################
		# microsoft, resources, program logo
		#####################################
		
		if test $module__type = bin -a -n "${module__logo:-}"
		then
			cat <<-logo >> $module__am__conditional
				nodist_EXTRA_${automake}_RESOURCES += \$(top_srcdir)/pixmaps/$module__logo.ico
			logo
		fi &&
		
		####################################
		# ... microsoft, conditionnal build
		####################################
		
		{
			cat <<-eof >> $module__am__conditional
				endif
			eof
		}
		
		###########################
		# ... microsoft only stuff
		###########################
		
	#################
	# ... lib or bin
	#################
	
	fi &&
	
	##############################
	# ... ! monolitic compilation
	##############################
	
	{
		cat <<-eof >> $module__am__conditional
			endif
		eof
	}
} &&

echo_custom()
{
	echo -en '\033[1;34m' &&
	echo "$@" &&
	echo -en '\033[0m'
} &&

echoing()
{
	local script_path=packageneric.autogenerate.package.module
	local comment=$1 && shift &&
	echo_custom "$script_path: $comment" &&
	if test $# != 0
	then
		echo_custom "$script_path: -> calling: $@" &&
		"$@"
	fi
} &&

main "$@"
