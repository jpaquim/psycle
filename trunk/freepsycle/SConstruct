#! /usr/bin/env scons

# This source is free software ; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation ; either version 2, or (at your option) any later version.
# copyright 2006-2007 johan boule <bohan@jabber.org>
# copyright 2006-2007 psycledelics http://psycle.pastnotecut.org

# To be able to import the packageneric package, we add the parent dir of this SConstruct file to the python path:
import sys, os, os.path
sys.path.append(os.path.split(os.getcwd())[0]) # SCons always makes the dir of the SConstruct file the current dir.

# project

name = 'freepsycle' # this is the unique place where the name is defined. it is cascaded everywhere else.

from packageneric.generic.scons.project import project
project = project(name)

# authors/maintainers/uploaders

from packageneric.generic.scons.person import person
bohan = person('johan boule', 'bohan.debian.psycle@retropaganda.info')

# source package

from packageneric.generic.scons.source_package import source_package
from packageneric.generic.scons.version import version
source_package = source_package(project,
	name = project.name(),
	version = version(0, 0),
	description = '%(name)s ...' % {'name': project.name()},
	long_description = \
		"%(name)s is  a ..." % {'name': project.name()}
)

source_package.add_files(['README', 'NEWS', 'ChangeLog', 'AUTHORS', 'COPYING', 'TODO'])

# external packages

from packageneric.generic.scons.check.external_package import external_package as external_package_check
from packageneric.generic.scons.check.pkg_config import pkg_config as pkg_config_check
from packageneric.generic.scons.check.cxx_build import cxx_build as cxx_build_check

universalis = os.path.join('..', 'universalis', 'SConstruct')
if os.path.exists(universalis): universalis = project.subscript(universalis).local_package()
else:
	universalis = external_package_check(project, name = 'universalis',
		dependencies = [
			pkg_config_check(project, name = 'universalis-0 >= 0')
		],
		distribution_packages = {
			'debian and ubuntu': 'lib-universalis-0-dev (>= 0)',
			'gentoo': '...',
			'fedora': '...',
			'cygwin': '...'
		},
		url = 'http://psycle.sourceforge.net'
	)

# modules and pkg-config packages

from packageneric.generic.scons.module import module
from packageneric.generic.scons.pkg_config_package import pkg_config_package
from packageneric.generic.scons.find import find

modules = []
pkg_config_packages = []

class uniform_module(module):
	def __init__(self, name, *args, **kw):
		module.__init__(self, source_package,
			name = source_package.name() + '-' + name + '-' + str(source_package.version().major()),
			version = source_package.version(),
			*args, **kw
		)
		modules.append(self)
		self.pkg_config_package()
		self._dir = name

	def dynamic_dependencies(self):
		self.contexes().source().compilers().cxx().paths().add(['src'])
		self.add_sources(find(self.project(), 'src', [os.path.join('psycle', self._dir, '*.cpp')]))
		self.add_headers(find(self.project(), 'src', [os.path.join('psycle', self._dir, '*.hpp')]))
		if not len(self.sources()): import sys; sys.exit(1)
	
	def pkg_config_package(self):
		try: return self._pkg_config_package
		except AttributeError:
			self._pkg_config_package = pkg_config_package(project,
				name = self.name(),
				version = self.version(),
				description = self.description(),
				modules = [self]
			)
			pkg_config_packages.append(self._pkg_config_package)
			return self._pkg_config_package
	
	def as_dependency(self): return self.pkg_config_package().local_package()

# engine
engine_module = uniform_module(
	name = 'engine',
	description = 'audio engine',
	dependencies = [universalis]
)

# host
host_module = uniform_module(
	name = 'host',
	description = 'plugin host',
	dependencies = [engine_module.as_dependency()]
)

# stream
stream_module = uniform_module(
	name = 'stream',
	description = 'stream format handling',
	dependencies = [universalis]
)

# text front-end
class text_module(module):
	def __init__(self):
		module.__init__(self, source_package,
			name = source_package.name() + '-text-' + str(source_package.version().major()),
			version = source_package.version(),
			description = 'text front-end',
			dependencies = [host_module.as_dependency()],
			target_type = module.target_types.program
		)
		modules.append(self)
	def dynamic_dependencies(self):
		self.contexes().source().compilers().cxx().paths().add(['src'])
		self.add_sources(find(self.project(), 'src', [
			os.path.join('psycle', 'front_ends', 'text', '*.cpp'),
			os.path.join('psycle', 'paths.cpp')
		]))
		self.add_headers(find(self.project(), 'src', [
			os.path.join('psycle', 'front_ends', 'text', '*.hpp'),
			os.path.join('psycle', 'paths.hpp')
		]))
text_module = text_module()

if False:
	# debian

	from packageneric.generic.scons.debian_package import debian_package

	engine_runtime = debian_package(project,
		name = 'lib-' + name + '-engine-' + str(source_package.version().major()),
		section = 'libs',
		description = engine_package.description(),
		long_description = 'This package contains the runtime library.'
	)
	#universalis_runtime.add_files(engine_package.binaries())

	class engine_dev(debian_package):
		def __init__(self):
			debian_package.__init__(self, project,
				name = engine_runtime.name() + '-dev',
				section = 'libdevel',
				description = engine_package.description(),
				long_description = 'This package contains the development files.',
			)
		def dynamirc_dependencies(self):
			self.add_depend(engine_runtime)
			self.add_build_depends(engine_package.build_depends())
	engine_dev = engine_dev()
	#engine_dev.add_files(engine_package.headers())
	#engine_dev.add_files(engine_package.pkg_config())

	engine_doc = debian_package(project,
		name = engine_runtime.name() + '-doc',
		section = 'doc',
		architecture = 'all',
		description = engine_package.description(),
		long_description = 'This package contains the documentation.'
	)

	from packageneric.generic.scons.debian import debian
	debian = debian(source_package,
		maintainer = bohan,
		binary_packages = [engine_runtime, engine_dev, engine_doc],
	)

project(pkg_config_packages + [text_module])
