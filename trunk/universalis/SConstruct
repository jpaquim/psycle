#! /usr/bin/env scons

import os, packageneric

# init
packageneric = packageneric.Packageneric(Environment, Configure)

# source package

source_package = packageneric.SourcePackage(
	name = 'universalis',
	version = [0, 0, 0],
	description = '''blah blah'''
)

# configure
if True:
	bool  = packageneric.pkg_config('pkg-config >= 0.18', 'exists')
	bool &= packageneric.pkg_config('glibmm-2.4 >= 2.4', 'exists')
	bool &= packageneric.pkg_config('diversalis >= 0', 'exists')

	diversalis = packageneric.ExternalPackage(
		packageneric,
		debian = 'lib-diversalis-0-dev',
		debian_version_compare = '>= 0',
		pkg_config = 'diversalis'
	)
	diversalis.show()

	glibmm = packageneric.ExternalPackage(
		packageneric,
		debian = 'libglibmm-dev',
		debian_version_compare = '>= 2.4',
		pkg_config = 'glibmm-2.4'
	)
	glibmm.show()

	boost = packageneric.ExternalPackage(
		packageneric,
		debian = 'libboost-dev',
		debian_version_compare = '>= 1.33'
	)
	packageneric.configure().CheckHeader('boost/version.hpp')
	packageneric.configure().CheckLib('boost_thread') # adds to env LIBS automatically

	if not bool:
		print '*** some of the checks above failed ***'
	env = packageneric.configure().Finish()

# modules	
if True:
	universalis = packageneric.Module(
		packageneric,
		name = 'lib-universalis',
		version = source_package.version,
		description = source_package.description,
		public_requires = [diversalis, glibmm, boost]
	)
	universalis.add_sources(packageneric.Find('.', 'src/universalis', '*.cpp'))
	universalis.add_headers(packageneric.Find('.', 'src/universalis', '*.hpp'))
	universalis.show()

# install
if False:
	import SCons as cobaye
	install = packageneric.InstallPrefix(cobaye)
	packageneric.environment().Install(install.lib, universalis.scons())
	packageneric.environment().Install(install.include, universalis.get_headers())
	packageneric.environment().Alias('install', install.prefix)

# stuff ...
if False:
	print universalis.get_sources()
	print universalis.get_headers()
	universalis.scons()

# package
if True:
	universalis_package = packageneric.Package(
		name = 'universalis',
		version = universalis.version,
		description = universalis.description,
		modules = [universalis]
	)

# debian package
if True:	
	universalis_runtime = packageneric.DebianPackage(
		name = 'lib-universalis-0',
		section = 'libs',
		long_description = universalis_package.description + '\n .\n This package contains the runtime library.'
	)
	universalis_runtime.depends = universalis.public_requires
	#universalis_runtime.files.append(universalis_package.get_binaries())
	
	universalis_dev = packageneric.DebianPackage(
		name = 'lib-universalis-0-dev',
		section = 'libdevel',
		long_description = universalis_package.description + '\n .\n This package contains the development files.',
	)
	universalis_dev.depends = universalis.public_requires
	#universalis_dev.files.append(universalis_package.get_headers())
	#universalis_dev.files.append(universalis_package.get_libs())
	#universalis_dev.files.append(universalis_package.get_pkg_configs())
	
	universalis_doc = packageneric.DebianPackage(
		name = 'lib-universalis-0-doc',
		section = 'doc',
		architecture = 'all',
		long_description = universalis_package.description + '\n .\n This package contains the documentation.'
	)
	
	debian = packageneric.Debian(
		source_package = source_package,
		binary_packages = [universalis_runtime, universalis_dev, universalis_doc]
	)
	debian.control(None)
	