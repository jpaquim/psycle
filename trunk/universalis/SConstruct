#! /usr/bin/env scons

# This source is free software ; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation ; either version 2, or (at your option) any later version.
# copyright 2006 johan boule <bohan@jabber.org>
# copyright 2006 psycledelics http://psycle.pastnotecut.org

# init

import packageneric.generic
packageneric = packageneric.generic.packageneric()

# source package

bohan = packageneric.person('Johan Boule', 'bohan.debian.universalis@retropaganda.info')

source_package = packageneric.source_package(
	name = 'universalis',
	version = packageneric.version(0, 0),
	description = 'universalis platform abstraction layer library',
	long_description =
'''\
universalis is a library which abstracts the few platform specificities
which are not handled by the boost and glibmm libraries themselves.
Those abstractions of platforms specificities can be categorized into:
 - tweaks for conformance with the C++ standard library
 - widespread compiler extensions to the C++ standard
 - widespread operating system features
 - widespread CPU features'''
)

# external packages

diversalis = packageneric.external_package(
	pkg_config = 'diversalis >= 0',
	debian = 'lib-diversalis-0-dev (>= 0)'
)

glibmm = packageneric.external_package(
	pkg_config = 'glibmm-2.4 >= 2.4 gthread-2.0 >= 2.10',
	debian = 'libglibmm-2.4-dev (>= 2.4)',
)

# boost base
class boost_version:
	wanted = '1.33'
	wanted_raw = 103300
	def __str__(self):
		return 'boost version >= ' + boost_version.wanted
	def __call__(self):
		return boost.try_run(
			'boost version',
			'''
				#include <boost/version.hpp>
				#include <iostream>
				int main() { return !(BOOST_VERSION >= %i); }
			\n''' % boost_version.wanted_raw
		)[0]
boost = packageneric.external_package(
	debian = 'libboost-dev (>= ' + boost_version.wanted + ')',
	frees = [boost_version()]
)

# boost	libraries
boost_libraries = packageneric.external_package(
	debian = 'libboost-thread-dev (>= ' + boost_version.wanted + '), libboost-filesystem-dev (>= ' + boost_version.wanted + ')',
	depends = [boost],
	builds = [
		['boost_thread', 'boost/thread/thread.hpp', 'boost::thread::thread thread;'],
		['boost_filesystem', 'boost/filesystem/path.hpp', 'boost::filesystem::path path;']
	]
)

# modules

universalis = packageneric.module(
	name = 'lib-universalis-' + str(source_package.version().major()),
	version = source_package.version(),
	description = source_package.description(),
	depends = [glibmm, boost_libraries],
	build_depends = [diversalis]
)
import os.path
universalis.add_sources(packageneric.find('.', os.path.join('src', 'universalis'), '*.cpp'))
universalis.add_headers(packageneric.find('src', 'universalis', '*.hpp'))
universalis.add_include_path('src')
universalis.add_include_path('tmp')
if universalis.name() in BUILD_TARGETS:
	universalis.show()
	universalis_library = universalis.targets()

# pkg-config packages

universalis_package = packageneric.pkg_config_package(
	name = 'universalis-' + str(source_package.version().major()),
	version = universalis.version(),
	description = universalis.description(),
	modules = [universalis]
)

# install
if False:
	installation_paths = packageneric.installation_paths()
	packageneric.environment().install('install', installation_paths.lib(), universalis.libraries())
	packageneric.environment().install('install', installation_paths.include(), universalis.headers())
	#packageneric.environment().alias('install', installation_paths.lib())
	#packageneric.environment().alias('install', installation_paths.include())

# debian

universalis_runtime = packageneric.debian_package(
	name = 'lib-universalis-' + str(source_package.version().major()),
	section = 'libs',
	description = universalis_package.description(),
	long_description = 'This package contains the runtime library.'
)
#universalis_runtime.add_files(universalis_package.binaries())

universalis_dev = packageneric.debian_package(
	name = universalis_runtime.name() + '-dev',
	section = 'libdevel',
	description = universalis_package.description(),
	long_description = 'This package contains the development files.',
)
universalis_dev.add_depend(universalis_runtime)
universalis_dev.add_build_depends(universalis_package.build_depends())
#universalis_dev.add_files(universalis_package.headers())
#universalis_dev.add_files(universalis_package.pkg_config())

universalis_doc = packageneric.debian_package(
	name = universalis_runtime.name() + '-doc',
	section = 'doc',
	architecture = 'all',
	description = universalis_package.description(),
	long_description = 'This package contains the documentation.'
)

debian = packageneric.debian(
	source_package = source_package,
	maintainer = bohan,
	binary_packages = [universalis_runtime, universalis_dev, universalis_doc],
)
if 'debian/control' in BUILD_TARGETS:
	packageneric.information('======== debian/control ========')
	#debian_control = packageneric.environment().Value(debian.control())
	print debian.control()
