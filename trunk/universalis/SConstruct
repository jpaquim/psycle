#! /usr/bin/env scons

# This source is free software ; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation ; either version 2, or (at your option) any later version.
# copyright 2006 johan boule <bohan@jabber.org>
# copyright 2006 psycledelics http://psycle.pastnotecut.org

# init

import packageneric
packageneric = packageneric.Packageneric(ARGUMENTS, Help, Configure)

# source package

class Version:
	major = 0
	minor = 0
	patch = 0

bohan = packageneric.Person('Johan Boule', 'bohan.debian.universalis@retropaganda.info')

source_package = packageneric.SourcePackage(
	name = 'universalis',
	version = [Version.major, Version.minor, Version.patch],
	description = 'universalis platform abstraction layer library',
	long_description =
'''\
universalis is a library which abstracts the few platform specificities
which are not handled by the boost and and glibmm libraries themselves.
Those abstractions of platforms specificities can be categorized into:
 - tweaks for conformance with the C++ standard library
 - widespread compiler extensions to the C++ standard
 - widespread operating system features
 - widespread CPU features'''
)

# configure
if True:
	#diversalis = packageneric.check().ExternalPackage(
	diversalis = packageneric.ExternalPackage(
		packageneric,
		pkg_config = 'diversalis',
		pkg_config_version_compare = '>= 0',
		debian = 'lib-diversalis-0-dev',
		debian_version_compare = '>= 0'
	)
	diversalis.show()

	glibmm = packageneric.ExternalPackage(
		packageneric,
		pkg_config = 'glibmm-2.4',
		pkg_config_version_compare = '>= 2.9',
		debian = 'libglibmm-2.4-dev',
		debian_version_compare = '>= 2.9',
	)
	glibmm.show()
	#if glibmm.failed():

	glibmm = packageneric.ExternalPackage(
		packageneric,
		pkg_config = 'glibmm-2.4',
		pkg_config_version_compare = '>= 2.4',
		debian = 'libglibmm-2.4-dev',
		debian_version_compare = '>= 2.4',
	)
	glibmm.show()

	# boost base	
	boost = packageneric.ExternalPackage(
		packageneric,
		debian = 'libboost-dev',
		debian_version_compare = '>= 1.33'
	)
	boost.show()
	if True:
		packageneric.check_header(boost, 'boost/version.hpp')
		boost_result, boost_version = packageneric.try_run(
			'boost version',
			'''
				#include <boost/version.hpp>
				#include <iostream>
				int main()
				{
					std::cout << BOOST_VERSION;
				}
			'''
		)
		print 'boost version', boost_version, boost_version >= 103300
		if boost_version < str(103300):
			print 'please install', boost.debian, boost.debian_version_compare

	# boost	thread
	boost_thread = packageneric.ExternalPackage(
		packageneric,
		debian = 'libboost-thread-dev',
		debian_version_compare = boost.debian_version_compare
	)
	boost_thread.show()
	packageneric.check_header_and_library(boost_thread, 'boost/thread/thread.hpp', 'boost_thread')

	packageneric.finish_configure()

# modules	
if True:
	universalis = packageneric.module(
		name = 'lib-universalis-' + str(Version.major),
		version = source_package.version,
		description = source_package.description,
		public_requires = [diversalis, glibmm, boost]
	)
	import os.path
	universalis.add_sources(packageneric.Find('.', os.path.join('src', 'universalis'), '*.cpp'))
	universalis.add_headers(packageneric.Find('src', 'universalis', '*.hpp'))
	universalis.add_include_path('src')
	universalis.add_include_path('tmp')
	universalis.show()
if False:
	packageneric.trace(str(universalis.get_sources()))
	print
	packageneric.trace(str(universalis.get_headers()))
if True:
	universalis.scons()

# pkg-config packages
if True:
	universalis_package = packageneric.PkgConfigPackage(
		name = 'universalis-' + str(Version.major),
		version = universalis.version,
		description = universalis.description,
		modules = [universalis]
	)

# install
if False:
	install = packageneric.InstallPrefix(packageneric)
	packageneric.environment().Install(install.lib, universalis.get_libs())
	packageneric.environment().Install(install.include, universalis.get_headers())
	packageneric.environment().Alias('install', install.prefix)

# debian packages
if True:	
	universalis_runtime = packageneric.DebianPackage(
		name = 'lib-universalis-' + str(Version.major),
		section = 'libs',
		description = universalis_package.description,
		long_description = 'This package contains the runtime library.'
	)
	universalis_runtime.depends = universalis.public_requires
	#universalis_runtime.files.append(universalis_package.get_binaries())
	
	universalis_dev = packageneric.DebianPackage(
		name = universalis_runtime.name + '-dev',
		section = 'libdevel',
		description = universalis_package.description,
		long_description = 'This package contains the development files.',
	)
	universalis_dev.depends = universalis.public_requires
	#universalis_dev.files.append(universalis_package.get_headers())
	#universalis_dev.files.append(universalis_package.get_libs())
	#universalis_dev.files.append(universalis_package.get_pkg_configs())
	
	universalis_doc = packageneric.DebianPackage(
		name = universalis_runtime.name + '-doc',
		section = 'doc',
		architecture = 'all',
		description = universalis_package.description,
		long_description = 'This package contains the documentation.'
	)
	
	debian = packageneric.Debian(
		source_package = source_package,
		maintainer = bohan,
		binary_packages = [universalis_runtime, universalis_dev, universalis_doc],
	)
	#print '======== debian/control'
	#print debian.control()
