#! /usr/bin/env scons

import os, packageneric as jerrycan

env = Environment()
env.BuildDir(os.path.join('++packageneric', 'build', 'scons'), 'src', duplicate=0)

if True:
	# Configuration:
	conf = Configure(env,
		custom_tests = {
			'PkgConfig' : jerrycan.pkg_config
		})
	bool  = conf.PkgConfig('pkg-config >= 0.18', 'exists')
	bool &= conf.PkgConfig('glibmm-2.4 >= 2.4', 'exists')
	bool &= conf.PkgConfig('diversalis >= 0', 'exists')

	diversalis = jerrycan.ExternalPackage(env, 'lib-diversalis-0-dev', '>= 0', 'diversalis')
	diversalis.show()

	glibmm = jerrycan.ExternalPackage(env, 'libglibmm-dev', '>= 2.4', 'glibmm-2.4')
	glibmm.show()

	boost = jerrycan.ExternalPackage(env, 'libboost-dev', '>= 1.33')
	boost.check_header('boost/version.hpp')
	boost.show()

	if not bool:
		print '*** some of the checks above failed ***'
	env = conf.Finish()
	
if True:
	universalis = jerrycan.Module(env, 'lib-universalis')
	universalis.add_public_requires(diversalis)
	universalis.add_public_requires(glibmm)
	universalis.add_public_requires(boost)
	universalis.add_sources(jerrycan.Find('.', 'src/universalis', '*.cpp'))
	universalis.add_headers(jerrycan.Find('.', 'src/universalis', '*.hpp'))
	universalis.show()

if False:
	import SCons as cobaye
	install = jerrycan.InstallPrefix(cobaye)
	env.Install(install.lib, universalis.scons())
	env.Install(install.include, universalis.get_headers())
	env.Alias('install', install.prefix)

if False:
	print universalis.get_sources()
	print universalis.get_headers()
	universalis.scons()

if False:
	universalis_package = jerrycan.Package('universalis')
	universalis_package.modules.append(universalis)
	universalis_package.version = universalis.version
	universalis_package.description = universalis.description
	
	universalis_runtime = jerrycan.DebianPackage('lib-universalis-0')
	universalis_runtime.section = 'libs'
	universalis_runtime.long_description = universalis_package.description
	universalis_runtime.long_description += '\n .\n This package contains the runtime library.'
	universalis_runtime.files.append(universalis_package.get_binaries())
	
	universalis_dev = jerrycan.DebianPackage('lib-universalis-0-dev')
	universalis_dev.section = 'libdevel'
	universalis_dev.long_description = universalis_package.description
	universalis_dev.long_description += '\n .\n This package contains the development files.'
	universalis_dev.files.append(universalis_package.get_headers())
	universalis_dev.files.append(universalis_package.get_libs())
	universalis_dev.files.append(universalis_package.get_pkg_configs())
	
	universalis_doc = jerrycan.DebianPackage('lib-universalis-0-doc')
	universalis_doc.section = 'doc'
	universalis_doc.long_description = universalis_package.description
	universalis_doc.long_description += '\n .\n This package contains the documentation.'
	universalis_doc.architecture = 'all'
	
	debian = jerrycan.Debian()
	debian.source_package = source_package
	debian.binary_packages.append(universalis_runtime)
	debian.binary_packages.append(universalis_dev)
	debian.binary_packages.append(universalis_doc)
