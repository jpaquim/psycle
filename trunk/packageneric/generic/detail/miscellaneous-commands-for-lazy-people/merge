#! /bin/bash

##############################################################################
#
# This source is free software ; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation ; either version 2 of the License, or (at your option) any later version.
# Copyright (C) 2004-2005 Johan Boule <bohan.dyndns.org>
#
# \meta generic
# \meta standard gnu
#
##############################################################################

set -o nounset &&

function main
{
	local ancestor=$1 && shift &&
	local left=$1 && shift &&
	local right=$1 && shift &&
	local output=$1 && shift &&
	local entry=$1 && shift &&
	! shift ||
	{
		echo -e "$(basename $0): usage:" &&
		echo -e "$(basename $0): \t $(basename $0) <common-ancestor-directory> <left-directory> <right-directory> <output-directory> <entry-to-compare>" &&
		echo -e "$(basename $0): \t where:" &&
		echo -e "$(basename $0): \t\t <common-ancestor-directory> directory of the version which is the common ancestor (use empty argument or /dev/null if there is no ancestor)" &&
		echo -e "$(basename $0): \t\t <left-directory>            directory of the version shown on the left side" &&
		echo -e "$(basename $0): \t\t <right-directory>           directory of the version shown on the right side" &&
		echo -e "$(basename $0): \t\t <output-directory>          directory where to write the result of the merge to" &&
		echo -e "$(basename $0): \t\t <entry-to-compare>          subdirectory or file to compare, as a path relative to the other directories" &&
		echo -e "$(basename $0): examples:" &&
		echo -e "$(basename $0): \t merges src/foo with output to a new working directory:" &&
		echo -e "$(basename $0): \t\t $(basename $0) releases/foo-1.0.0 releases/foo-1.0.1 working-dir/foo-1.0.0 working-dir/foo-1.0.1 src/foo" &&
		echo -e "$(basename $0): \t merges src/foo with output to the same, current, working directory:" &&
		echo -e "$(basename $0): \t\t $(basename $0) releases/foo-1.0.0 releases/foo-1.0.1 . . src/foo" &&
		false
		return
	} &&
	
	if test -z "$ancestor" -o "$ancestor" = /dev/null
	then
		unset ancestor
	else
		ancestor=$ancestor/$entry
	fi &&
	left=$left/$entry &&
	right=$right/$entry &&
	output=$output/$entry &&
	
	#colordiff $left $right
	#diff3 $left $ancestor $right
	
	#local dummy=true &&
	
	echo -n "$(basename $0): $entry: " &&
	
	if test -z "$ancestor" -o ! -e "$ancestor"
	then
		echo -n "no ancestor ; " &&
		unset ancestor
	fi &&
	
	if test -d "$ancestor" -o -d $left -o -d $right
	then
		echo "directory => merge" &&
		$dummy merge "$ancestor" $left $right $output
	elif test ! -e $left -o ! -e $right
	then
		if test ! -e $left -a ! -e $right
		then
			echo "does not exist in any side => nothing"
		else
			if test -e $left
			then
				local side=left
			else
				local side=right
			fi &&
			if test -z "$ancestor"
			then
				echo "new in $side => output" &&
				$dummy output $(eval echo \$$side) $output
			else
				echo -n "only remaining in $side ; " &&
				if ! cmp $ancestor $(eval echo \$$side) > /dev/null
				then
					echo " modified => unresolved conflict" &&
					false
				else
					echo " unmodified => could be deleted" &&
					: #$dummy rm --recursive --force $output
				fi
			fi
		fi
	else test -e $left -a -e $right || false
		if test -z "$ancestor"
		then
			echo -n "no ancestor ; " &&
			echo -n "left " &&
			if ! cmp $left $right > /dev/null
			then
				echo "!= right => merge" &&
				$dummy merge '' $left $right $output
			else
				echo "== right => output" &&
				$dummy same $left $right $output
			fi
		else
			echo -n "left " &&
			if ! cmp $left $ancestor > /dev/null
			then
				echo -n "!= ancestor " &&
				if ! cmp $ancestor $right > /dev/null
				then
					echo -n "!= right " &&
					if ! cmp $right $left > /dev/null
					then
						echo "!= left => merge" &&
						$dummy merge $ancestor $left $right $output
					else
						echo "== left => output" &&
						$dummy same $left $right $output
					fi
				else
					echo "== right => left -> output" &&
					$dummy output $left $output
				fi
			else
				echo "== ancestor => right -> output" &&
				$dummy output $right $output
			fi
		fi
	fi ||
	{
		echo &&
		echo "$(basename $0): failed for $@" &&
		false
	}
} &&

function output
{
	local input=$1 && shift &&
	local output=$1 && shift &&
	if test $input != $output
	then
		cat $input > $output
	fi
} &&

function same
{
	local left=$1 && shift &&
	local right=$1 && shift &&
	local output=$1 && shift &&
	if test $output != $left -a $output != $right
	then
		output $right $output
	fi
} &&

function merge
{
	local ancestor=$1 && shift &&
	local left=$1 && shift &&
	local right=$1 && shift &&
	local output=$1 && shift &&
	kdiff3 $(if test -n "$ancestor" ; then echo "--base $ancestor" ; fi) $left $right --merge --output $output
} &&

if which dos2unix > /dev/null
then
	function tmp
	{
		local tmp=/tmp/$(basename $0).cmp.dos2unix.$$ &&
		if test -e $tmp
		then
			rm --recursive --force $tmp
		fi &&
		mkdir $tmp &&
		"$@" ||
		local failed=true &&
		if test -n "$tmp" -a -e "$tmp"
		then
			rm --recursive --force $tmp
		fi &&
		test "$failed" != true
	} &&
	function cmp
	{
		#dos2unix < $1 > $tmp/0 &&
		#dos2unix < $2 > $tmp/1 &&
		dos2unix --quiet --newfile $1 $tmp/0 &&
		dos2unix --quiet --newfile $2 $tmp/1 &&
		command cmp $tmp/0 $tmp/1
	} &&
	tmp main "$@"
else
	main "$@"
fi
