#! /bin/bash

##############################################################################
#
# This source is free software ; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation ; either version 2, or (at your option) any later version.
# Copyright (C) 1999-2005 Psycledelics http://psycle.pastnotecut.org : Johan Boule
#
# \meta generic
# \meta standard gnu
#
##############################################################################

set -eu &&

function main
{
	local defines=
	local includes=
	local lib__dirs=
	local lib__names=
	local output='$(SolutionDir)/++$(SolutionFileName)'
	while test $# != 0
	do
		case $1 in
			--name) shift && local name=$1 ;;
			--type) shift && local type=$1 ;;
			-D*) defines="$defines;"$(echo "$1" | cut --characters=3- | sed 's|<|\&lt;|g' | sed 's|>|\&gt;|') ;;
			--srcdir) shift && local srcdir=$1 && includes="$includes;$srcdir" ;;
			-I*) includes="$includes;"$(echo "$1" | cut --characters=3-) ;;
			-L*) lib__dirs="$lib__dirs;"$(echo "$1" | cut --characters=3-) ;;
			#-l*) lib__names="$lib__names "$(echo "$1" | cut --characters=3-) ;;
			*.la) lib__names="$lib__names "$(basename $1 .la).lib ;;
			--output) shift && local output=$1 ;;
		esac
		shift
	done
	project $name "$defines" $srcdir "$includes" "$lib__dirs" "$lib__names" 8.00 "debug release" Win32 $type "$output"
} &&

function project
{
	local name=$1
	local defines=$2
	local srcdir=$3
	local includes=$4
	local lib__dirs=$5
	local lib__names=$6
	local version=$7
	local configurations=$8
	local platforms=$9
	local type=${10}
	local output=${11}
	local encoding=${12:-utf-8} # or iso-8859-1(5) but never windows-1252 !
	cat<<-eof
		<?xml version='1.0' encoding='$encoding'?>
		<!-- this file was autogenerated by $0 ; do not edit -->
		<VisualStudioProject
		  Name='$name'
		  Version='$version'
		>
		  <Platforms>
				$(
					for platform in $platforms
					do
						cat<<-platform
							    <Platform Name='$platform'/>
						platform
					done
				)
		  </Platforms>
		  <Configurations>
				$(
					for configuration in $configurations
					do
						for platform in $platforms
						do
							configuration $configuration $platform "$defines" "$includes" "$lib__dirs" "$lib__names" $type "$output"
						done
					done
				)
		  </Configurations>
		  <Files>
	eof
			translation-units $srcdir
	cat<<-eof
		  </Files>
		</VisualStudioProject>
	eof
} &&

function configuration
{
	local name=$1
	local platform=$2
	local defines=$3
	local includes=$4
	local lib__dirs=$5
	local lib__names=$6
	local type=$7
	local output=$8
	cat<<-eof
		    <Configuration
		      Name='$name|$platform'
		      OutputDirectory='$output/\$(ConfigurationName)/bin'
		      IntermediateDirectory='\$(OutDir)/../intermediate/\$(ProjectName)'
		      ConfigurationType='$(if test $type = lib ; then echo 2 ; else echo 1 ; fi)'
		      DeleteExtensionsOnClean='*.obj;\$(TargetDir)/\$(TargetName).ilk;*.pdb;*.tlb;*.tli;*.tlh;*.tmp;*.rsp;*.cmd;\$(TargetPath)'
		      $(configuration--$name)
		    >
				$(configuration--$name--compiler-and-linker "$defines" "$includes" "$lib__dirs" "$lib__names")
		    </Configuration>
	eof
		      # create pre-compiled headers
		      #IntermediateDirectory='$output/intermediate/\$(ProjectName)'
		      #OutputDirectory='\$(IntDir)/..'
} &&

function compiler
{
	local defines=$1
	local includes=$2
	# Note: We use ExceptionHandling='false' because we want asynchronous exception handling /EHa.
	cat<<-eof
	
		        Name='VCCLCompilerTool'
		        PreprocessorDefinitions='$defines'
		        AdditionalIncludeDirectories='$includes'
		        AdditionalOptions='/EHa /QIfist /Op- /WL'
		        ExceptionHandling='false'
		        RuntimeTypeInfo='true'
		        ForceConformanceInForLoopScope='true'
		        WarningLevel='4'
		        Detect64BitPortabilityProblems='true'
		        SuppressStartupBanner='true'
	eof
		        #PreprocessorDefinitions='_WINDLL'
		        #DisableSpecificWarnings='4652'
		        
		        # use pre-compiled headers
		        #UsePrecompiledHeader='3'
		        #PrecompiledHeaderThrough='<xxx/detail/project.private.hpp>'
		        #PrecompiledHeaderFile='$(IntDir)/../pre_compiled_headers.pch'
		        #ProgramDataBaseFileName='$(IntDir)/../pre_compiled_headers.pdb'
		        
		        # create pre-compiled headers
		        #UsePrecompiledHeader='1'
		        #PrecompiledHeaderThrough=''
		        #PrecompiledHeaderFile='$(OutDir)/$(ProjectName).pch'
		        #ProgramDataBaseFileName='$(OutDir)/$(ProjectName).pdb'
} &&

function resources
{
	local defines=$1
	local includes=$2
	cat<<-eof
	
		        Name='VCResourceCompilerTool'
		        PreprocessorDefinitions='$defines'
		        AdditionalIncludeDirectories='$includes'
	eof
} &&

function linker
{
	local lib__dirs=$1
	local lib__names=$2
	cat<<-eof
	
		        Name='VCLinkerTool'
		        AdditionalLibraryDirectories='\$(OutDir)/../lib;$lib__dirs'
		        AdditionalLibraries='$lib__names'
		        ImportLibrary='\$(OutDir)/../lib/\$(ProjectName).lib'
		        OptimizeForWindows98='1'
		        SuppressStartupBanner='true'
	eof
		        #LinkDLL='true'
		        
		        # use pre-compiled headers
		        #ProgramDatabaseFile='$(OutDir)/$(InputName).pdb'
		        
		        # create pre-compiled headers
		        #ProgramDatabaseFile='$(IntDir)/$(InputName).pdb'
} &&

function configuration--debug
{
	cat<<-eof
		WholeProgramOptimization='false'
	eof
} &&
function configuration--debug--compiler-and-linker
{
	local defines=$1
	local includes=$2
	local lib__dirs=$3
	local lib__names=$4
	cat<<-eof
		      <Tool $(compiler "$defines" "$includes")
		        RuntimeLibrary='3'
		        BasicRuntimeChecks='3'
		        SmallerTypeCheck='true'
		        Optimization='0'
		        EnableFunctionLevelLinking='true'
		        BrowseInformation='1'
		        DebugInformationFormat='4'
		      />
		      <Tool $(resources "$defines" "$includes")
		      />
		      <Tool $(linker "$lib__dirs" "$lib__names")
		        LinkIncremental='2'
		        OptimizeReferences='1'
		        EnableCOMDATFolding='1'
		        GenerateDebugInformation='true'
		      />
	eof
} &&

function configuration--release
{
	cat<<-eof
		WholeProgramOptimization='true'
	eof
} &&
function configuration--release--compiler-and-linker
{
	local defines="NDEBUG;$1"
	local includes=$2
	local lib__dirs=$3
	local lib__names=$4
	cat<<-eof
		      <Tool $(compiler "$defines" "$includes")
		        RuntimeLibrary='2'
		        BufferSecurityCheck='false'
		        SmallerTypeCheck='false'
		        Optimization='4'
		        OptimizeForProcessor='3'
		        FavorSizeOrSpeed='1'
		        GlobalOptimizations='true'
		        InlineFunctionExpansion='2'
		        EnableIntrinsicFunctions='true'
		        OmitFramePointers='true'
		        EnableFiberSafeOptimizations='true'
		        StringPooling='true'
		      />
		      <Tool $(resources "$defines" "$includes")
		      />
		      <Tool $(linker "$lib__dirs" "$lib__names")
		        LinkIncremental='1'
		        OptimizeReferences='2'
		        EnableCOMDATFolding='2'
		        WholeProgramOptimization='true'
		        LinkTimeCodeGeneration='3'
		      />
		      <Tool
		        Name='VCLibrarianTool'
		        LinkTimeCodeGeneration='true'
		      />
	eof
} &&

function filter
{
	local name=$1
	cat<<-eof
		    <Filter Name='$name' Filter=''>
				$("$@")
		    </Filter>
	eof
} &&

function file
{
	local srcdir=$1
	local file=$2
	case $file in
		*.cpp) local extension=cpp ;;
		*.rc) local extension=rc ;;
		*) local extension= ;;
	esac
	local base=$(dirname $file)/$(basename $file .$extension)
	cat<<-eof
		      <File RelativePath='$srcdir/$file'>
					$(
						if test -n "$extension"
						then
							for configuration in $configurations
							do
								for platform in $platforms
								do
									cat<<-file
										        <FileConfiguration Name='$configuration|$platform'>
										          <Tool
													$(
														case $extension in
															(cpp)
																cat<<-tool
															            Name='VCCLCompilerTool'
															            ObjectFile='\$(IntDir)/$base.obj'
															            BrowseInformationFile='\$(IntDir)/$base.sbr'
																tool
															;;
															(rc)
																cat<<-tool
															            Name='VCResourceCompilerTool'
															            ResourceOutputFileName='\$(IntDir)/$base.res'
																tool
															;;
														esac
													)
										          />
										        </FileConfiguration>
									file
								done
							done
						fi
					)
		      </File>
	eof
} &&

function translation-units
{
	local srcdir=$1
	for file in $(cat)
	#while read file
	do
		#filter $(dirname $file) file $srcdir $file
		file $srcdir $file
	done
} &&

main "$@"
