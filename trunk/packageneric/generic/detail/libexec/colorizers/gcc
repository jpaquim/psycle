#! /usr/bin/env perl

##############################################################################
#
# This source is free software ; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation ; either version 2 of the License, or (at your option) any later version.
# copyright 2004-2006 johan boule <bohan@jabber.org>
# copyright 2004-2006 psycledelics http://psycle.pastnotecut.org
#
# modified by johan boule
# based on ...
#
##############################################################################
#
# colorgcc
#
# Version: 1.3.2
#
# $Id: colorgcc,v 1.10 1999/04/29 17:15:52 jamoyers Exp $
#
# A wrapper to colorize the output from compilers whose messages
# match the "gcc" format.
#
# Requires the ANSIColor module from CPAN.
#
# Usage:
#
# In a directory that occurs in your PATH _before_ the directory
# where the compiler lives, create a softlink to colorgcc for
# each compiler you want to colorize:
#
#    g++ -> colorgcc
#    gcc -> colorgcc
#    cc  -> colorgcc
#    etc.
#
# That's it. When "g++" is invoked, colorgcc is run instead.
# colorgcc looks at the program name to figure out which compiler to run.
#
# The default settings can be overridden with ~/.colorgccrc.
# See the comments in the sample .colorgccrc for more information.
#
# Note:
#
# colorgcc will only emit color codes if:
# 
#    (1) Its STDOUT is a tty and
#    (2) the value of $TERM is not listed in the "nocolor" option.
#
# If colorgcc colorizes the output, the compiler's STDERR will be
# combined with STDOUT. Otherwise, colorgcc just passes the output from
# the compiler through without modification.
# 
# Author: Jamie Moyers <jmoyers@geeks.com>
# Started: April 20, 1999
# Licence: GNU Public License
#
# Credits:
#
#    I got the idea for this from a script called "color_cvs":
#       color_cvs .03   Adrian Likins <adrian@gimp.org> <adrian@redhat.com>
#
#    <seh4@ix.netcom.com> (Scott Harrington)
#       Much improved handling of compiler command line arguments.
#       exec compiler when not colorizing to preserve STDOUT, STDERR.
#       Fixed my STDIN kludge.
#       
#    <ecarotti@athena.polito.it> (Elias S. G. Carotti)
#       Corrected handling of text like -DPACKAGE=\"Package\"
#       Spotted return code bug.
#
#    <erwin@erwin.andreasen.org> (Erwin S. Andreasen)
#    <schurchi@ucsd.edu> (Steve Churchill)
#       Return code bug fixes.
#
#    <rik@kde.org> (Rik Hemsley)
#       Found STDIN bug.
#
# Changes:
#
# 1.3.2 Better handling of command line arguments to compiler.
#
#       If we aren't colorizing output, we just exec the compiler which
#       preserves the original STDOUT and STDERR.
#
#       Removed STDIN kludge. STDIN being passed correctly now.
# 
# 1.3.1 Added kludge to copy STDIN to the compiler's STDIN.
#
# 1.3.0 Now correctly returns (I hope) the return code of the compiler
#       process as its own.
# 
# 1.2.1 Applied patch to handle text similar to -DPACKAGE=\"Package\".
#
# 1.2.0 Added tty check. If STDOUT is not a tty, don't do color.
#
# 1.1.0 Added the "nocolor" option to turn off the color if the terminal type
#       ($TERM) is listed.
#
# 1.0.0 Initial Version
#
##############################################################################

use Term::ANSIColor;
use IPC::Open3;
use Cwd 'abs_path';

sub initDefaults
{
   $nocolor{"dumb"} = "true";

   $colors{"introFileNameColor"} = color("bold blue");
   $colors{"introNumberColor"}   = color("blue");
   $colors{"introMessageColor"} = color("bold black");

   $colors{"warningFileNameColor"} = color("bold blue");
   $colors{"warningNumberColor"}   = color("blue");
   $colors{"warningMessageColor"}  = color("bold yellow");

   $colors{"errorFileNameColor"} = color("bold blue");
   $colors{"errorNumberColor"}   = color("blue");
   $colors{"errorMessageColor"}  = color("bold red");

   $colors{"noteFileNameColor"} = color("bold blue");
   $colors{"noteNumberColor"}   = color("blue");
   $colors{"noteMessageColor"}  = color("bold black");

   $colors{"infoColor"}  = color("white");

   $colors{"srcColor"} = color("blue");
}

sub loadPreferences
{
	# Usage: loadPreferences("filename");
	my($filename) = @_;
	open(PREFS, "<$filename") || return;
	while(<PREFS>)
	{
		next if (m/^\#.*/);          # It's a comment.
		next if (!m/(.*):\s*(.*)/);  # It's not of the form "foo: bar".
		$option = $1;
		$value = $2;
		if($option =~ m/(.*)(cc|c\+\+|gcc|g\+\+|g77|gobjc|gnat|gcj|gpc)(.*)/)
		{
			$compilerPaths{$option} = $value;
		}
		elsif($option eq "nocolor")
		{
			# The nocolor option lists terminal types, separated by
			# spaces, not to do color on.
			foreach $termtype (split(/\s+/, $value))
			{
				$nocolor{$termtype} = "true";
			}
		}
		else
		{
			$colors{$option} = color($value);
		}
	}
	close(PREFS);
}

sub srcscan
{
	# Looks for text between ` and ', and colors it srcColor.
	# Usage: srcscan($text, $normalColor)
	#    $text -- the text to colorize
	#    $normalColor -- The escape sequence to use for non-source text.

	my($line, $normalColor) = @_;
	my($srcon) = color("reset") . $colors{"srcColor"};
	my($srcoff) = color("reset") . $normalColor;
	$line = $normalColor . $line;
	# This substitute replaces `foo' with `AfooB' where A is the escape
	# sequence that turns on the the desired source color, and B is the
	# escape sequence that returns to $normalColor.
	$line =~ s/\`(.*?)\'/\`$srcon$1$srcoff\'/g;
	$line =~ s/\'(.*?)\'/\'$srcon$1$srcoff\'/g;
	$line =~ s/\"(.*?)\"/\"$srcon$1$srcoff\"/g;
	print($line, color("reset"));
}

#
# Main program
#

# Set up default values for colors and compilers.
initDefaults();

# Read the configuration file, if there is one.
$configFile = $ENV{"HOME"} . "/.colorgccrc";
if(-f $configFile)
{
	loadPreferences($configFile);
}
elsif(-f '/etc/colorgcc/colorgccrc')
{
	loadPreferences('/etc/colorgcc/colorgccrc');
}

# Figure out which compiler to invoke based on our program name.
$0 =~ m%.*/(.*)$%;
# <bohan>
$progName = $ENV{"PACKAGENERIC__GCC"} || $1 || $0;

# See if the user asked for a specific compiler.
if($progName eq "colorgcc")
{
	$compiler = "/usr/bin/gcc";
}
elsif(!defined($compiler = $compilerPaths{$progName}))
{
	# Find our wrapper dir on the PATH and tweak the PATH to remove
	# everything up-to and including our wrapper dir.
	if($0 =~ m#(.*)/#)
	{
		# We were called with an explicit path, so trim that off the PATH.
		my $find = $1;
		$find = abs_path($1) unless $find =~ m#^/#;
		$ENV{'PATH'} =~ s#.*(^|:)\Q$find\E(:|$)##;
	}
	else
	{
		my(@dirs) = split(/:/, $ENV{'PATH'});
		while (defined($_ = shift @dirs))
		{
			if (-x "$_/$progName")
			{
				$ENV{'PATH'} = join(':', @dirs);
				last;
			}
		}
	}
	$compiler = $progName;
}

# Raphael Bossek <bossekr@debian.org> Bug #48451
#   We check if the user created a link from the selected compiler
#   to colorgcc e.g. /usr/bin/gcc -> /usr/bin/colorgcc !
if(-l $compiler and (stat $compiler)[1] == (stat $0)[1])
{
	print "colorgcc: Error; $compiler is a symlink to colorgcc. Aborting.\n";
	exit(1);
}

# Get the terminal type. 
$terminal = $ENV{"TERM"} || "dumb";

# If it's in the list of terminal types not to color, or if
# we're writing to something that's not a tty, don't do color.
# <bohan>
if(!($terminal eq "packageneric--color-pipe") && (! -t STDOUT || $nocolor{$terminal}))
{
	print "no colorization\n";
	exec $compiler, @ARGV
	or die("Couldn't exec");
}

# <bohan>
#print "$compiler @ARGV\n";
#print "$compiler\n";

# <bohan>
# Disable any locale, so that we are ensured to parse the english messages.
$ENV{"LC_ALL"} = 'C';

# Keep the pid of the compiler process so we can get its return
# code and use that as our return code.
$compiler_pid = open3('<&STDIN', \*GCCOUT, \*GCCOUT, $compiler, @ARGV);

# Colorize the output from the compiler.
while(<GCCOUT>)
{
	#print(color("reset"), $_);
	if(m#^((In file included|                ) from) (.+?[^:/ ]+):(.*)$#) # In file included from filename:line:
	{
		$field1 = " " . $1 || ""; # <-- bug here, field1's mem adress first byte gets overwritten by the ':' char, fuck perl.
		$field_ = $2 || "";
		$field2 = $3 || "";
		$field3 = $4 || "";
		if($field1 =~ m#^ In file included from$#)
		{
			print("______________________\n");
		}
		print("$field1 ", color("reset"));
		print($colors{"introFileNameColor"}, "$field2:", color("reset"));
		print($colors{"introNumberColor"}, "$field3", color("reset"));
		print("\n");
	}
	elsif(m#^(.+?\.?[^:/ ]+):([0-9]+):([0-9]+):(.*)$#) # filename:line:col:message
	{
		$field1 = $1 || "";
		$field2 = $2 || "";
		$field3 = $3 || "";
		$field4 = $4 || "";
		if($field4 =~ s/\s+[Ww]arning:(.*)/$1/)
		{
			# warning
			print($colors{"introFileNameColor"}, "$field1:", color("reset"));
				# bohan, is that a joke? it should be warningFileNameColor, but then it doesn't work, fuck perl.
			print($colors{"warningNumberColor"}, "$field2:$field3:", color("reset"));
			print($colors{"warningMessageColor"}, " warning:", color("reset"));
			srcscan($field4, $colors{"noteMessageColor"});
		}
		elsif($field4 =~ s/\s+[Ee]rror:(.*)/$1/)
		{
			# error
			print($colors{"introFileNameColor"}, "$field1:", color("reset"));
				# bohan, is that a joke? it should be errorFileNameColor, but then it doesn't work, fuck perl.
			print($colors{"errorNumberColor"}, "$field2:$field3", color("reset"));
			print($colors{"errorMessageColor"}, " error:", color("reset"));
			srcscan($field4, $colors{"noteMessageColor"});
		}
		elsif($field4 =~ s/\s+#error (.*)/$1/)
		{
			# #error
			print($colors{"introFileNameColor"}, "$field1:", color("reset"));
				# bohan, is that a joke? it should be errorFileNameColor, but then it doesn't work, fuck perl.
			print($colors{"errorNumberColor"}, "$field2:$field3:", color("reset"));
			print($colors{"errorMessageColor"}, " #error ", color("reset"));
			srcscan($field4, $colors{"noteMessageColor"});
		}
		elsif($field4 =~ s/\s+[Nn]ote:(.*)/$1/)
		{
			# note
			print($colors{"introFileNameColor"}, "$field1:", color("reset"));
				# bohan, is that a joke? it should be noteFileNameColor, but then it doesn't work, fuck perl.
			print($colors{"noteNumberColor"}, "$field2:$field3", color("reset"));
			print($colors{"noteMessageColor"}, " note:", color("reset"));
			srcscan($field4, $colors{"noteMessageColor"});
		}
		elsif($field4 =~ s/\s+missing binary operator before token (.*)/$1/)
		{
			# note
			print($colors{"introFileNameColor"}, "$field1:", color("reset"));
				# bohan, is that a joke? it should be errorFileNameColor, but then it doesn't work, fuck perl.
			print($colors{"errorNumberColor"}, "$field2:$field3", color("reset"));
			print($colors{"errorMessageColor"}, " missing binary operator before token ", color("reset"));
			srcscan($field4, $colors{"noteMessageColor"});
		}
		else
		{
			# ?
			print($colors{"introFileNameColor"}, "$field1:", color("reset"));
				# bohan, is that a joke? it should be noteFileNameColor, but then it doesn't work, fuck perl.
			print($colors{"noteNumberColor"}, "$field2:$field3:", color("reset"));
			srcscan($field4, $colors{"noteMessageColor"});
		}
		print("\n");
	}
	elsif(m#^(.+?\.?[^:/ ]+):([0-9]+)[:,](.*)$#) # filename:line:message
	{
		$field1 = $1 || "";
		$field2 = $2 || "";
		$field3 = $3 || "";
		if($field3 =~ s/\s+[Ww]arning:(.*)/$1/)
		{
			# warning
			print($colors{"introFileNameColor"}, "$field1:", color("reset"));
				# bohan, is that a joke? it should be warningFileNameColor, but then it doesn't work, fuck perl.
			print($colors{"warningNumberColor"}, "$field2:", color("reset"));
			print($colors{"warningMessageColor"}, " warning:", color("reset"));
			srcscan($field3, $colors{"noteMessageColor"});
		}
		elsif($field3 =~ s/\s+[Ee]rror:(.*)/$1/)
		{
			# error
			print($colors{"introFileNameColor"}, "$field1:", color("reset"));
				# bohan, is that a joke? it should be errorFileNameColor, but then it doesn't work, fuck perl.
			print($colors{"errorNumberColor"}, "$field2:", color("reset"));
			print($colors{"errorMessageColor"}, " error:", color("reset"));
			srcscan($field3, $colors{"noteMessageColor"});
		}
		elsif($field3 =~ s/\s+[Nn]ote:(.*)/$1/)
		{
			# note
			print($colors{"introFileNameColor"}, "$field1:", color("reset"));
				# bohan, is that a joke? it should be noteFileNameColor, but then it doesn't work, fuck perl.
			print($colors{"noteNumberColor"}, "$field2:", color("reset"));
			print($colors{"noteMessageColor"}, " note:", color("reset"));
			srcscan($field3, $colors{"noteMessageColor"});
		}
		else
		{
			# ?
			print($colors{"introFileNameColor"}, "$field1:", color("reset"));
				# bohan, is that a joke? it should be noteFileNameColor, but then it doesn't work, fuck perl.
			print($colors{"noteNumberColor"}, "$field2:", color("reset"));
			srcscan($field3, $colors{"noteMessageColor"});
		}
		print("\n");
	}
	elsif(m#^(.+?\.[^:/ ]+):([^ [:]+):([^ []+\+0x.*): undefined reference to (.*)$#) # objectfilename:sourcefilename:(section+offset): undefined reference to 'symbol'
	{
		$field1 = $1 || "";
		$field2 = $2 || "";
		$field3 = $3 || "";
		$field4 = $4 || "";
		print($colors{"introFileNameColor"}, "$field1:", color("reset"));
				# bohan, is that a joke? it should be errorFileNameColor, but then it doesn't work, fuck perl.
		print($colors{"noteMessageColor"}, "$field2:", color("reset"));
		print($colors{"infoColor"}, "$field3:", color("reset"));
		print($colors{"errorMessageColor"}, " undefined reference to ", color("reset"));
		srcscan($field4, $colors{"introMessageColor"});
		print("\n");
	}
	elsif(m#^(.+?\.[^:/ ]+):([^ []+\+0x.*): undefined reference to (.*)$#) # sourcefilename:(section+offset): undefined reference to 'symbol'
	{
		$field1 = $1 || "";
		$field2 = $2 || "";
		$field3 = $3 || "";
		print($colors{"introFileNameColor"}, "$field1:", color("reset"));
				# bohan, is that a joke? it should be errorFileNameColor, but then it doesn't work, fuck perl.
		print($colors{"infoColor"}, "$field2:", color("reset"));
		print($colors{"errorMessageColor"}, " undefined reference to ", color("reset"));
		srcscan($field3, $colors{"introMessageColor"});
		print("\n");
	}
	elsif(m#^(.+?\.[^:/ ]+):([^[:]+)([^ ]+)(\+0.*): undefined reference to (.*)$#) # sourcefilename:(section[symbol]+offset): undefined reference to 'symbol'
	{
		$field1 = $1 || "";
		$field2 = $2 || "";
		$field3 = $3 || "";
		$field4 = $4 || "";
		$field5 = $5 || "";
		print($colors{"introFileNameColor"}, "$field1:", color("reset"));
				# bohan, is that a joke? it should be errorFileNameColor, but then it doesn't work, fuck perl.
		print($colors{"infoColor"}, "$field2:", color("reset"));
		srcscan($field3, $colors{"introMessageColor"});
		print($colors{"infoColor"}, "$field4:", color("reset"));
		print($colors{"errorMessageColor"}, " undefined reference to ", color("reset"));
		srcscan($field5, $colors{"introMessageColor"});
		print("\n");
	}
	elsif(m#^(.+?\.[^:/ ]+):([^:[]+):([^ ]+): more undefined references to (.*) follow$#) # objectfilename:sourcefilename:(section+offset): more undefined references to 'symbol' follow
	{
		$field1 = $1 || "";
		$field2 = $2 || "";
		$field3 = $3 || "";
		$field4 = $4 || "";
		print($colors{"introFileNameColor"}, "$field1:", color("reset"));
				# bohan, is that a joke? it should be errorFileNameColor, but then it doesn't work, fuck perl.
		print($colors{"noteMessageColor"}, "$field2:", color("reset"));
		print($colors{"infoColor"}, "$field3:", color("reset"));
		print($colors{"errorMessageColor"}, " more undefined reference to ", color("reset"));
		srcscan($field4, $colors{"introMessageColor"});
		print($colors{"noteMessageColor"}, " follow", color("reset"));
		print("\n");
	}
	elsif(m#^(.+?\.[^:/ ]+):(.*)$#) # filename:message
	{
		$field1 = $1 || "";
		$field2 = $2 || "";
		print("_____\n");
		print($colors{"introFileNameColor"}, "$field1:", color("reset"));
		srcscan($field2, $colors{"introMessageColor"});
		print("\n");
	}
	elsif(m#^({standard input}):(.*)$#) # {standard input}:message
	{
		$field1 = $1 || "";
		$field2 = $2 || "";
		print("_____\n");
		print($colors{"introFileNameColor"}, "$field1:", color("reset"));
		srcscan($field2, $colors{"introMessageColor"});
		print("\n");
	}
	elsif(m#^Info: resolving (.*)$#)
	{
		print($colors{"infoColor"}, $_);
	}
	elsif(m#^([^.: ]+?):(.*)$#) # xxx/xxx/xxx:message
	{
		$field1 = $1 || "";
		$field2 = $2 || "";
		if($field2 =~ s/\s+[Ww]arning:(.*)/$1/)
		{
			# warning
			print($colors{"introFileNameColor"}, "$field1:", color("reset"));
				# bohan, is that a joke? it should be warningFileNameColor, but then it doesn't work, fuck perl.
			print($colors{"warningMessageColor"}, " warning:", color("reset"));
			srcscan($field2, $colors{"noteMessageColor"});
		}
		elsif($field2 =~ s/\s+[Ee]rror:(.*)/$1/)
		{
			# error
			print($colors{"introFileNameColor"}, "$field1:", color("reset"));
				# bohan, is that a joke? it should be errorFileNameColor, but then it doesn't work, fuck perl.
			print($colors{"errorMessageColor"}, " error:", color("reset"));
			srcscan($field2, $colors{"noteMessageColor"});
		}
		elsif($field2 =~ s/\s+[Nn]ote:(.*)/$1/)
		{
			# note
			print($colors{"introFileNameColor"}, "$field1:", color("reset"));
				# bohan, is that a joke? it should be noteFileNameColor, but then it doesn't work, fuck perl.
			print($colors{"noteMessageColor"}, " note:", color("reset"));
			srcscan($field2, $colors{"noteMessageColor"});
		}
		elsif($field2 =~ s/\s+[Dd]isabling relaxation:(.*)/$1/)
		{
			# error
			print($colors{"introFileNameColor"}, "$field1:", color("reset"));
				# bohan, is that a joke? it should be errorFileNameColor, but then it doesn't work, fuck perl.
			print($colors{"errorMessageColor"}, " disabling relaxation:", color("reset"));
			srcscan($field2, $colors{"noteMessageColor"});
		}
		elsif($field2 =~ s/\s+[Cc]annot find (.*)/$1/)
		{
			# error
			print($colors{"introFileNameColor"}, "$field1:", color("reset"));
				# bohan, is that a joke? it should be errorFileNameColor, but then it doesn't work, fuck perl.
			print($colors{"errorMessageColor"}, " cannot find ", color("reset"));
			srcscan($field2, $colors{"noteMessageColor"});
		}
		elsif($field2 =~ s/\s+(.*)exit status(.*)/$1/)
		{
			$field3 = $2 || "";
			# error
			print($colors{"introFileNameColor"}, "$field1:", color("reset"));
				# bohan, is that a joke? it should be errorFileNameColor, but then it doesn't work, fuck perl.
			print($colors{"errorMessageColor"}, " $field2", "exit status", "$field3", color("reset"));
		}
		else
		{
			# ?
			print($colors{"introFileNameColor"}, "$field1:", color("reset"));
				# bohan, is that a joke? it should be noteFileNameColor, but then it doesn't work, fuck perl.
			srcscan($field2, $colors{"noteMessageColor"});
		}
		print("\n");
	}
	else # Anything else.        
	{
		# Doesn't seem to be a warning or an error. Print normally.
		print(color("reset"), $_);
	}
}

# Get the return code of the compiler and exit with that.
waitpid($compiler_pid, 0);
exit ($? >> 8);
