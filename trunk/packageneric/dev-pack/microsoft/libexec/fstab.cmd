@echo off

rem ###########################################################################
rem #
rem # This source is free software ; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation ; either version 2, or (at your option) any later version.
rem # Copyright (C) 2004-2005 Psycledelics http://psycle.pastnotecut.org : Johan Boule
rem #
rem # Sets msys' /etc/fstab
rem #
rem ###########################################################################

pushd %~dp0.. || goto :failed

rem (
	set junction=%~d0\dev-pack-%PACKAGENERIC__DEV_PACK__VERSION%
	echo %~n0: Setting up NTFS junction %junction% symbolic link to "%CD%" ... || goto :failed
	rem   The dev-pack is able to run from any path, without the need to have a known base dir,
	rem   but some apps on windows have a low limit on path lengths (around 260 or even a little lower).
	rem   Using a junction with a short path as the base dir, we gain some more room for path lengths.
	rem   Also, this fixes the problem of paths containing space characters (but the problem of user name and home dir with spaces remains).
	if exist %junction% (
		junction -d %junction% 1>nul
		rem This is safe, it won't delete a non-empty dir which isn't a junction.
	)
	junction %junction% "%CD%" 1>nul
rem )

pushd %junction% || goto :failed

rem sets the paths again, this time with the junction ; this is optional.
call libexec\paths || goto :failed

echo. > opt\msys\etc\fstab || goto :pass
echo %~n0: Setting up home dirs mount point in opt/msys/etc/fstab ... || goto :failed
rem (
	echo # autogenerated ; edit the fstab.template file instead > opt\msys\etc\fstab || goto :failed
	echo. >> opt\msys\etc\fstab || goto :failed
	echo # automatic copy of fstab.template > opt\msys\etc\fstab || goto :failed
	echo. >> opt\msys\etc\fstab || goto :failed
	type opt\msys\etc\fstab.template >> opt\msys\etc\fstab || goto :failed
	echo. >> opt\msys\etc\fstab || goto :failed
	echo # end of fstab.template >> opt\msys\etc\fstab || goto :failed
	echo. >> opt\msys\etc\fstab || goto :failed
	echo # home dirs mount point automatically appended with the value of $(dirname $USERPROFILE) >> opt\msys\etc\fstab || goto :failed
	pushd "%USERPROFILE%" || goto :failed
	cd .. || goto :failed
	for %%x in ("%CD%") do set x=%%~sx|| goto :failed
	popd || goto :failed
	echo %x% /home >> opt\msys\etc\fstab || goto :failed
	set x=
	echo %CD% /dev-pack >> opt\msys\etc\fstab || goto :failed
	echo %CD%\opt /opt >> opt\msys\etc\fstab || goto :failed
	echo %CD%\working-dir /home/%USERNAME%/working-dir >> opt\msys\etc\fstab || goto :failed
rem )
:pass

echo %~n0: Checking that the username and the path have no space characters ... || goto :failed
rem (
	sh -c true || goto :failed
	echo %~n0: Checking "%USERNAME%" ... || goto :failed
	sh -c "echo $USERNAME | grep --silent --invert-match ' '" || (
		echo %~n0: Your user name contains one or more space characters: %USERNAME%
		echo %~n0: Please rename your user account or use another account with no space in its name.
		goto :failed
	)
	echo %~n0: Checking "%CD%" ... || goto :failed
	sh -c "cmd /c cd | grep --silent --invert-match ' '" || (
		echo %~n0: Your path contains one or more space characters: %CD%
		echo %~n0: Please move or mount the dev-pack to a path with no space.
		goto :failed
	)
	echo %~n0: 0k. no space characters. || goto :failed
rem )

rem pop from junction dir
popd || goto :failed

popd || goto :failed
goto :eof

rem ------
rem failed
rem ------
:failed
	set return_code=%ErrorLevel%
	echo %~n0: Failed with return code: %return_code%
	pause
	set failed=true
	if "%return_code%" == "0" (
		exit /b 1
	) else (
		exit /b %return_code%
	)
