microsoft:
	
*	for vcproj, use InheritedPropertySheets pointing to vcprops files.
	-- bohan

*	microsoft needs to #include <packageneric/package/meta-information.private.hpp> which is not distributed.
	since it's generated by configure from packageneric/generic/detail/src/packageneric/package/meta-information.private.hpp.in
	Since this file doesn't contain any platform nor build -specific definitions, it could be created by autogenerate.
	-- bohan

config headers:
	
*	to allow for static libraries to be built,
	split packageneric/package/modules/*/defines.private.hpp
	into two separate files: meta-informations.private.hpp and sources.private.hpp.
	then source.private.hpp can be included by client sources,
	while still having their own meta-informations.private.hpp.
	Possibly sources.private.hpp could be installed like gtk packages do, in $(libdir)/include
	(new automake var pkglibincludedir = $(pkglib)/include, and use of stanza nobase_pkglibinclude_HEADERS)
	Note that .pc files have Requires.private for static libs, but,
	making the additional -I cflag only active for static build would then require an additional .pc file,
	which would never be invoked directly. Anyway the file has a .private.hpp extension which already denote
	it's not part of the public interface, and it doesn't contain any functions or objects.
	-- bohan

*	split packageneric/generic/detail/src/packageneric/packages/configurations/**/configuration.private.hpp(.in)
	into two separate files: host.private.hpp(.in) and install.private.hpp(.in)
	This is not really needed as it doesn't bring any more modularity.
	-- bohan
	
*	configure should set PACKAGENERIC__COMPILER__*flags instead of *FLAGS directly.
	addition is already done in packageneric/generic/detail/libexec/autogenerate/@0/package/modules.
	need to edit packageneric/generic/detail/autotools/autoconf/gnu-compiler-and-linker-flags.ac
	-- bohan

wrappers:

*	readd the packageneric/generic/detail/libexec/colorizers to the PATH env var.
	-- bohan
	
*	change bin/colorgcc to reflect gcc 4.0 that has changed the `x' notation to 'x'.
	-- bohan

pkg-config:	

*	packageneric/generic/detail/libexec/build
	PKG_CONFIG_PATH contains the configure --prefix=xxx/lib always as a unix path.
	moreover configure can be passed a --libdir different than --prefix=xxx/lib.
	Also, it has to be defined in the configure script,
	because invoking the make command directly may retrigger the configure script.
	-- bohan

*	Honor pkg-config 0.18 Requires.private
	m4 macro PACKAGENERIC__MODULE__INTERNAL should have
	parameters:
		$1: type of module: either hpp, lib, or bin.
		$2: name of the module being declared
		$4: interface version minimum supported
		$3: interface version maximum supported
		$5: implementation version
		$9: private compiler flags
		$8: public compiler flags
		$11: private linker flags
		$10: public linker flags
		$13: list of required private module names, i.e. indirect dependency
		$12: list of required public module names, i.e. direct dependency
		$14: description
	Defines:
		found
		how internal
		type
		interface__min
		interface__max
		implementation
		cflags__private__no_self
		cflags__private cflags__private__no_self
		cflags__public__no_self
		cflags__public cflags__public__no_self
		ldflags__private__no_self
		ldflags__private ldflags__private__no_self
		lfflags__public__no_self
		ldflags__public ldflags__no_self
		requires__public
		requires__private
		graph__dependencies ldflags__no_self's -l requires__public
		for every how=external,when=lazy, emit a lazy pkg-config call to the -uninstalled.pc file
	-- bohan
	
*	m4 macro PACKAGENERIC__MODULE__EXTERNAL should allow to just test wether the package is available or not.
	instead of adding a parameter action-if-not-found,
	make two different macros, one ...__REQUIRED and one ...__OPTIONAL.
	The ...__REQUIRED one will stop the configure script with an error.
	The ...__OPTIONAL one will set a var that can be tested with: "if packageneric__module__found name"
	Define:
		found
		how external
		when lazy (for modules in nested packages) or done (for installed)
	-- bohan
	
*	m4 macro PACKAGENERIC__MODULE__GROUP to allow grouping several modules into a "package".
	parameters:
		$1: name of the "package" module being declared
		$2: list of private module names already declared
		$2: list of public module names already declared
	The macro should check that each module is found via: "if packageneric__module__found name".
	Defines:
		found
		how group
		private__lazy
		private__expanded expand/recurse and eliminate duplicates
		public__lazy
		public__expanded expand/recurse and eliminate duplicates
	-- bohan
	
*	Collect all the dependencies graphviz digraph dot files of nested source packages into the parent one.
	Nested packages are configured after their parent one, so, to do this, write the body to a separate file.
	Check whether it's possible to perform some actions at the end of configure, after subpackages are configured.
	Otherwize concatenation will have to be done during make.
	-- bohan

misc:

*	change naming convention for links from @* to @@* ; @* stays a cut rule.
	-- bohan

*	remove cairo archive from pbuilder, and maybe an option to add more sources via the command line.
	Cairo made into debian testing since gtk-2.8. So this is only for stable sarge now.
	-- bohan

*	determine type of terminal to make the echo function output
	font-change escape sequences correctly in all cases.
	It should disable escapes by default when outputting to a file unless told to use escape explicitly.
	Also, some terminals have annoying blinking instead of bold.

*	remember to update the TODO file.
	-- bohan



======== done ========



*	macosx's /usr/bin/which command is silly. use builtin 'type' instead.
	this is already changed in most, if not all places.
	-- bohan
	
*	have some time to explore libtool's funny --mode=execute gdb bin.wrapper.
	Wasn't actually so fun.
	--bohan
