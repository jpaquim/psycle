#! /bin/sh

##############################################################################
#
# This source is free software ; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation ; either version 2, or (at your option) any later version.
# Copyright (C) 1999-2005 Psycledelics http://psycle.pastnotecut.org : Johan Boule
#
# Ensures we use a cache and a separate build directory.
# (sourced after AC_INIT in configure.ac)
#
# \meta generic
# \meta standard posix
#
##############################################################################



###############################################################################################
# exports environment variables for configuration of packages dirs passed to AC_CONFIG_SUBDIRS
{
	export \
		LC_ALL=C \
		CXX=$(echo $CXX) \
		CCACHE_DIR=$(echo ${CCACHE_DIR:-${PACKAGENERIC__OUTPUT:-$(pwd)/++packageneric}/ccache}) \
		CPPFLAGS=$(echo $CPPFLAGS) \
		CFLAGS=$(echo $CFLAGS) \
		CXXFLAGS=$(echo $CXXFLAGS) \
		LDFLAGS=$(echo $LDFLAGS)
} &&

packageneric__main()
{
	local cache build absolute_name &&
	
	########################
	# ensure we use a cache
	{
		cache=false &&
		for option in "$@"
		do
			case $option in
				--config-cache | --cache-file) cache=true ;;
			esac ||
			return
		done &&
		if ! $cache
		then
			packageneric__echoing "note: no cache option given ; recalling myself with added option --config-cache" sh $0 --config-cache "$@"
			exit
		fi
	} &&

	###########################################
	# ensure we use a separate build directory
	{	
		if test $0 = ./$(basename $0) -o $0 = $(basename $0)
		then
			absolute_name=$(cd $(dirname $0) && pwd)/$(basename $0) &&
			packageneric__echo &&
			packageneric__echo "note: Canceling because you called $(basename $0) from its own directory ($0)." &&
			rm --verbose --force config{.{log,cache},ure.lineno} &&
			packageneric__echo &&
			packageneric__tip &&
			packageneric__echo &&
			# Do the proper change of directory automatically:
			build=$(dirname $absolute_name)/++packageneric/build &&
			packageneric__echoing "note: Configuring the build in a separate directory... $build" mkdir -p $build &&
			packageneric__echoing 'note: Changing current directory to build directory' cd $build &&
			packageneric__echo &&
			packageneric__echoing "note: Recalling myself" $absolute_name "$@" &&
			packageneric__echo &&
			packageneric__echo "note: You called $(basename $0) from its own directory ($0)." &&
			packageneric__tip &&
			packageneric__echo &&
			packageneric__echo 'note: The configured directory has been automatically changed to' &&
			packageneric__echo "note: \t $build" &&
			packageneric__echo "note: because you called $(basename $0) from its own directory ($0), which would have been a bad thing." &&
			packageneric__echo 'note: (See remarks above).' &&
			packageneric__echo 'note: cd to that directory before calling make.'
			exit
		fi
	} &&

	##########
	# caption
	{	
		packageneric__echo &&
		packageneric__echo '===========================================================' &&
		packageneric__echo "packageneric $($(dirname $0)/packageneric/generic/bin/version) $(basename $0) script" &&
		packageneric__echo "source package: $($(dirname $0)/packageneric/generic/bin/package.meta-information name) $($(dirname $0)/packageneric/generic/bin/package.meta-information version) $($(dirname $0)/packageneric/generic/bin/package.meta-information archive)" &&
		packageneric__echo '===========================================================' &&
		packageneric__echo &&
		packageneric__echo "environment: CXX=$CXX" &&
		packageneric__echo "environment: CCACHE_DIR=$CCACHE_DIR" &&
		packageneric__echo "environment: CPPFLAGS=$CPPFLAGS" &&
		packageneric__echo "environment: CXXFLAGS=$CXXFLAGS" &&
		packageneric__echo "environment: LDFLAGS=$LDFLAGS" &&
		for option in "$@"
		do
			case $option in
				--*) packageneric__echo "command line argument: $option" ;;
				*=*) packageneric__echo "environment: $option" ;;
			esac ||
			return
		done &&
		packageneric__echoing ''
	}
} &&

packageneric__tip()
{
		packageneric__echo "note: tip: It is unnecessary, and often undesirable, to run configure from within the source tree." &&
		packageneric__echo "note: tip: The make files generated by this configure script" &&
		packageneric__echo "note: tip: are able to build packages whose source files reside in another tree." &&
		packageneric__echo "note: tip: The advantages of building derived files in a separate tree to the source code are fairly obvious:" &&
		packageneric__echo "note: tip: the derived files, such as object files, would clutter the source tree" &&
		packageneric__echo "note: tip: This would also make it impossible to build those same object files on a different system" &&
		packageneric__echo "note: tip: or with a different configuration." &&
		packageneric__echo "note: tip: It is recommended to use 3 trees: a source tree, a build tree and an install tree:" &&
		packageneric__echo "note: tip: \t mkdir /tmp/build/ && cd /tmp/build/ && $(dirname $absolute_name)/configure --prefix=/tmp/install && make install" &&
		packageneric__echo "note: tip: The above commands will keep your $(dirname $absolute_name)/ source package directory clean," &&
		packageneric__echo "note: tip: and will install any executable in /tmp/install/bin/ and any shared library in /tmp/install/lib/" &&
		#packageneric__echo "note: tip: To run the executables, in your environement, define the variable export LD_LIBRARY_PATH=/tmp/install/lib/" &&
		#packageneric__echo "note: tip: To let the library loader know where to find these shared libraries." &&
		:
} &&

packageneric__echo__no_new_line__inline()
{
	echo -en '\e[1;38m' &&
	echo -en "$@" &&
	echo -en '\e[0m'
} &&

packageneric__echo__no_new_line()
{
	local script_path &&
	script_path=packageneric.autotools.autoconf.configure &&
	packageneric__echo__no_new_line__inline "$script_path: $@"
} &&

packageneric__echo()
{
	packageneric__echo__no_new_line "$@" &&
	echo
} &&

packageneric__echoing()
{
	local comment &&
	comment=$1 && shift &&
	packageneric__echo $comment &&
	if test $# != 0
	then
		packageneric__echo "-> calling: $@" &&
		"$@"
	fi
}
