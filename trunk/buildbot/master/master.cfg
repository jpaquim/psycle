BuildmasterConfig = {}

BuildmasterConfig['projectName'] = 'psycle'
BuildmasterConfig['projectURL'] = 'http://psycle.sourceforge.net'
BuildmasterConfig['buildbotURL'] = 'http://anechoid.retropaganda.info:8010/'

psycle_svn = 'https://psycle.svn.sourceforge.net/svnroot/psycle/trunk'
poll_interval = 5 * 60
bunch_timer = poll_interval + 60

BuildmasterConfig['sources'] = []

from buildbot.changes.pb import PBChangeSource
BuildmasterConfig['sources'].append(PBChangeSource())

from buildbot.changes.svnpoller import SVNPoller
BuildmasterConfig['sources'].append(SVNPoller(svnurl = psycle_svn, pollinterval = poll_interval))

BuildmasterConfig['bots'] = [
	('anechoid', 'password'),
	('factoid', 'password')
]

slaves = ['anechoid', 'factoid']

BuildmasterConfig['builders'] = []
BuildmasterConfig['schedulers'] = []

from buildbot.scheduler import Scheduler as BaseScheduler
class Scheduler(BaseScheduler):
	def addUnimportantChange(self, change):
		from twisted.python import log
		log.msg("%s: change is not important, forgetting %s" % (self, change))

def filter(change, prefixes):
	for file in change.files:
		for prefix in prefixes:
			if file.startswith(prefix): return True
	return False

from buildbot import locks
cpu_lock = locks.SlaveLock('cpu')

from buildbot.process import factory, step

BuildmasterConfig['builders'].append(
	{
		'name': 'freepsycle',
		'slavenames': slaves,
		'builddir': 'freepsycle',
		'factory': factory.BuildFactory(
			[
				factory.s(step.SVN, mode = 'update', svnurl = psycle_svn),
				factory.s(step.Compile, command = 'scons --directory=freepsycle')
			]
		)
	}
)
BuildmasterConfig['schedulers'].append(
	Scheduler(
		name = 'freepsycle',
		branch = None,
		treeStableTimer = bunch_timer,
		builderNames = ['freepsycle'],
		fileIsImportant = lambda change: filter(change, ['freepsycle/', 'universalis/', 'diversalis/', 'packageneric/'])
	)
)

BuildmasterConfig['builders'].append(
	{
		'name': 'psycle-core',
		'slavenames': slaves,
		'builddir': 'psycle-core',
		'factory': factory.BuildFactory(
			[
				factory.s(step.SVN, mode = 'update', svnurl = psycle_svn),
				factory.s(step.Compile, command = 'cd psycle-core && qmake && make')
			]
		)
	}
)
BuildmasterConfig['schedulers'].append(
	Scheduler(
		name = 'psycle-core',
		branch = None,
		treeStableTimer = bunch_timer,
		builderNames = ['psycle-core'],
		fileIsImportant = lambda change: filter(change, ['psycle-core/', 'psycle-audiodrivers/'])
	)
)

BuildmasterConfig['builders'].append(
	{
		'name': 'psycle-player',
		'slavenames': slaves,
		'builddir': 'psycle-player',
		'factory': factory.BuildFactory(
			[
				factory.s(step.SVN, mode = 'update', svnurl = psycle_svn),
				factory.s(step.Compile, command = 'cd psycle-player && qmake && make')
			]
		)
	}
)
BuildmasterConfig['schedulers'].append(
	Scheduler(
		name = 'psycle-player',
		branch = None,
		treeStableTimer = bunch_timer,
		builderNames = ['psycle-player'],
		fileIsImportant = lambda change: filter(change, ['psycle-player/', 'psycle-core/', 'psycle-audiodrivers/'])
	)
)

BuildmasterConfig['builders'].append(
	{
		'name': 'qpsycle',
		'slavenames': slaves,
		'builddir': 'qpsycle',
		'factory': factory.BuildFactory(
			[
				factory.s(step.SVN, mode = 'update', svnurl = psycle_svn),
				factory.s(step.Compile, command = 'cd qpsycle && qmake && make')
			]
		)
	}
)
BuildmasterConfig['schedulers'].append(
	Scheduler(
		name = 'qpsycle',
		branch = None,
		treeStableTimer = bunch_timer,
		builderNames = ['qpsycle'],
		fileIsImportant = lambda change: filter(change, ['qpsycle/', 'psycle-core/', 'psycle-audiodrivers/'])
	)
)

BuildmasterConfig['builders'].append(
	{
		'name': 'psycle-plugins',
		'slavenames': slaves,
		'builddir': 'psycle-plugins',
		'factory': factory.BuildFactory(
			[
				factory.s(step.SVN, mode = 'update', svnurl = psycle_svn),
				factory.s(step.Compile, command = 'scons --directory=psycle-plugins')
			]
		)
	}
)
BuildmasterConfig['schedulers'].append(
	Scheduler(
		name = 'psycle-plugins',
		branch = None,
		treeStableTimer = bunch_timer,
		builderNames = ['psycle-plugins'],
		fileIsImportant = lambda change: filter(change, ['psycle-plugins/'])
	)
)

BuildmasterConfig['slavePortnum'] = 9989

BuildmasterConfig['status'] = []

from buildbot.status.html import Waterfall
BuildmasterConfig['status'].append(Waterfall(http_port = 8010))

from buildbot.status.words import IRC as BaseIRC
class IRC(BaseIRC):
	def setServiceParent(self, parent):
		BaseIRC.setServiceParent(self, parent)
		self._parent_status = parent.getStatus()
		self._parent_status.subscribe(self)
		
	def disownServiceParent(self):
		self._parent_status.unsubscribe(self)
		return BaseIRC.disownServiceParent(self)
	
	def buildFinished(self, builderName, build, results):
		from buildbot.status.builder import FAILURE
		if build.getResults() == FAILURE:
	   		users = build.getResponsibleUsers()
			if users:
				who = None
				for user in users:
					if not who: who = user
					else: who += ', ' + user
				irc = self.f.p
				for channel in irc.channels:
					irc.msg(channel, '%s: Your recent commit(s) might have broken the build of %s!' % (who, builderName))
					buildurl = self._parent_status.getURLForThing(build)
					if buildurl: irc.msg(channel, "Build details are at %s" % buildurl)

BuildmasterConfig['status'].append(IRC(host = 'irc.efnet.net', nick = 'buildborg', channels = ['#psycle']))
BuildmasterConfig['status'].append(IRC(host = 'irc.freenode.net', nick = 'buildborg', channels = ['#psycle']))

BuildmasterConfig['debugPassword'] = 'debugpassword'
