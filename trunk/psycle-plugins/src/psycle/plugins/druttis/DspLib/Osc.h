//////////////////////////////////////////////////////////////////////
//
//				Osc.h
//
//				druttis@darkface.pp.se
//
//////////////////////////////////////////////////////////////////////

#pragma once

#include "Wavetable.h"

//////////////////////////////////////////////////////////////////////
//				Osc class
//////////////////////////////////////////////////////////////////////

class Osc  
{
	//////////////////////////////////////////////////////////////////
	//				Variables
	//////////////////////////////////////////////////////////////////

private:

	Wavetable				_wavetable;
	float								_phase;
	float								_increment;

	//////////////////////////////////////////////////////////////////
	//				Methods
	//////////////////////////////////////////////////////////////////

public:

	//////////////////////////////////////////////////////////////////
	//				Constructor
	//////////////////////////////////////////////////////////////////

	Osc()
	{
		Init();
	}

	//////////////////////////////////////////////////////////////////
	//				Destructor
	//////////////////////////////////////////////////////////////////

	virtual ~Osc()
	{
	}

	//////////////////////////////////////////////////////////////////
	//				Init
	//////////////////////////////////////////////////////////////////

	void Init()
	{
		_wavetable.Init();
		Reset();
	}

	//////////////////////////////////////////////////////////////////
	//				Reset
	//////////////////////////////////////////////////////////////////

	inline void Reset()
	{
		SetPhase(0.0f);
	}

	//////////////////////////////////////////////////////////////////
	//				GetWavetableLength
	//////////////////////////////////////////////////////////////////

	inline int GetWavetableLength()
	{
		return _wavetable.GetLength();
	}

	//////////////////////////////////////////////////////////////////
	//				GetWavetableSamples
	//////////////////////////////////////////////////////////////////

	inline float *GetWavetableSamples()
	{
		return _wavetable.GetSamples();
	}

	//////////////////////////////////////////////////////////////////
	//				SetSamples
	//////////////////////////////////////////////////////////////////

	inline void SetWavetableSamples(float *pSamples, int length)
	{
		_wavetable.SetSamples(pSamples, length);
	}

	//////////////////////////////////////////////////////////////////
	//				GetPhase
	//////////////////////////////////////////////////////////////////

	inline float GetPhase()
	{
		return _phase;
	}

	//////////////////////////////////////////////////////////////////
	//				SetPhase
	//////////////////////////////////////////////////////////////////

	inline float SetPhase(float phase)
	{
		_phase = phase;
	}

	//////////////////////////////////////////////////////////////////
	//				GetIncrement
	//////////////////////////////////////////////////////////////////

	inline float GetIncrement()
	{
		return _increment;
	}

	//////////////////////////////////////////////////////////////////
	//				SetIncrement
	//////////////////////////////////////////////////////////////////

	inline float SetIncrement(float increment)
	{
		_increment = increment;
	}

	//////////////////////////////////////////////////////////////////
	//				ClipPhase (call this about each 32.rd sample for speed)
	//////////////////////////////////////////////////////////////////

	inline void ClipPhase()
	{
		_phase = _wavetable.ClipPhase(_phase);
	}

	//////////////////////////////////////////////////////////////////
	//				GetSampleN (no interpollation)
	//////////////////////////////////////////////////////////////////

	inline float GetSampleN(float fm)
	{
		float out = _wavetable.GetSample(_phase + fm);
		_phase = _phase + _increment;
		return out;
	}

	//////////////////////////////////////////////////////////////////
	//				GetSampleL (linear interpollation)
	//////////////////////////////////////////////////////////////////

	inline float GetSampleL(float fm)
	{
		float out = _wavetable.GetLinear(_phase + fm);
		_phase = _phase + _increment;
		return out;
	}

};
