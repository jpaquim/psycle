#! /usr/bin/env scons

# This source is free software ; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation ; either version 2, or (at your option) any later version.
# copyright 2006-2007 johan boule <bohan@jabber.org>
# copyright 2006-2007 psycledelics http://psycle.pastnotecut.org

# To be able to import the packageneric package, we add the parent dir of this SConstruct file to the python path:
import sys, os, os.path
sys.path.append(os.path.split(os.getcwd())[0]) # SCons always makes the dir of the SConstruct file the current dir.

# project

from packageneric.generic.scons.project import project
project = project(name = 'universalis')

# authors/maintainers/uploaders

from packageneric.generic.scons.person import person
bohan = person('johan boule', 'bohan.debian.universalis@retropaganda.info')

# source package

from packageneric.generic.scons.source_package import source_package
from packageneric.generic.scons.version import version

source_package = source_package(project,
	name = 'universalis',
	version = version(0, 0),
	description_file = 'README'
)

source_package.add_files(['README', 'NEWS', 'ChangeLog', 'AUTHORS', 'COPYING', 'TODO'])

# external packages

from packageneric.generic.scons.check.external_package import external_package as external_package_check
from packageneric.generic.scons.check.pkg_config import pkg_config as pkg_config_check

import os.path
diversalis = os.path.join('..', 'diversalis', 'SConstruct')
if os.path.exists(diversalis): diversalis = project.subscript(diversalis).local_package()
else:
	diversalis = external_package_check(project, name = 'diversalis',
		url = 'http://psycle.sourceforge.net',
		distribution_packages = {
			'debian and ubuntu': 'lib-diversalis-0-dev (>= 0)',
			'gentoo': '...',
			'fedora': '...',
			'cygwin': '...'
		},
		dependencies = [
			pkg_config_check(project, name = 'diversalis-0 >= 0')
		]
	)

from packageneric.pool.boost import boost
boost = boost(project, 103300, ['signals', 'thread', 'filesystem'])

# modules

from packageneric.generic.scons.module import module

class universalis_module(module):
	def __init__(self):
		module.__init__(self, source_package,
			name = 'universalis-' + str(source_package.version().major()),
			version = source_package.version(),
			description = source_package.description(),
			dependencies = [diversalis, boost]
	)

	def dynamic_dependencies(self):
		quaquaversalis = True

		glibmm = external_package_check(self.project(), name = 'glibmm',
			url = 'http://freedesktops.org',
			distribution_packages = {
				'debian and ubuntu': 'libglibmm-2.4-dev (>= 2.4)',
				'gentoo': '...',
				'fedora': '...',
				'cygwin': 'glib2-devel-2.6.6-2' # mm!
			},
			dependencies = [
				pkg_config_check(self.project(), name = 'glibmm-2.4 >= 2.4 gmodule-2.0 >= 2.0 gthread-2.0 >= 2.0')
			]
		)
		if glibmm.result(): self.add_dependency(glibmm)
		else: quaquaversalis = False
		
		from packageneric.pool.dlfcn import dlfcn
		dlfcn = dlfcn(self.project())
		if dlfcn.result(): self.add_dependency(dlfcn)
		else: quaquaversalis = False
		
		if not quaquaversalis: self.contexes().build().compilers().cxx().defines().add({'UNIVERSALIS__QUAQUAVERSALIS': None})
		
		from packageneric.generic.scons.find import find
		self.add_sources(find(self.project(), 'src', [os.path.join('universalis', '*.cpp')]))
		self.add_headers(find(self.project(), 'src', [os.path.join('universalis', '*.hpp')]))
		self.contexes().source().compilers().cxx().paths().add(['src'])
universalis_module = universalis_module()

# pkg-config packages

from packageneric.generic.scons.pkg_config_package import pkg_config_package
universalis_package = pkg_config_package(project,
	name = 'universalis-' + str(universalis_module.version().major()),
	version = universalis_module.version(),
	description = universalis_module.description(),
	modules = [universalis_module]
)

if False:
	# debian

	from packageneric.generic.scons.debian_package import debian_package

	universalis_runtime = debian_package(project,
		name = 'lib-universalis-' + str(source_package.version().major()),
		section = 'libs',
		description = universalis_package.description(),
		long_description = 'This package contains the runtime library.'
	)
	#universalis_runtime.add_files(universalis_package.binaries())

	class universalis_dev(debian_package):
		def __init__(self):
			debian_package.__init__(self, project,
				name = universalis_runtime.name() + '-dev',
				section = 'libdevel',
				description = universalis_package.description(),
				long_description = 'This package contains the development files.',
			)
		def dynamirc_dependencies(self):
			self.add_depend(universalis_runtime)
			self.add_build_depends(universalis_package.build_depends())
	universalis_dev = universalis_dev()
	#universalis_dev.add_files(universalis_package.headers())
	#universalis_dev.add_files(universalis_package.pkg_config())

	universalis_doc = debian_package(project,
		name = universalis_runtime.name() + '-doc',
		section = 'doc',
		architecture = 'all',
		description = universalis_package.description(),
		long_description = 'This package contains the documentation.'
	)

	from packageneric.generic.scons.debian import debian
	debian = debian(source_package,
		maintainer = bohan,
		binary_packages = [universalis_runtime, universalis_dev, universalis_doc],
	)

project([universalis_package])

Return('universalis_package')
