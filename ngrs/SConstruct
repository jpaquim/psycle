#! /usr/bin/env scons

# This source is free software ; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation ; either version 2, or (at your option) any later version.
# copyright 2006-2007 johan boule <bohan@jabber.org>
# copyright 2006-2007 psycledelics http://psycle.pastnotecut.org

# To be able to import the packageneric package, we add the parent dir of this SConstruct file to the python path:
import sys, os, os.path
sys.path.append(os.path.split(os.getcwd())[0]) # SCons always makes the dir of the SConstruct file the current dir.

# project

from packageneric.generic.scons.project import project
project = project(name = 'ngrs')

# authors/maintainers/uploaders

from packageneric.generic.scons.person import person
prodos = person('Stefan NattKemper', 'natti__@user.sourceforge.net')
bohan = person('Johan Boule', 'bohan.packageneric@retropaganda.info')

# source package

from packageneric.generic.scons.source_package import source_package
from packageneric.generic.scons.version import version
source_package = source_package(project,
	name = 'ngrs',
	version = version(0, 0),
	description_file = 'README'
)

source_package.add_files(['README', 'NEWS', 'ChangeLog', 'AUTHORS', 'COPYING', 'TODO'])

# external packages

from packageneric.generic.scons.check.external_package import external_package as external_package_check
from packageneric.generic.scons.check.pkg_config import pkg_config as pkg_config_check
from packageneric.generic.scons.check.cxx_build import cxx_build as cxx_build_check

from packageneric.pool.stdcxx import stdcxx
stdcxx = stdcxx(project)

from packageneric.pool.dlfcn import dlfcn
dlfcn = dlfcn(project)

from packageneric.pool.pthread import pthread
pthread = pthread(project)

freetype = external_package_check(project, name = 'freetype',
	url = 'http://google.ch ...',
	distribution_packages = {
		'debian': 'libfreetype6-dev (>= 2.1.9)',
		'gentoo': '...',
		'fedora': '...',
		'cygwin': 'libfreetype2-devel (>= 2.1.9)',
		'microsoft': '... (have a look at http://gimp.org)'
	},
	dependencies = [
		pkg_config_check(project, name = 'freetype2 >= 9.7.0') # note: brings the z lib
	]
)

class x(external_package_check):
	def __init__(self):
		external_package_check.__init__(self, project, name = 'x',
			url = 'http://x.org',
			distribution_packages = {
				'debian and ubuntu': 'libx11-dev (>= 0)',
				'gentoo': '...',
				'fedora': '...',
				'cygwin': 'xorg-x11-devel (6.8.2.0)'
			},
			dependencies = []
		)
	def dynamic_dependencies(self):
		# debian has a pkg-config file for it, but it's not sure for other distributions. todo use pkg-config with a build check as fallback
		#pkg_config_check(project, name = 'x11 >= 0')
		class x_build_check(cxx_build_check):
			def __init__(self, fucked_up_path = False):
				if fucked_up_path:
					name = 'x with fucked up path'
					cxx_compiler_paths = ['/usr/X11R6/include']
					library_paths = ['/usr/X11R6/lib']
				else:
					name = 'x'
					cxx_compiler_paths = []
					library_paths = []
				cxx_build_check.__init__(self, project, name = name, libraries = ['X11'], cxx_compiler_paths = cxx_compiler_paths, library_paths = library_paths, source_text = \
					"""\
						#include <X11/Xlib.h>
						void x()
						{
							Display * display(XOpenDisplay(0));
							XCloseDisplay(display);
						}
					"""
				)
		x = x_build_check()
		if not x.result(): x = x_build_check(fucked_up_path = True)
		self.add_dependency(x)
x = x()

xfixes = external_package_check(project, name = 'xfixes',
	url = 'http://x.org',
	distribution_packages = {
		'debian and ubuntu': 'libxfixes-dev (>= 0)',
		'gentoo': '...',
		'fedora': '...',
		'cygwin': 'xorg-x11-devel (6.8.2.0)'
	},
	dependencies = [
		# debian and cygwin have a pkg-config file for it, but it's not sure for other distributions. todo use pkg-config with a build check as fallback
		#pkg_config_check(project, name = 'xfixes >= 3.0.0')
		cxx_build_check(project, name = 'xfixes', dependencies = [x], libraries = ['Xfixes'], source_text = \
			"""\
				#include <X11/Xlib.h>
				#include <X11/extensions/Xfixes.h>
				void xfixes()
				{
					// todo do something with it for a complete check
				}
			"""
		)
	]
)

xpm = external_package_check(project, name = 'xpm',
	url = 'http://x.org',
	distribution_packages = {
		'debian and ubuntu': 'libxpm-dev (>= 0)',
		'gentoo': '...',
		'fedora': '...',
		'cygwin': 'xorg-x11-devel (6.8.2.0)'
	},
	dependencies = [
		# debian has a pkg-config file for it, but it's not sure for other distributions. todo use pkg-config with a build check as fallback
		#pkg_config_check(project, name = 'xpm >= 0')
		cxx_build_check(project, name = 'xpm', dependencies = [x], libraries = ['Xpm'], source_text = \
			"""\
				#include <X11/xpm.h>
				void xpm()
				{
					// todo do something with it for a complete check
				}
			"""
		)
	]
)

xcursor = external_package_check(project, name = 'xcursor',
	url = 'http://x.org',
	distribution_packages = {
		'debian and ubuntu': 'libxcursor-dev (>= 0)',
		'gentoo': '...',
		'fedora': '...',
		'cygwin': 'xorg-x11-devel (6.8.2.0)'
	},
	dependencies = [
		# debian and cygwin have a pkg-config file for it, but it's not sure for other distributions. todo use pkg-config with a build check as fallback
		#pkg_config_check(project, name = 'xcursor >= 1.1.2')
		cxx_build_check(project, name = 'xcursor', dependencies = [x], libraries = ['Xcursor'], source_text = \
			"""\
				#include <X11/Xlib.h>
				#include <X11/Xcursor/Xcursor.h>
				void xcursor()
				{
					// todo do something with it for a complete check
				}
			"""
		)
	]
)

xft = external_package_check(project, name = 'xft',
	url = 'http://x.org',
	distribution_packages = {
		'debian and ubuntu': 'libxft2-dev (>= 0), libfontconfig1-dev (>= 2.3.1)',
		'gentoo': '...',
		'fedora': '...',
		'cygwin': 'libXft-devel (>= 2.1.6-1)'
	},
	dependencies = [
		pkg_config_check(project, name = 'xft >= 2.1.6')
	]
)

xerces = external_package_check(project, name = 'xerces',
	url = 'http://apache.org',
	distribution_packages = {
		'debian and ubuntu': 'libxerces27-dev (>= 0) | libxerces26-dev (>= 0)',
		'gentoo': '...',
		'fedora': '...',
		'cygwin': 'xerces-c-devel (>= 2.5.0)'
	},
	dependencies = [
		cxx_build_check(project, name = 'xerces', libraries = ['xerces-c'], source_text = \
			"""\
				#include <xercesc/sax/Parser.hpp>
				void xerces()
				{
					// todo do something with it for a complete check
				}
			"""
		)
	]
)

microsoft_windows = external_package_check(project, name = 'microsoft windows api',
	url = 'http://msdn.microsoft.com',
	distribution_packages = {'microsoft (maybe windows updates?)': 'windows platform sdk'},
	dependencies = [
		cxx_build_check(project, name = 'microsoft windows api', libraries = [], source_text = \
			"""\
				#if !defined _WIN64 && !defined _WIN32
					#error Bill Gates: No such fool or dictatory
				#endif
				#if !defined _WIN64
					#define WINVER 0x510
					#define _WIN32_WINDOWS WINVER
					#define _WIN32_NT WINVER
					#define _WIN32_IE 0x600
					//#define WIN32_LEAN_AND_MEAN
					//#define WIN32_EXTRA_LEAN
				#endif
				//#define VC_EXTRA_LEAN
				#define NOMINMAX
				#include <windows.h>
				#if !defined _WINDOWS_ && !defined __GNUG__ // hmm, mingw's header is bizarre
					#error bad windows header
				#endif
				#if defined min || defined max
					#error bad windows header: clash with standard library
				#endif
				void microsoft_windows()
				{
					// todo do something with it for a complete check
					#if 0 // <wincon.h>
						GetConsoleWindow();
					#endif
				}
			"""
		)
	]
)

# modules

from packageneric.generic.scons.module import module

class ngrs_module(module):
	def __init__(self):
		module.__init__(self, source_package,
			name = 'ngrs-' + str(source_package.version().major()),
			version = source_package.version(),
			description = source_package.description(),
			dependencies = [stdcxx]
		)

	def dynamic_dependencies(self):
		if microsoft_windows.result(): self.add_dependency(microsoft_windows)
		else: self.add_dependencies([dlfcn, pthread, freetype, x, xfixes, xpm, xcursor, xft])
		if xerces.result(): self.add_dependency(xerces) # todo prodos, in which cases is it needed?
		
		from packageneric.generic.scons.find import find
		self.add_sources(find(self.project(), 'src', [os.path.join('ngrs', '*.' + extension) for extension in ('cpp', 'c')]))
		self.add_headers(find(self.project(), 'src', [os.path.join('ngrs', '*.' + extension) for extension in ('hpp', 'h')]))
		self.contexes().source().compilers().cxx().paths().add(['src'])
ngrs_module = ngrs_module()

# pkg-config packages

from packageneric.generic.scons.pkg_config_package import pkg_config_package
ngrs_package = pkg_config_package(project,
	name = 'ngrs-' + str(ngrs_module.version().major()),
	version = ngrs_module.version(),
	description = ngrs_module.description(),
	modules = [ngrs_module]
)

if False:
	# debian

	from packageneric.generic.scons.debian_package import debian_package

	ngrs_runtime = debian_package(project,
		name = 'lib-ngrs-' + str(source_package.version().major()),
		section = 'libs',
		description = ngrs_package.description(),
		long_description = 'This package contains the runtime library.'
	)
	#ngrs_runtime.add_files(ngrs_package.binaries())

	class ngrs_dev(debian_package):
		def __init__(self):
			debian_package.__init__(self, project,
				name = ngrs_runtime.name() + '-dev',
				section = 'libdevel',
				description = ngrs_package.description(),
				long_description = 'This package contains the development files.',
			)
		def dynamic_dependencies(self):
			self.add_depend(ngrs_runtime)
			self.add_build_depends(ngrs_package.build_depends())
	ngrs_dev = ngrs_dev()
	#ngrs_dev.add_files(ngrs_package.headers())
	#ngrs_dev.add_files(ngrs_package.pkg_config())

	ngrs_doc = debian_package(project,
		name = ngrs_runtime.name() + '-doc',
		section = 'doc',
		architecture = 'all',
		description = ngrs_package.description(),
		long_description = 'This package contains the documentation.'
	)

	from packageneric.generic.scons.debian import debian
	debian = debian(source_package,
		maintainer = prodos,
		uploaders = [prodos, bohan],
		binary_packages = [ngrs_runtime, ngrs_dev, ngrs_doc],
	)

project([ngrs_package])

Return('ngrs_package')
