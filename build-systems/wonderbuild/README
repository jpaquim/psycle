=======================================================
 Wonderbuild - an extremely fast, extensible build tool
=======================================================

Wonderbuild is a build tool that handles all the phases
involved in building softwares: configuration/checks, build, installation.

Builds are described in python modules.
Wonderbuild does not try to hide the python language, it requires
to have a good knowledge of python. On the other hand, if you do know
python well enough, it shouldn't take a long time to learn wonderbuild
since it exposes only a minimal number of powerful concepts,
rather than burying everything behind a massive API.

If you don't like waiting a long time for your builds to finish,
you'll be pleased with the speed wonderbuild reaches: it has been
designed from the ground up to be the fastest build tool, and according
to benchmarks done with it and various other build tools,
the goal has been reached, You can read some benchmarks here:
http://psycle.svn.sourceforge.net/viewvc/psycle/branches/bohan/wonderbuild/benchmarks/time.xml

Wonderbuild's speed is due to an implementation that:
- allows tasks to start executing immediately,
	discovering task dependencies dynamically,
- makes it possible to take advantage of multi-cpu/core systems at all levels in the code,
	never loosing an opportunity of parallelism,
- minimises filesystem calls.

Wonderbuild is currently undocumented. The closest tool in concept is fbuild,
so i suggest you read fbuild's documentation to get some ideas.

===========================================================

Some doc for the ModTask class:

	Method __call__(self, sched_ctx):
		This is where to check for the availability of the dependencies.
		Dependencies are instances of the ModDepPhases.
		These are tasks that once processed, are convertible to a boolean.
		Required and optionally found dependencies should be put in self.public_deps and self.private_deps.
		Dependencies that are used in public headers should be put in self.public_deps, and the others in self.private_deps.
	
	Method do_mod_phase(self):
		This is where to set self.sources and self.cfg for building the object files.

	Attribute cxx_phase:
		This should a task that installs the public headers so that clients can start building their object files.

	Method apply_cxx_to(self, cfg):
		This is where to export flags to the cfg so that clients can start building their object files.
		For example: adding to cfg.include_paths the path where the cxx_phase installed the headers.
	
Some doc for the PreCompileTasks class:

	Method __call__(self, sched_ctx):
		This is where to check for the availability of the dependencies, just like in the ModTask class,
		but a pch should have only optional dependencies, put in self.public_deps.

	Property source_text(self):
		This property should return the actual code to precompile.
		For example, a series of #include.
	
	Method do_cxx_phase(self):
		This is where to set self.cfg for building the pch file.
		For example: self.cfg.include_paths

===========================================================

X.setup_deps (__call__)
X.build_objs (do_mod_phase)
X.install_headers (cxx_phase)
X.client_cxx_flags (apply_cxx_to) -> X.install_headers
X.build_mod -> X.setup_deps
            -> X.build_objs
X.client_mod_flags -> X.build_mod
X.deep_deps = self.cfg.shared or not self.cfg.static_prog
X.ld = shared or prog

A -> B -> C

A {static, dyn} prog
{B, C} {static, shared/loadable} lib

A static, B static, C static: A -> B -> C
A dyn, B static, C static: A -> B -> C
A dyn, B static, C shared: A -> B -> C
A dyn, B shared, C static: A -> B (rarely used)
A dyn, B shared, C shared: A -> B

A.build_mod -> A.setup_deps -> B.setup_deps -> C.setup_deps
            -> A.build_objs -> B.client_cxx_flags -> B.install_headers
                                                  -> C.client_cxx_flags -> C.install_headers
            -> A.ld? -> B.client_mod_flags -> B.build_mod -> B.setup_deps -> C.setup_deps
                                                          -> B.build_objs -> C.client_cxx_flags -> C.install_headers
                                                          -> B.ld? -> C.client_mod_flags -> C.build_mod -> C.setup_deps
                                                                                                        -> C.build_objs
                                           -> !B.ld? -> C.client_mod_flags

===========================================================

A -> E
  -> C -> D -> E
  -> B -> C -> D -> E


full static: B C D
E = 0
C = 0
D = 1
E = 2
B = 0
C = 1

B C D E
B D C E

===========================================================

