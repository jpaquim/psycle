
**********************************************
*** Wonderbuild is currently undocumented. ***
**********************************************

===========================================================

Some doc for the ModTask class:

	Method __call__(self, sched_ctx), from Task, also required by ModDepPhases:
		This is where to check for the availability of the dependencies.
		Dependencies are instances of the ModDepPhases.
		These are tasks that once processed, are convertible to a boolean.
		Required and optionally found dependencies should be put in self.public_deps and self.private_deps.
		Dependencies that are used in public headers should be put in self.public_deps, and the others in self.private_deps.
	
	Attribute cxx_phase, from ModDepPhases:
		This should be a task that installs the public headers so that clients can start building their object files.

	Method apply_cxx_to(self, cfg), from ModDepPhases:
		This is where to export compile flags to the cfg so that clients can start building their object files.
		For example: adding to cfg.include_paths the path where the cxx_phase installed the headers:
			if not self.cxx_phase.dest_dir in cfg.include_paths: cfg.include_paths.append(self.cxx_phase.dest_dir)

	Attribute sources:
		list of FileSystem.Node
		This should be the source files to compile.

	Attribute mod_phase, from ModDepPhases:
		The user doesn't need to override this attribute. They only override the self.do_mod_phase() method, which is called by the mod_phase task.
		This is where actual compilation and linking takes place.
		The task is executed by clients before linking their binary against this mod,
		It may of course also be requested directly.
		It ensures self.__call__ as been called, and cxx_phase of dependencies too, with _do_deps_cxx_phases_and_apply_cxx_deep (defined in ModDepPhases).

	Method do_mod_phase(self):
		This is where to set self.sources and self.cfg for building the object files.

	Method apply_mod_to(self, cfg), from ModDepPhases:
		The user doesn't need to override this method.
		This default implementation exports link flags to the cfg so that clients can start linking against this mod.
		
Some doc for the PreCompileTasks class:

	Method __call__(self, sched_ctx), from Task, also required by ModDepPhases:
		This is where to check for the availability of the dependencies, just like in the ModTask class,
		but a pch should have only optional dependencies, put in self.public_deps.

	Attribute source_text:
		This should be the actual code to precompile.
		For example, a series of #include: '#include <forced-include.private.hpp>\n#include <cmath>\n#include <thread>\n'
	
	Attribute cxx_phase, from ModDepPhases:
		The user doesn't need to override this attribute. They only override the self.do_cxx_phase() method, which is called by the cxx_phase task.
		This is were actual pre-compilation takes place.
		It ensures self.__call__ as been called, and cxx_phase of dependencies too, with _do_deps_cxx_phases_and_apply_cxx_deep (defined in ModDepPhases).
		Once the pre-compiled header is built, clients can start building their object files.
		
	Method do_cxx_phase(self):
		This is where to set self.source_text and self.cfg for building the pch file.
		For example:
			self.source_text = '#include <forced-include.private.hpp>\n#include <cmath>\n#include <thread>\n'
			self.cfg.include_paths.append(src_dir / 'pre-compiled')

	Method apply_cxx_to(self, cfg), from ModDepPhases:
		The user doesn't need to override this method.
		This default implementation exports compile flags to the cfg so that clients will use the pre-compiled header.

Some doc for the ModDepPhases class:

	ModDepPhases can be a ModTask, a PreCompileTasks, or a CheckTask like PkgConfigCheckTask or (Multi)BuildCheckTask.

	Method __call__(self, sched_ctx) (derived classes are required to also derive from Task):
		task that check for availability of dependencies.
		Viewed from the other side, task executed by clients to check for the availability of this instance.

		self.private_deps and self.public_deps should be filled with all required dependencies, found or not, and available optional dependencies.

		When self.do_ensure_deps is later called, missing dependencies found in self.all_deps will raise an error.

	Attributes public_deps, private_deps:
		self.public_deps export compiler/linker flags to clients' build cfg with self.apply_cxx_to(cfg) and self.apply_mod_to(cfg)
		self.private_deps export linker flags to clients only when self._expose_private_deep_deps is True.
		
		The property self._expose_private_deep_deps returns False in ModDepPhases,
		but is overriden is ModTask to return True when it's a static lib.

	Attribute cxx_phase:
		task executed before clients start compiling object files.
		This is called by clients with _do_deps_cxx_phases_and_apply_cxx_deep, to bring dependencies up and then apply cfg with apply_cxx_to.
		It should for example install or pre-compiler headers.
		The cxx_phase task is not used by CheckTask, and left as None.
		The cxx_phase task may be not used by ModTask when its kind is Kinds.PROG or Kinds.LOADABLE, and left as None.

	Method apply_cxx_to(self, cfg):
		This is where you can export compile flags to clients so they can start building their object files.
		This is called by clients with _do_deps_cxx_phases_and_apply_cxx_deep.

	Attribute mod_phase:
		task executed before clients start linking their binary.
		This is called by clients from their own mod_phase task, to bring dependencies up and then apply cfg with apply_mod_to.
		It should for example compile and link the binary.
		The mod_phase task is not used by CheckTask, and left as None.
		The mod_phase task is not used by PreCompileTasks, and left as None.
		The mod_phase task is not used by ModTask when its kind is Kinds.HEADERS, and left as None.

	Method apply_mod_to(self, cfg):
		This is where you can export link flags to clients so they can start linking their binary.
		This is called by clients from their mod_phase task.

===========================================================

The core of wonderbuild is the task.

Step 0:
A task is supposed to run only once in a build run.
The scheduler stores a boolean attribute in each task to flag the tasks that have been evaluated
and simply skips the tasks scheduled for execution that have already been evaluated.

Step 1:
A task first compare its inputs with the inputs of the last time it was executed.
Since the old inputs don't exist anymore, this means a task need compute and store a signature of its inputs to a persistent storage,
and compare this signature with the signature of the current inputs.

Step 2:
If the old input signature is different from the new signature (or if there was no previous signature),
the task need to do its actual job.

Step 3:
Upon successful completion, the task then stores the signature of the inputs to the persistent storage.
If a error occurred, the task doesn't update the persistent input signature, so that the next build run will try again.

===========================================================

Example implementing a makefile with wonderbuild

_________________________________________

all: foo

foo1.o: foo1.c
	cc -c -o foo1.o foo1.c

foo2.o: foo2.c
	cc -c -o foo2.o foo2.c

foo: foo1.o foo2.o
	cc -o foo foo1.o foo2.o

_________________________________________

from wonderbuild.task import Task
from wonderbuild.script import ScriptTask

class WonderBuild(ScriptTask):

	def __call__(self, sched_ctx):
		project = self.project
		
		tasks = {}

		class MakeLikeTask(Task):
			def __init__(self, outputs, inputs, commands):
				Task.__init__(self)
				for o in outputs:
					tasks[o] = self
					project.add_task_alias(o, self)
				self.outputs = outputs
				self.inputs = inputs
				self.commands = commands

			def __call__(self, shed_ctx):
				input_tasks = []
				for i in self.inputs:
					try: input_tasks.append(tasks[i])
					except KeyError: pass
				for x in sched_ctx.parallel_wait(*input_tasks): yield x
				min_output = min([(project.bld_dir / o).time for o in self.outputs])
				max_input = max([(project.src_dir / i).time for i in self.inputs])
				if min_output < max_input:
					try: sched_ctx.release()
						for c in self.commands: exec_subprocess(c)
					finally: sched_ctx.acquire()
				for o in self.outputs: o.clear()

		foo1 = MakeLikeTask(['foo1.o'], ['foo1.c'], ['cc -o foo1.o foo1.c'.split()])
		foo2 = MakeLikeTask(['foo2.o'], ['foo2.c'], ['cc -o foo2.o foo2.c'.split()])
		foo = MakeLikeTask(['foo'], ['foo1.o', 'foo2.o'], ['cc -o foo foo1.o foo2.o'.split()])
		project.default_tasks.append(foo)

