


/*
		[bohan] i disabled this file because it does not compile.
*/
#if 0







//////////////////////////////////////////////////////////////////////
//
//	Osc.h
//
//	druttis@darkface.pp.se
//
//////////////////////////////////////////////////////////////////////
#pragma once
#include "Inertia.h"
#include "Waveform.h"
//////////////////////////////////////////////////////////////////////
//
//	Amp table
//
//////////////////////////////////////////////////////////////////////
extern float	*pamptable;
//////////////////////////////////////////////////////////////////////
//
//	Osc class
//
//////////////////////////////////////////////////////////////////////
class Osc
{
private:
	Waveform	m_wave;
	float		m_phase;
	Inertia		m_incr;
public:
	Osc();
	~Osc();
	//////////////////////////////////////////////////////////////////
	//
	//	SetFreq
	//
	//////////////////////////////////////////////////////////////////
	inline void SetFreq(float freq)
	{
		m_incr.SetTarget(m_wave.Get()->freq2incr);
	}
	inline void SetNote(float note)
	{
		SetFreq(440.0f * (float) pow(2.0, ((double) note - 69.0) / 12.0));
	}
	inline void SlideFrom(Inertia *pincr)
	{
		m_incr.SetTarget(pincr->GetValue());
		m_incr.Reset();
	}
	inline void SetLength(int length)
	{
		m_incr.SetLength(length);
	}
	inline float GetValue()
	{
		return m_incr.GetValue();
	}
	//////////////////////////////////////////////////////////////////
	//
	//	Stop
	//
	//////////////////////////////////////////////////////////////////
	inline void Stop()
	{
		m_incr.Stop();
	}
	//////////////////////////////////////////////////////////////////
	//
	//	Reset
	//
	//////////////////////////////////////////////////////////////////
	inline void Reset()
	{
		m_incr.Reset();
	}
	//////////////////////////////////////////////////////////////////
	//
	//	Clip
	//
	//////////////////////////////////////////////////////////////////
	inline int Clip(int nsamples)
	{
		return m_incr.Clip(nsamples);
	}
	//////////////////////////////////////////////////////////////////
	//
	//	Next
	//
	//////////////////////////////////////////////////////////////////
	inline float Next(float fm, float pm)
	{
		WAVEFORM *pwave = m_wave.Get();
		float amp = pamptable[pwave->preverse[f2i(m_incr.GetValue() * pwave->incr2freq) & 0xffff]];
		pm *= amp;
		int paridx = pwave->preverse[f2i((m_incr.GetValue() + pm) * pwave->incr2freq) & 0xffff];
		float out = m_wave.GetSample(m_phase + pm, paridx);
		m_phase += m_incr.Next() * fastpow2(fm);
		return out;
	}
};

#endif
