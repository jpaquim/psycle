#! /usr/bin/env python
# MinGW cross compiling package handling tool
# This source is free software ; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation ; either version 2, or (at your option) any later version.
# copyright 2008-2008 Johan Boule <bohan@jabber.org>

import sys, os, subprocess, shutil, imp, fnmatch

version = '0.2'

commands = ('help', 'version', 'list', 'show', 'install', 'remove', 'need-rebuild', 'reverse-depends', 'clean-build', 'list-file-conflicts')

def usage(out = sys.stderr, command = None):
	if command is None:
		out.write('Usage: ' + sys.argv[0] + ' <command> [args]\n')
		out.write('  where <command> is one of: ' + ', '.join(commands) + '.\n')
		out.write('\n')
	if command is None or command == 'help':
		out.write(
			'Usage: <help | --help> [command]\n'
			'or   : <command> --help\n'
			'  gives help on command, or on all commands.\n'
		)
		if command == 'help': out.write('  where [command] is one of: ' + ', '.join(commands) + '.\n')
		out.write('\n')
	if command is None or command == 'version':
		out.write(
			'Usage: <version | --version>\n'
			'  prints the version of this tool.\n'
			'\n')
	if command is None or command == 'list':
		out.write(
			'Usage: list\n'
			'  gives a list of all packages, with state information.\n'
			'\n')
	if command is None or command == 'show':
		out.write(
			'Usage: show <package...>\n'
			'  shows the details of the packages.\n'
			'\n')
	if command is None or command == 'install':
		out.write(
			'Usage: install [--continue | --rebuild | --no-download | --no-act] <package...>\n'
			'  installs the packages, and their dependencies.\n'
			'  Packages given as arguments will be marked as user,\n'
			'  unless the --rebuild option is present and the package was already installed.\n'
			'\n'
			'  --no-act         do not really install, just show what would be done.\n'
			'  --skip-download  skip the download step.\n'
			'  --rebuild        rebuild the packages given as arguments.\n'
			'  --continue       continue after a build failure.\n'
			'  --verbose        show what files and dirs are installed.\n'
			'\n')
	if command is None or command == 'remove':
		out.write(
			'Usage: remove [--verbose | --no-act] <package...>\n'
			'  removes the packages, dependent packages, and packages marked auto that become no longer needed.\n'
			'\n'
			'  --no-act   do not really remove, just show what would be done.\n'
			'  --verbose  show what files and dirs are removed.\n'
			'\n')
	if command is None or command == 'need-rebuild':
		out.write(
			'Usage: need-rebuild\n'
			'  gives a list of all packages that may need to be rebuilt.\n'
			'  This lists the packages for which the installed versions of the packages they depend on (recursively)\n'
			'  are no longer the same as the ones they were built with.\n'
			'\n')
	if command is None or command == 'reverse-depends':
		out.write(
			'Usage: reverse-depends [--installed-only] <package...>\n'
			'  shows the reverse dependencies of the packages.\n'
			'\n'
			'  --installed-only  only show installed packages.\n'
			'\n')
	if command is None or command == 'clean-build':
		out.write(
			'Usage: clean-build [--download | --destdir | --all] <package...>\n'
			'  cleans the build dirs of packages.\n'
			'\n'
			'  --dest-dir  also clean the dest dir.\n'
			'  --download  also clean the downloaded files.\n'
			'  --all       wipe out the whole build dir altogether (same effect as --dest-dir --download).\n'
			'\n')
	if command is None or command == 'list-file-conflicts':
		out.write(
			'Usage: list-file-conflicts\n'
			'  gives a list of files that are owned by several packages.\n'
			'\n')


def main():
	if len(sys.argv) < 2:
		usage()
		sys.exit(1)
	command = sys.argv[1]
	args = sys.argv[2:]
	if '--help' in args and command in commands:
		usage(command = command)
	elif command == 'version' or command == '--version' or '--version' in args:
		sys.stdout.write(version)
		sys.stdout.write('\n')
	elif command == 'help' or command == '--help':
		command = None
		if len(args):
			command = args[0]
			if not command in commands:
				sys.stderr.write(sys.argv[0] + ': unrecognised command: ' + command + '\n')
				usage(command = 'help')
				sys.exit(2)
		else: command = None
		usage(sys.stdout, command)
	elif command == 'list':
		if len(args):
			usage(command = 'list')
			sys.exit(2)
		packages().list()
	elif command == 'install':
		package_names = []
		continue_build = False
		rebuild = False
		skip_download = False
		verbose = False
		no_act = False
		for arg in args:
			if arg.startswith('-'):
				if arg == '--continue': continue_build = True
				elif arg == '--rebuild': rebuild = True
				elif arg == '--skip-download': skip_download = True
				elif arg == '--verbose': verbose = True
				elif arg == '--no-act': no_act = True
				else:
					sys.stderr.write(sys.argv[0] + ': unrecognised option: ' + arg + '\n')
					usage(command = 'install')
					sys.exit(2)
			else: package_names.append(arg)
		if no_act: packages().install_no_act(package_names)
		else: packages().install(package_names, continue_build = continue_build, rebuild = rebuild, skip_download = skip_download, verbose = verbose)
	elif command == 'remove':
		package_names = []
		verbose = False
		no_act = False
		for arg in args:
			if arg.startswith('-'):
				if arg == '--verbose': verbose = True
				elif arg == '--no-act': no_act = True
				else:
					sys.stderr.write(sys.argv[0] + ': unrecognised option: ' + arg + '\n')
					usage(command = 'remove')
					sys.exit(2)
			else: package_names.append(arg)
		if no_act: packages().remove_no_act(package_names)
		else: packages().remove(package_names, verbose)
	elif command == 'reverse-depends':
		package_names = []
		installed_only = False
		for arg in args:
			if arg.startswith('-'):
				if arg == '--installed-only': installed_only = True
				else:
					sys.stderr.write(sys.argv[0] + ': unrecognised option: ' + arg + '\n')
					usage(command = 'reverse-depends')
					sys.exit(2)
			else: package_names.append(arg)
		packages().print_reverse_deps(package_names, installed_only)
	elif command == 'show':
		package_names = []
		for arg in args:
			if arg.startswith('-'):
				sys.stderr.write(sys.argv[0] + ': unrecognised option: ' + arg + '\n')
				usage(command = 'show')
				sys.exit(2)
			else: package_names.append(arg)
		packages().show(package_names)
	elif command == 'clean-build':
		package_names = []
		all = False
		dest_dir = False
		download = False
		for arg in args:
			if arg.startswith('-'):
				if arg == '--dest-dir': dest_dir = True
				elif arg == '--download': download = True
				elif arg == '--all': all = True
				else:
					sys.stderr.write(sys.argv[0] + ': unrecognised option: ' + arg + '\n')
					usage(command = 'clean-build')
					sys.exit(2)
			else: package_names.append(arg)
		packages().clean_build(package_names, all = all, dest_dir = dest_dir, download = download)
	elif command == 'need-rebuild':
		if len(args):
			usage(command = 'need-rebuild')
			sys.exit(2)
		packages().need_rebuild()
	elif command == 'list-file-conflicts':
		if len(args):
			usage(command = 'list-file-conflicts')
			sys.exit(2)
		packages().list_file_conflicts()
	else:
		sys.stderr.write(sys.argv[0] + ': unrecognised command: ' + command + '\n')
		usage()
		sys.exit(1)
		
_packages = None

def packages():
	global _packages
	if _packages is None:
		_packages = Packages()
	return _packages

class Packages:
	def __init__(self, package_recipe_dir = None, build_state_dir = None, install_dir = None, target = 'i386-mingw32msvc'):
		self._packages = {}
		self._installed_packages = {}
		self._package_recipes = {}
		
		if package_recipe_dir is not None: self._package_recipe_dir = package_recipe_dir
		else: self._package_recipe_dir = os.path.join(os.getcwd(), 'package-recipes')

		self._target = target

		if build_state_dir is not None: self._build_state_dir = build_state_dir
		else: self._build_state_dir = os.path.join(os.getcwd(), '++build')
		if not os.path.exists(self._build_state_dir): os.makedirs(self._build_state_dir)

		if install_dir is None: install_dir = os.path.join(os.getcwd(), '++install')
		if not os.path.exists(install_dir): os.makedirs(install_dir)
		
		self._install_state_dir = os.path.join(install_dir, 'package-states')
		if not os.path.exists(self._install_state_dir): os.mkdir(self._install_state_dir)

		self._prefix = os.path.join(install_dir, 'prefix')
		if not os.path.exists(self._prefix): os.makedirs(self._prefix)
		os.environ['PATH'] = os.path.join(self.prefix(), 'bin') + os.pathsep + os.environ['PATH']

		self._dest_dir = ''
		self._gmake = 'make' # or gmake
		self._gsed = 'sed' # or gsed
		
		for e in ['AR', 'CC', 'CFLAGS', 'CROSS', 'CXX', 'CXXFLAGS', 'EXEEXT', 'LD', 'LIBS', 'NM', 'PKG_CONFIG', 'RANLIB']:
			try: del os.environ[e]
			except KeyError: pass

		os.environ['RECIPES'] = self.package_recipe_dir()
		os.environ['TARGET'] = self.target()
		os.environ['DESTDIR'] = self.dest_dir()
		os.environ['PREFIX'] = self.prefix()
		os.environ['GSED'] = self.gsed()
		os.environ['SED'] = self.gsed()
		os.environ['GMAKE'] = self.gmake()
		os.environ['MAKE'] = self.gmake()
		
	def target(self): return self._target
	def prefix(self): return self._prefix
	def dest_dir(self): return self._dest_dir
	def gmake(self): return self._gmake
	def gsed(self): return self._gsed
	
	def package_recipe_dir(self): return self._package_recipe_dir
	def install_state_dir(self, package): return os.path.join(self._install_state_dir, package.name())
	def build_state_dir(self, package): return os.path.join(self._build_state_dir, package.name())
		
	def find_package(self, package_name):
		try: return self._packages[package_name]
		except KeyError:
			if os.path.exists(os.path.join(self._install_state_dir, package_name)): package = self.find_installed_package(package_name)
			else: package = self.find_package_recipe(package_name)
			self._packages[package_name] = package
			return package
	
	def find_installed_package(self, package_name):
		try: return self._installed_packages[package_name]
		except KeyError:
			package = InstalledPackage(self, package_name)
			self._installed_packages[package_name] = package
			return package
		
	def find_package_recipe(self, package_name):
		try: return self._package_recipes[package_name]
		except KeyError:
			try:
				package = import_package(package_name).package(self)
				self._package_recipes[package_name] = package
			except ImportError:
				path = os.path.join(self._package_recipe_dir, package_name)
				if not os.path.exists(path): raise
				if os.stat(path)[0] & 1 == 0: raise Exception(package_name + ' found but not executable')
				package = CommandPackageRecipe(self, self._package_recipe_dir, package_name)
			return package

	def installed_packages(self):
		try: return self._all_installed_packages
		except AttributeError:
			self._all_installed_packages = []
			for package_name in os.listdir(self._install_state_dir): self._all_installed_packages.append(self.find_installed_package(package_name))
			return self._all_installed_packages

	def package_recipes(self):
		try: return self._all_package_recipes
		except AttributeError:
			self._all_package_recipes = []
			for p in os.listdir(self._package_recipe_dir):
				if fnmatch.fnmatch(p, '*~'): continue
				if fnmatch.fnmatch(p, '*.py*'):
					if not fnmatch.fnmatch(p, '*.py') or fnmatch.fnmatch(p, '__init__.*'): continue
					self._all_package_recipes.append(self.find_package_recipe(p[:-3])) # name without .py extension
				else:
					path = os.path.join(self._package_recipe_dir, p)
					if not os.path.isdir(path): self._all_package_recipes.append(self.find_package_recipe(p))
			return self._all_package_recipes

	def list(self):
		flag_width = 3; name_width = 35; version_width = 27; description_width = 50
		print 'Status=Not/Installed'
		print '| Installed=Auto/User'
		print '|/ ' + 'Name'.ljust(name_width) + 'Version'.ljust(version_width) + 'Description'
		print '++-' + '=' * (name_width - 1) + '-' + '=' * (version_width - 1) + '-' + '=' * description_width
		package_names = {} # {name: [installed, recipe]}
		for package in self.installed_packages(): package_names[package.name()] = [package]
		for package in self.package_recipes():
			try: packages = package_names[package.name()]
			except KeyError: package_names[package.name()] = [package]
			else:
				if packages[0].version() != package.version(): packages.append(package) # don't list if same version is installed
		sorted = package_names.items()
		sorted.sort()
		for packages in [items[1] for items in sorted]:
			for package in packages: # [installed, recipe]
				if not package.installed(): installed = 'n '
				elif package.auto(): installed = 'ia'
				else: installed = 'iu'
				print installed.ljust(flag_width) + \
					package.name().ljust(name_width) + \
					package.version().ljust(version_width) + \
					package.description().ljust(description_width)
				
	def list_file_conflicts(self):
		files = {} # {file : [package1, package2, ...]}
		for package in self.installed_packages():
			for file in package.read_state('files'):
				file = file.split('  ')[1]
				try: packages = files[file]
				except KeyError: files[file] = [package]
				else: files[file].append(package)
		for item in files.items():
			if len(item[1]) > 1: print item[0] + ': ' + ' '.join([package.name() for package in item[1]])
	
	def need_rebuild(self):
		name_width = 35; version_width = 27
		print 'Package'.ljust(name_width) + 'Depends on'.ljust(name_width) + 'Version when built'.ljust(version_width) + 'Version installed'.ljust(version_width)
		print ('=' * (name_width - 1) + '-') * 2 + '=' * (version_width - 1) + '-' + '=' * (version_width - 1)
		for package in self.installed_packages():
			for built_dep in package.recursed_deps():
				installed_dep = self.find_installed_package(built_dep.name())
				if installed_dep.version() != built_dep.version():
					print \
						package.name().ljust(name_width) + \
						built_dep.name().ljust(name_width) + \
						built_dep.version().ljust(version_width) + \
						installed_dep.version().ljust(version_width)

	def direct_reverse_deps(self, package, installed_only = True):
		result = []
		for i in self.installed_packages():
			for dep in i.deps():
				if dep.name() == package.name(): result.append(i)
		if not installed_only:
			for r in self.package_recipes():
				if r.name() in [p.name() for p in result]: continue # already listed as installed package
				for dep in r.deps():
					if dep.name() == package.name(): result.append(r)
		return result

	def recursive_reverse_deps(self, package, installed_only):
		result = []
		for i in self.installed_packages():
			for dep in i.deps():
				if dep.name() == package.name(): result.append((i, self.recursive_reverse_deps(i, installed_only)))
		if not installed_only:
			for r in self.package_recipes():
				if r.name() in [p[0].name() for p in result]: continue # already listed as installed package
				for dep in r.deps():
					if dep.name() == package.name(): result.append((r, self.recursive_reverse_deps(r, installed_only)))
		return result

	def print_reverse_deps(self, package_names, installed_only):
		for package_name in package_names:
			def recurse(packages, t = 0):
				for package in packages:
					print '\t' * t + package[0].name()
					recurse(package[1], t + 1)
			package = self.find_package(package_name)
			if installed_only and not package.installed(): print 'package is not installed:', package.name()
			else: recurse([(package, self.recursive_reverse_deps(package, installed_only))])
			
	def recursed_reverse_deps(self, package, installed_only = True):
		result = []
		def recurse(packages):
			for package in packages:
				recurse(package[1])
				if not package[0] in result: result.append(package[0])
		recurse(self.recursive_reverse_deps(package, installed_only))
		return result
	
	def show(self, package_names):
		def show_package(package):
			print 'Name:', package.name()
			print 'Version:', package.version()
			print 'Description:', package.description()
			if not package.installed(): installed = 'not installed'
			elif package.auto(): installed = 'installed (auto)'
			else: installed = 'installed (user)'
			print 'Status:', installed
			print 'Direct-depends:', ', '.join([dep.name() for dep in package.deps()])
			deps = []
			uninstalled_deps = []
			for dep in package.recursed_deps():
				deps.append(dep.name())
				if not self.find_package(dep.name()).installed(): uninstalled_deps.append(dep.name())
			print 'Recursed-depends:', ', '.join(deps)
			print 'Uninstalled-recursed-depends:', ', '.join(uninstalled_deps)
			print 'Direct-reverse-depends:', ', '.join([p.name() for p in self.direct_reverse_deps(package, installed_only = False)])
			print 'Recursed-reverse-depends:', ', '.join([p.name() for p in self.recursed_reverse_deps(package, installed_only = False)])
			if package.installed():
				print 'Installed-direct-reverse-depends:', ', '.join([p.name() for p in self.direct_reverse_deps(package)])
				print 'Installed-recursed-reverse-depends:', ', '.join([p.name() for p in self.recursed_reverse_deps(package)])
			print
		for package in [self.find_package(package_name) for package_name in package_names]:
			show_package(package)
			if package.installed():
				try: package_recipe = self.find_package_recipe(package.name())
				except: pass # the recipe of an installed package may not exist anymore
				else:
					if package_recipe.version() != package.version(): show_package(package_recipe)
	
	def install_recursed_deps(self, packages):
		result = []
		for package in packages:
			for dep in [self.find_package(d.name()) for d in package.recursed_deps()]:
				if not dep in result: result.append(dep)
			if not package in result: result.append(package)
		return result
		
	def install_no_act(self, package_names):
		done = []; todo = []
		for package in self.install_recursed_deps([self.find_package(package_name) for package_name in package_names]):
			if package.installed(): done.append(package)
			else: todo.append(package)
		print 'would install:', ', '.join([package.name() + ' ' + package.version() for package in todo])
		print 'already installed:', ', '.join([package.name() + ' ' + package.version() for package in done])

	def install(self, package_names, continue_build = False, rebuild = False, skip_download = False, verbose = False):
		for package in self.install_recursed_deps([self.find_package(package_name) for package_name in package_names]):
			if package.installed(): installed_package = package
			else: installed_package = InstalledPackage(self, package.name())
			if package.name() in package_names:
				if not rebuild: installed = 'user'
				elif package.installed():
					if package.auto(): installed = 'auto'
					else: installed = 'user'
				else: installed = 'user'
			elif package.installed():
				if package.auto(): installed = 'auto'
				else: installed = 'user'
			else: installed = 'auto'

			built_package = BuiltPackage(self, package.name())
			built_package.make_state_dir()
			save = os.getcwd()
			os.chdir(built_package.state_dir())
			try:
				if package.installed() and not rebuild:
					if package.name() in package_names: print 'already installed:', package.name(), package.version()
				else:
					if package.installed(): package_recipe = self.find_package_recipe(package.name())
					else: package_recipe = package
					new_build = rebuild and package_recipe.name() in package_names
					if not new_build: new_build = not built_package.state_exists('built') or not built_package.state_exists('dest')
					if new_build:
						print 'building', package_recipe.name(), package_recipe.version()
						built_package.remove_state('built')
						built_package.make_state_dir('build')
						self._dest_dir = built_package.state_dir('dest') # transmit dest dir to package
						if not continue_build:
							if os.path.exists(built_package.state_dir('dest')): shutil.rmtree(built_package.state_dir('dest'))
							if not skip_download:
								os.chdir(built_package.state_dir('build'))
								package_recipe.download()
							os.chdir(built_package.state_dir('build'))
							package_recipe.clean_build()
							os.chdir(built_package.state_dir('build'))
							package_recipe.unpack()
							os.chdir(built_package.state_dir('build'))
							package_recipe.build()
						else: 
							os.chdir(built_package.state_dir('build'))
							package_recipe.continue_build()
							continue_build = False
						if not built_package.state_exists('dest'): raise Exception('no dest dir after building package: ' + package_recipe.name())
						built_package.write_state('version', package_recipe.version())
						built_package.write_state('description', package_recipe.description())
						built_package.write_state('direct-dependencies', '\n'.join([d.name() + ' ' + d.version() for d in package_recipe.deps()]))
						rd = []
						for d in package_recipe.recursed_deps():
							if not d in rd: rd.append(d)
						built_package.write_state('recursed-dependencies', '\n'.join([d.name() + ' ' + d.version() for d in rd]))
						built_package.write_state('built', None)

					if not package.installed() or new_build:
						print 'installing', built_package.name(), built_package.version()
						if package.installed(): self.remove_one(installed_package)
						installed_package.make_state_dir()
						os.chdir(built_package.state_dir('dest') + self._prefix)
						shell('find . ! -type d -exec md5sum {} \\; > ' + installed_package.state_dir('files'), verbose = False)
						shell('find . -mindepth 1 -type d | sort -r > ' + installed_package.state_dir('dirs'), verbose = False)
						if verbose: shell('cat ' + installed_package.state_dir('files') + ' ' + installed_package.state_dir('dirs'), verbose = False)
						if False: shutil.copytree(os.curdir, self._prefix, symlinks = True)
							# note: shutil.copytree is not as good (rated "example code" in the documentation)
						else: shell('cp -R * ' + self._prefix, verbose = False)
						for state_name in ('version', 'description', 'direct-dependencies', 'recursed-dependencies'):
							shutil.copy(built_package.state_dir(state_name), installed_package.state_dir())
						try: del self._packages[package.name()]
						except KeyError: pass
			finally: os.chdir(save)

			installed_package.write_state('installed', installed)

	def remove_unneeded_deps(self, to_remove):
		unneeded = []
		for package in to_remove:
			for dep in [self.find_installed_package(d.name()) for d in package.deps()]:
				if dep.auto() and not dep in to_remove:
					needed = False
					for reverse_dep in self.direct_reverse_deps(dep):
						if not reverse_dep in to_remove: needed = True; break
					if not needed and not dep in unneeded: unneeded.append(dep)
		if len(unneeded):
			recurse = to_remove[:]; recurse.extend(unneeded)
			for r in self.remove_unneeded_deps(recurse):
				if not r in unneeded: unneeded.append(r)
		return unneeded

	def remove_unneeded(self):
		unneeded = []
		for package in self.installed_packages():
			if package.auto() and not package in unneeded:
				needed = False
				for reverse_dep in self.recursed_reverse_deps(package):
					if not reverse_dep.auto(): needed = True; break
				if not needed: unneeded.append(package)
		return unneeded

	def remove_reverse_deps(self, packages):
		result = []
		for package in packages:
			for reverse_dep in self.recursed_reverse_deps(package):
				if not reverse_dep in result: result.append(reverse_dep)
			if not package in result: result.append(package)
		return result
	
	def remove_no_act(self, package_names):
		to_remove = []
		for package in self.remove_reverse_deps([self.find_package(package_name) for package_name in package_names]):
			if not package.installed(): print 'package is not installed:', package.name()
			else: to_remove.append(package)
		print 'would remove:', ', '.join([p.name() for p in to_remove])
		unneeded = self.remove_unneeded_deps(to_remove)
		for package in self.remove_unneeded():
			if not package in unneeded: unneeded.append(package)
		print 'would remove no-more used:', ', '.join([p.name() for p in unneeded])

	def remove(self, package_names, verbose = False):
		to_remove = []
		for package in self.remove_reverse_deps([self.find_package(package_name) for package_name in package_names]):
			if not package.installed(): print 'package is not installed:', package.name()
			else: to_remove.append(package)
		to_remove.extend(self.remove_unneeded_deps(to_remove))
		for package in self.remove_unneeded():
			if not package in to_remove: to_remove.append(package)
		for package in to_remove:
			print 'removing', package.name(), package.version()
			self.remove_one(package, verbose)

	def remove_one(self, package, verbose = False):
			if not package.installed(): raise Exception('package ' + package.name() + 'not an installed one')
			save = os.getcwd()
			os.chdir(package.state_dir())
			try:
				f = file('files')
				try:
					while True:
						l = f.readline().rstrip()
						if len(l) == 0: break
						l = l.split('  ')[1] # md5sum precedes the file name
						p = os.path.join(self._prefix, l)
						try: os.unlink(p)
						except OSError:
							if not os.path.exists(p): sys.stderr.write('file ' + l + ' was already removed while removing package ' + package.name() + '\n')
						else:
							if verbose: print l
				finally: f.close()
				f = file('dirs')
				try:
					while True:
						l = f.readline().rstrip()
						if len(l) == 0: break
						try: os.rmdir(os.path.join(self._prefix, l))
						except OSError: pass # directory not empty
						else:
							if verbose: print l + os.sep
				finally: f.close()
				package.remove_state()
			finally: os.chdir(save)
			try:
				del self._packages[package.name()]
				del self._installed_packages[package.name()]
			except KeyError: pass
			try: del self._all_installed_packages
			except AttributeError: pass
	
	def clean_build(self, package_names, all, dest_dir, download):
		for package_recipe in [self.find_package_recipe(package_name) for package_name in package_names]:
			built_package = BuiltPackage(self, package_recipe.name())
			if all: built_package.remove_state(verbose = True)
			else:
				if download: built_package.remove_state('build', verbose = True)
				elif built_package.state_exists('build'):
					print 'cleaning', built_package.state_dir('build')
					os.chdir(built_package.state_dir('build'))
					package_recipe.clean_build()
				if dest_dir:
					built_package.remove_state('built', verbose = True)
					built_package.remove_state('dest', verbose = True)
				built_package.remove_state_dir_if_empty(verbose = True)

class BuiltDep:
	def __init__(self, name, version):
		self._name = name
		self._version = version
	def name(self): return self._name
	def version(self): return self._version

class Package:
	def __init__(self, packages, name):
		self._packages = packages
		self._name = name
	def packages(self): return self._packages
	def name(self): return self._name
	def version(self): return '(no version)'
	def description(self): return '(no description)'
	def deps(self): pass
	def recursed_deps(self): pass
	def installed(self): pass

class BasePackageRecipe(Package):
	def __init__(self, packages, name):
		Package.__init__(self, packages, name)

	def installed(self): return False

	def recursed_deps(self):
		try: return self._recursed_deps
		except AttributeError:
			self._recursed_deps = []
			for dep in self.deps():
				for recursed_dep in dep.recursed_deps():
					if not recursed_dep in self._recursed_deps: self._recursed_deps.append(recursed_dep)
				if not dep in self._recursed_deps: self._recursed_deps.append(dep)
			return self._recursed_deps

	def download(self): pass
	def unpack(self): pass
	def build(self): pass
	def continue_build(self): self.build()
	def clean_build(self): pass

	def target(self): return self.packages().target()
	def prefix(self): return self.packages().prefix()
	def dest_dir(self): return self.packages().dest_dir()
	def gmake(self): return self.packages().gmake()
	def gsed(self): return self.packages().gsed()

class CommandPackageRecipe(BasePackageRecipe):
	def __init__(self, packages, dir, name):
		BasePackageRecipe.__init__(self, packages, name)
		self._dir = dir

	def version(self):
		try: return self._version
		except AttributeError:
			self._version = self._piped_execute('version').rstrip()
			if len(self._version) == 0: self._version = BasePackageRecipe.version(self)
		return self._version

	def description(self):		
		try: return self._description
		except AttributeError:
			self._description = self._piped_execute('description').rstrip()
			if len(self._description) == 0: self._description = BasePackageRecipe.description(self)
			self._description = self._description.split('\n')[0]
		return self._description

	def deps(self):
		try: return self._deps
		except AttributeError:
			deps = self._piped_execute('deps')
			self._deps = []
			if len(deps) != 0:
				for package_name in deps.rstrip().split(' '): self._deps.append(self.packages().find_package(package_name))
		return self._deps
	
	def download(self): self._execute('download')
	def unpack(self): self._execute('unpack')
	def build(self): self._execute('build')
	def continue_build(self): self._execute('continue-build')
	def clean_build(self): self._execute('clean-build')

	def _cmd(self): return os.path.join(self._dir, self.name())
	
	def _piped_execute(self, args):
		os.environ['DESTDIR'] = self.dest_dir()
		return piped_shell(self._cmd() + ' ' + args, verbose = False)
	
	def _execute(self, args):
		os.environ['DESTDIR'] = self.dest_dir()
		return shell(self._cmd() + ' ' + args)
	
class BuiltPackage(Package):
	def installed(self): return False
	def state_dir(self, state_name = None):
		state_dir = self.packages().build_state_dir(self)
		if state_name is None: return state_dir
		else: return os.path.join(state_dir, state_name)
	def state_exists(self, state_name):
			if state_name is None: path = self.state_dir()
			else: path = os.path.join(self.state_dir(), state_name)
			return os.path.exists(path)
	def make_state_dir(self, state_name = None):
			if state_name is None: path = self.state_dir()
			else: path = os.path.join(self.state_dir(), state_name)
			if not self.state_exists(path): os.mkdir(path)
	def read_state(self, state_name): return read_file(os.path.join(self.state_dir(), state_name))
	def write_state(self, state_name, text): write_file(os.path.join(self.state_dir(), state_name), text)
	def remove_state(self, state_name = None, verbose = False):
		if self.state_exists(state_name):
			if state_name is None: path = self.state_dir()
			else: path = os.path.join(self.state_dir(), state_name)
			if verbose: print 'removing', path
			if state_name is None or os.path.isdir(path): shutil.rmtree(path)
			else: os.unlink(path)
	def remove_state_dir_if_empty(self, state_name = None, verbose = False):
			if state_name is None: path = self.state_dir()
			else: path = os.path.join(self.state_dir(), state_name)
			try: os.rmdir(path)
			except OSError: pass # directory not empty
			else:
				if verbose: print 'removed ', path

	def version(self):
		try: return self._version
		except AttributeError:
			self._version = self.read_state('version')
			if len(self._version) != 0: self._version = self._version[0]
			else: self._version = Package.version(self)
		return self._version
	def description(self):
		try: return self._description
		except AttributeError:
			self._description = self.read_state('description')
			if len(self._description) != 0: self._description = self._description[0]
			else: self._description = Package.description(self)
		return self._description
	def deps(self):
		try: return self._deps
		except AttributeError:
			self._deps = []
			for dep in self.read_state('direct-dependencies'):
				dep = dep.split(' ')
				self._deps.append(BuiltDep(dep[0], dep[1]))
			return self._deps
	def recursed_deps(self):
		try: return self._recursed_deps
		except AttributeError:
			self._recursed_deps = []
			for dep in self.read_state('recursed-dependencies'):
				dep = dep.split(' ')
				self._recursed_deps.append(BuiltDep(dep[0], dep[1]))
			return self._recursed_deps

class InstalledPackage(BuiltPackage):
	def installed(self): return True
	def state_dir(self, state_name = None):
		state_dir = self.packages().install_state_dir(self)
		if state_name is None: return state_dir
		else: return os.path.join(state_dir, state_name)
	def auto(self):
		try: return self._auto
		except AttributeError: self._auto = self.read_state('installed')[0] == 'auto'
		return self._auto

def import_package(filename):
	path, name = os.path.split(filename)
	name, ext  = os.path.splitext(name)
	file, filename, data = imp.find_module(name, path)
	modname = 'mingw_package_' + name
	mod = imp.load_module(modname, file, filename, data)
	return mod

def shell(script, verbose = True):
	if verbose:
		print '# in dir', os.getcwd()
		print script
	result = os.system(script)
	if result != 0: raise OSError(result)
	
def piped_shell(script, verbose = True, raise_on_error = True, env = None):
	if verbose:
		print '# in dir', os.getcwd()
		print '# (piped)'
		print script
	p = subprocess.Popen(args = script, stdout = subprocess.PIPE, stderr = subprocess.PIPE, shell = True, env = env)
	if raise_on_error:
		out, err = p.communicate()
		if p.returncode != 0: raise OSError(str(p.returncode) + '\n' + err)
		return out
	else:
		out, err = p.communicate()
		return out, err, p.returncode

def write_file(file_name, text):
	f = file(file_name, 'w')
	try:
		if text is not None: f.write(text); f.write('\n')
	finally: f.close()

def read_file(file_name):
	result = []
	f = file(file_name)
	try:
		while True:
			l = f.readline().rstrip()
			if len(l) == 0: break
			result.append(l)
	finally: f.close()
	return result
	
if __name__ == '__main__':
	main()
