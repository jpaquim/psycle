#! /usr/bin/env scons

# This source is free software ; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation ; either version 2, or (at your option) any later version.
# copyright 2006-2007 johan boule <bohan@jabber.org>
# copyright 2006-2007 psycledelics http://psycle.pastnotecut.org

# To be able to import the packageneric package, we add the parent dir of this SConstruct file to the python path:
import sys, os ; sys.path.append(os.path.split(os.getcwd())[0]) # SCons always makes the dir of the SConstruct file the current dir.

# project

from packageneric.generic.scons.project import project
project = project(name = 'psycore')

# source package

from packageneric.generic.scons.source_package import source_package
from packageneric.generic.scons.version import version
source_package = source_package(project,
	name = project.name(),
	version = version(0, 0),
	description_file = 'README'
)

source_package.add_files(['README', 'NEWS', 'ChangeLog', 'AUTHORS', 'COPYING', 'TODO'])

# external packages

from packageneric.generic.scons.check.external_package import external_package as external_package_check
from packageneric.generic.scons.check.pkg_config import pkg_config as pkg_config_check
from packageneric.generic.scons.check.cxx_build import cxx_build as cxx_build_check

from packageneric.pool.stdcxx import stdcxx
stdcxx = stdcxx(project)

from packageneric.pool.dlfcn import dlfcn
dlfcn = dlfcn(project)

from packageneric.pool.pthread import pthread
pthread = pthread(project)

from packageneric.pool.microsoft_windows import microsoft_windows
microsoft_windows = microsoft_windows(project)

# modules

from packageneric.generic.scons.module import module as base_module

class module(base_module):
	def __init__(self):
		base_module.__init__(self, source_package,
			name = source_package.name(),
			version = source_package.version(),
			description = source_package.description(),
			dependencies = [stdcxx]
		)

	def dynamic_dependencies(self):
		if microsoft_windows.result(): self.add_dependency(microsoft_windows)
		else: self.add_dependencies([dlfcn, pthread])
		
		from packageneric.generic.scons.find import find
		self.add_sources(find(self.project(), 'src', [os.path.join(module.name(), '*.' + extension) for extension in ('cpp', 'c')]))
		self.add_headers(find(self.project(), 'src', [os.path.join(module.name(), '*.' + extension) for extension in ('hpp', 'h')]))
		self.contexes().source().compilers().cxx().paths().add(['src'])
module = module()

# pkg-config packages

from packageneric.generic.scons.pkg_config_package import pkg_config_package
pkg_config_package = pkg_config_package(project,
	name = module.name(),
	version = module.version(),
	description = module.description(),
	modules = [module]
)

project([pkg_config_package])

Return('pkg_config_package')
