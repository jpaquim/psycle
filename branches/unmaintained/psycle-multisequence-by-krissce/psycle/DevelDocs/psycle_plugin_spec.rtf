{\rtf1\ansi\ansicpg1252\uc1\deff0\stshfdbch0\stshfloch0\stshfhich0\stshfbi0\deflang3082\deflangfe3082{\fonttbl{\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f36\froman\fcharset238\fprq2 Times New Roman CE;}{\f37\froman\fcharset204\fprq2 Times New Roman Cyr;}{\f39\froman\fcharset161\fprq2 Times New Roman Greek;}{\f40\froman\fcharset162\fprq2 Times New Roman Tur;}
{\f41\froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\f42\froman\fcharset178\fprq2 Times New Roman (Arabic);}{\f43\froman\fcharset186\fprq2 Times New Roman Baltic;}{\f44\froman\fcharset163\fprq2 Times New Roman (Vietnamese);}
{\f46\fswiss\fcharset238\fprq2 Arial CE;}{\f47\fswiss\fcharset204\fprq2 Arial Cyr;}{\f49\fswiss\fcharset161\fprq2 Arial Greek;}{\f50\fswiss\fcharset162\fprq2 Arial Tur;}{\f51\fswiss\fcharset177\fprq2 Arial (Hebrew);}
{\f52\fswiss\fcharset178\fprq2 Arial (Arabic);}{\f53\fswiss\fcharset186\fprq2 Arial Baltic;}{\f54\fswiss\fcharset163\fprq2 Arial (Vietnamese);}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;
\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;
\red192\green192\blue192;}{\stylesheet{\ql \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs24\lang3082\langfe3082\cgrid\langnp3082\langfenp3082 \snext0 Normal;}{\*\cs10 \additive \ssemihidden Default Paragraph Font;}{\*
\ts11\tsrowd\trftsWidthB3\trpaddl108\trpaddr108\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3\trcbpat1\trcfpat1\tscellwidthfts0\tsvertalt\tsbrdrt\tsbrdrl\tsbrdrb\tsbrdrr\tsbrdrdgl\tsbrdrdgr\tsbrdrh\tsbrdrv 
\ql \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs20\lang1024\langfe1024\cgrid\langnp1024\langfenp1024 \snext11 \ssemihidden Normal Table;}}{\*\rsidtbl \rsid133365\rsid1385276\rsid5337300\rsid5571249\rsid6099697\rsid6105027
\rsid9831026\rsid10181532\rsid10230456\rsid12019719\rsid12730836\rsid13790153\rsid14437952\rsid14449127\rsid15739290\rsid16477168}{\*\generator Microsoft Word 10.0.4009;}{\info{\author Josep Ma}{\operator Josep Ma}{\creatim\yr2002\mo7\dy25\hr12\min23}
{\revtim\yr2002\mo7\dy25\hr14\min46}{\version7}{\edmins143}{\nofpages5}{\nofwords1528}{\nofchars8406}{\nofcharsws9915}{\vern16465}}\margl1701\margr1701\margt1417\margb1417 
\widowctrl\ftnbj\aenddoc\hyphhotz425\noxlattoyen\expshrtn\noultrlspc\dntblnsbdb\nospaceforul\hyphcaps0\horzdoc\dghspace120\dgvspace120\dghorigin1701\dgvorigin1984\dghshow0\dgvshow3\jcompress\viewkind4\viewscale80\nolnhtadjtbl\rsidroot6099697 \fet0\sectd 
\linex0\sectdefaultcl\sftnbj {\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl2\pnucltr\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl4
\pnlcltr\pnstart1\pnindent720\pnhang {\pntxta )}}{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl6\pnlcltr\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang {\pntxtb (}
{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 
\fs24\lang3082\langfe3082\cgrid\langnp3082\langfenp3082 {\f1\fs20\lang2057\langfe3082\langnp2057\insrsid12019719\charrsid6099697 Some sort of documentation of the psycle Machine interface.
\par 
\par Keywords
\par 
\par MI_VERSION\tab \tab \tab // Flag. Indicates the Machine Interface's version
\par 
\par SEQUENCER\tab \tab \tab // Flag. Indicates the type of the machine.
\par EFFECT\tab \tab \tab // SEQUENCER is NOT used.
\par GENERATOR\tab \tab \tab // GEN and EFF indicates if it is going to be used
\par \tab \tab \tab \tab // as a sound generat}{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid6099697 or (receiving notes) or as an 
\par \tab \tab \tab }{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid12019719\charrsid6099697 \tab // effect (receiving audio, and processing)
\par 
\par NOTE_MAX\tab \tab \tab // The MAX number for a note that Psycle understands: B-9
\par NOTE_NO\tab \tab \tab // Indicates the Number of the Note Off note.
\par NOTE_OFF\tab \tab \tab // }{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid12019719 I}{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid12019719\charrsid6099697 ndicate}{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid12019719 s}{
\f1\fs20\lang2057\langfe3082\langnp2057\insrsid12019719\charrsid6099697  the NULL state. (i.e. no note}{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid12019719  on this row}{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid12019719\charrsid6099697 )
\par 
\par MAX_BUFFER_LENGTH\tab // Indicates the MAX size of the sound buffer in Psycle. }{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid6099697 This 
\par \tab \tab }{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid12019719\charrsid6099697 \tab \tab // is the max size you will receive in the "Work" function.
\par \tab \tab \tab \tab // Indicates the number of SAMPLES (per channel)
\par 
\par }\pard \ql \fi-720\li720\ri0\nowidctlpar\faauto\rin0\lin720\itap0\pararsid6099697 {\f1\fs20\lang2057\langfe3082\langnp2057\insrsid12019719\charrsid6099697 MPF_NULL\tab \tab \tab // Parameter State of NULL. When used, the }{
\f1\fs20\lang2057\langfe3082\langnp2057\insrsid6099697\charrsid6099697 space }{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid6099697 for it is shown 
\par \tab \tab \tab \tab // but the }{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid12019719\charrsid6099697 knob is not. }{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid6099697 (Look at pooplog Synths for 
\par \tab \tab }{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid12019719\charrsid6099697 \tab \tab // a visual explanation)
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {\f1\fs20\lang2057\langfe3082\langnp2057\insrsid12019719\charrsid6099697 MPF_STATE\tab \tab \tab // The normal State of a Parameter. It is }{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid6099697 
shown and can be 
\par \tab }{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid12019719\charrsid6099697 \tab \tab \tab // used.
\par 
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0\pararsid1385276 {\f1\fs20\lang2057\langfe3082\langnp2057\insrsid1385276\charrsid16477168 #define DLL_EXPORTS extern "C" \{ \\
\par __declspec(dllexport) CMachineInfo const * __cdecl GetInfo() \\
\par \{ \\
\par \tab return &MacInfo; \\
\par \} \\
\par __declspec(dllexport) CMachineInterface * __cdecl CreateMachine() \\
\par }{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid1385276\charrsid1385276 \{ \\
\par \tab return new mi; \\
\par \} \\
\par \}}{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid1385276\charrsid1385276 
\par 
\par Quite descriptive. }{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid1385276 Plugin developer can use \'93DLL_EXPORTS\'94 keyword in his .cpp (after defining the parameters and the machine class) so that the host knows how to talk with the plugin.
\par Look at the names for the classes and structures. (MacInfo and mi)
\par Ideally, the Host could create multiple machines from the same Interface (calling multiple types the \'93CreateMachine()\'94 function), but currently it is not done. }{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid1385276\charrsid1385276 
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {\f1\fs20\lang2057\langfe3082\langnp2057\insrsid12019719 
\par }{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid1385276 
\par }{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid1385276\charrsid6099697 
\par }{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid12019719\charrsid6099697 Classes for the developer, to create a machine:
\par 
\par class CMachineParameter\tab // Class to contain the data related to a parameter.
\par \{
\par \tab char const *Name;\tab // (short) Name shown in the machine GUI.
\par \tab char const *Description;\tab // Long Description (currently unused)
\par \tab int MinValue;\tab \tab // The minimum value accepted for the parameter (int)
\par \tab int MaxValue;\tab \tab // The maximum value accepted for the parameter (int)
\par \tab int Flags;\tab \tab // See MPF_NULL and MPF_STATE.
\par \tab int DefValue;\tab \tab // default value for the parameter.
\par \};
\par }{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid12019719 
\par }{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid1385276 Parameters are generally declared this way in the .cpp file:
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0\pararsid1385276 {\f1\fs20\lang2057\langfe3082\langnp2057\insrsid1385276\charrsid1385276 CMachineParameter const paraOSC1wave = 
\par \{ 
\par \tab "OSC1 Wave",}{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid1385276 
\par }{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid1385276\charrsid1385276 \tab "OSC1 Wave",}{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid1385276 
\par \tab 0,
\par }{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid1385276\charrsid1385276 \tab 4,
\par \tab MPF_STATE,}{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid1385276 
\par }{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid1385276\charrsid1385276 \tab 1
\par \};}{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid1385276\charrsid1385276 
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {\f1\fs20\lang2057\langfe3082\langnp2057\insrsid1385276 
\par and then, unifiedin an array this way:
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0\pararsid1385276 {\f1\fs20\lang2057\langfe3082\langnp2057\insrsid1385276 
\par }{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid1385276\charrsid1385276 CMachineParameter const *pParameters[] = 
\par \{ 
\par \tab &paraOSC1wave,
\par \tab &paraOSC2wave,}{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid1385276 
\par \'85
\par \}}{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid1385276\charrsid1385276 
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {\f1\fs20\lang2057\langfe3082\langnp2057\insrsid1385276 
\par }{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid1385276\charrsid6099697 
\par }{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid12019719\charrsid6099697 class CMachineInfo\tab \tab // Class to contain the data related to the machine.
\par \{
\par \tab int Version;\tab \tab // Assign MI_VERSION to this.
\par \tab int Flags;}{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid6099697 \tab \tab // See GENERATOR and EFFECT
\par \tab int numParameters;\tab // Indicate the number of parameters in the array}{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid12019719\charrsid6099697 
\par \tab CMachineParameter const **Parameters;}{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid6099697  // Array of Parameters}{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid12019719\charrsid6099697 
\par \tab char const *Name;\tab }{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid6099697 // Full name of the machine (shown in the Dialog)}{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid12019719\charrsid6099697 \tab \tab \tab char }{
\f1\fs20\lang2057\langfe3082\langnp2057\insrsid6099697 const *ShortName;\tab // Short name (shown in the Machine View)}{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid12019719\charrsid6099697 
\par \tab char const *Author;}{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid6099697 \tab // Name of the author.
\par }{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid12019719\charrsid6099697 \tab cha}{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid6099697 r const *Command;\tab // Name for the Menu command accesible from the GUI.}{
\f1\fs20\lang2057\langfe3082\langnp2057\insrsid12019719\charrsid6099697 
\par \tab int numCols;}{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid6099697 \tab \tab // Number of colums to show the parameters in the GUI.}{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid12019719\charrsid6099697 
\par }{\f1\fs20\insrsid12019719 \};
\par }{\f1\fs20\insrsid6099697 
\par }{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid1385276\charrsid1385276 This is generally defined this way in the .cpp file:}{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid1385276 
\par }{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid1385276\charrsid1385276 
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0\pararsid1385276 {\f1\fs20\lang2057\langfe3082\langnp2057\insrsid1385276\charrsid1385276 CMachineInfo const MacInfo = 
\par \{
\par \tab MI_VERSION,\tab 
\par \tab GENERATOR,}{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid1385276 
\par }{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid1385276\charrsid1385276 \tab 27,
\par \tab pParameters,
\par \tab "Arguru Synth 2.2(Old)",
\par \tab "AS2.2",
\par \tab "Arguru and Gerwin",
\par \tab "Help",}{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid1385276 
\par }{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid1385276\charrsid1385276 \tab 4
\par \};}{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid1385276\charrsid1385276 
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {\f1\fs20\lang2057\langfe3082\langnp2057\insrsid1385276\charrsid1385276 
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0\pararsid5571249 {\f1\fs20\lang2057\langfe3082\langnp2057\insrsid5571249\charrsid5571249 class C}{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid5571249\charrsid5571249 f}{
\f1\fs20\lang2057\langfe3082\langnp2057\insrsid5571249\charrsid5571249 xCallback}{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid5571249 \tab \tab // Helper Class to communicate with the Host.}{
\f1\fs20\lang2057\langfe3082\langnp2057\insrsid5571249\charrsid5571249 
\par \{
\par \tab virtual void MessBox(char* ptxt,c}{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid5571249 har*caption,unsigned int type) 
\par \tab \tab // Asks the Host to show the Message in ptxt, with the caption caption, and with the }{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid5337300 
\par \tab \tab // }{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid5571249 button types of type.
\par }{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid5571249\charrsid5571249 
\par \tab virtual int CallbackFunc(int cbkID,int pa}{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid5571249 r1,int par2,int par3)
\par \tab \tab // Not used. Should be used to send other defined messages to the host. cbkID is }{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid5337300 
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0\pararsid133365 {\f1\fs20\lang2057\langfe3082\langnp2057\insrsid5337300 \tab \tab // }{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid5571249 the ID number for the message, and the parameters\rquote 
 meaning should be defined }{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid5337300 \tab \tab // }{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid5571249 for each ID.}{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid133365  
\par }\pard \ql \fi720\li720\ri0\nowidctlpar\faauto\rin0\lin720\itap0\pararsid133365 {\f1\fs20\lang2057\langfe3082\langnp2057\insrsid133365 // In fact, this function is quite useless, since you can 
\par // only use the return value to send data}{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid5571249\charrsid5571249 
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0\pararsid5571249 {\f1\fs20\lang2057\langfe3082\langnp2057\insrsid5571249 
\par }{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid5571249\charrsid5571249 \tab virtual float *GetWaveLDat}{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid5337300 a(int inst,int wave)}{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid5571249 
\par }\pard \ql \li1440\ri0\nowidctlpar\faauto\rin0\lin1440\itap0\pararsid5571249 {\f1\fs20\lang2057\langfe3082\langnp2057\insrsid5571249 // Not used. Should be used to get the }{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid5337300 pointer to the LEFT }{
\f1\fs20\lang2057\langfe3082\langnp2057\insrsid5571249 wave data of th}{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid5337300 e
\par // }{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid5571249 instrument/sample indicated. It would require a cbkID to get the length}{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid5337300 .
\par // For MONO samples, both GetWaveLData dn GetWaveRData should return the 
\par // same.
\par 
\par }\pard \ql \fi720\li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0\pararsid5337300 {\f1\fs20\lang2057\langfe3082\langnp2057\insrsid5571249\charrsid5571249 virtual float *GetWaveRData(int inst,int wave)}{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid5337300 

\par }\pard \ql \li1440\ri0\nowidctlpar\faauto\rin0\lin1440\itap0\pararsid5337300 {\f1\fs20\lang2057\langfe3082\langnp2057\insrsid5337300 // Not used. Should be used to get the pointer to the RIGHT wave data of the
\par // instrument/sample indicated. It would require a cbkID to get the length.
\par 
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0\pararsid5571249 {\f1\fs20\lang2057\langfe3082\langnp2057\insrsid5571249\charrsid5571249 \tab virtual i}{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid5337300 nt GetTickLength()}{
\f1\fs20\lang2057\langfe3082\langnp2057\insrsid5571249 
\par }{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid5337300 \tab \tab // Indicates the }{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid9831026 duration of the }{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid5337300 tick}{
\f1\fs20\lang2057\langfe3082\langnp2057\insrsid9831026 ,}{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid5337300  }{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid9831026 in samples. A tick is a line of the pattern.}{
\f1\fs20\lang2057\langfe3082\langnp2057\insrsid5337300 
\par 
\par }{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid5571249\charrsid5571249 \tab virtual int }{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid9831026 GetSamplingRate()}{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid5571249 
\par }{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid9831026 \tab \tab // Asks the host for the current sampling Rate.}{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid9831026\charrsid5571249 
\par }{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid5571249\charrsid5571249 \tab virtual int GetBPM()}{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid9831026 
\par \tab \tab // Asks the host for the current BPM
\par }{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid5571249\charrsid5571249 \tab virtual int GetTP}{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid9831026 B()}{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid5571249 
\par }{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid9831026 \tab \tab // Asks the host for the current Ticks Per Beat.}{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid9831026\charrsid5571249 
\par }{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid5571249\charrsid5571249 
\par }{\f1\fs20\insrsid5571249\charrsid5571249 \};}{\f1\fs20\insrsid6099697 
\par }{\f1\fs20\insrsid133365 
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0\pararsid133365 {\f1\fs20\lang2057\langfe3082\langnp2057\insrsid133365\charrsid133365 class C}{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid133365\charrsid133365 m}{
\f1\fs20\lang2057\langfe3082\langnp2057\insrsid133365\charrsid133365 achineInterface}{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid133365  // Class that contain the Machine functionalities.}{
\f1\fs20\lang2057\langfe3082\langnp2057\insrsid133365\charrsid133365 
\par \{
\par }\pard \ql \fi-1440\li2160\ri0\nowidctlpar\faauto\rin0\lin2160\itap0\pararsid13790153 {\f1\fs20\lang2057\langfe3082\langnp2057\insrsid133365 virtual void Init() \tab // Called }{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid13790153 by the host
 when the plugin is correctly loaded. 
\par }\pard \ql \li2880\ri0\nowidctlpar\faauto\rin0\lin2880\itap0\pararsid13790153 {\f1\fs20\lang2057\langfe3082\langnp2057\insrsid13790153 // After this, the parameters will be initialized/loaded.}{
\f1\fs20\lang2057\langfe3082\langnp2057\insrsid133365\charrsid133365 
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0\pararsid133365 {\f1\fs20\lang2057\langfe3082\langnp2057\insrsid13790153 \tab virtual void SequencerTick()}{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid133365 
\par }\pard \ql \li2880\ri0\nowidctlpar\faauto\rin0\lin2880\itap0\pararsid13790153 {\f1\fs20\lang2057\langfe3082\langnp2057\insrsid13790153 // Called by the host when playing, and the pattern has changed to // a new line
. It is useful for Tick controlled effects/parameters
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0\pararsid133365 {\f1\fs20\lang2057\langfe3082\langnp2057\insrsid133365\charrsid133365 \tab virtual void Par}{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid13790153 ameterTweak(int par, int val)}{
\f1\fs20\lang2057\langfe3082\langnp2057\insrsid133365 
\par }{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid13790153 \tab \tab \tab \tab // Called by the host when a parameter is changed, either via a twk
\par }\pard \ql \fi720\li2160\ri0\nowidctlpar\faauto\rin0\lin2160\itap0\pararsid13790153 {\f1\fs20\lang2057\langfe3082\langnp2057\insrsid13790153 // command or by the user, via the GUI / preset.}{
\f1\fs20\lang2057\langfe3082\langnp2057\insrsid13790153\charrsid133365 
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0\pararsid133365 {\f1\fs20\lang2057\langfe3082\langnp2057\insrsid133365\charrsid133365 
\par \tab virtual void Work(float *psamplesleft, float *psamplesright }{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid13790153 , int numsamples, int tracks)}{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid133365 
\par }{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid13790153 \tab \tab \tab \tab // Called by the host to ask the plugin the audio data.
\par }\pard \ql \fi720\li2160\ri0\nowidctlpar\faauto\rin0\lin2160\itap0\pararsid13790153 {\f1\fs20\lang2057\langfe3082\langnp2057\insrsid13790153 //  Psamplesleft is left buffer array. Psamplesright is the right one.
\par // numsamples indicate the valid number of samples in the array.
\par // The max number is defined by MAX_BUFFER_LENGTH.
\par // tracks indicate the number of tracks in the pattern.
\par // It is an obsolete parameter, but you might find a function for it.}{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid13790153\charrsid133365 
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0\pararsid133365 {\f1\fs20\lang2057\langfe3082\langnp2057\insrsid133365\charrsid133365 \tab 
\par \tab }{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid13790153 virtual void Stop()}{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid133365 
\par }{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid13790153 \tab \tab \tab \tab // Called by the host when the user has pressed the stop button.
\par \tab \tab \tab \tab // The plugin should stop all the audio data. (preferably with a fast
\par \tab \tab \tab \tab // decay).}{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid13790153\charrsid133365 
\par }{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid133365\charrsid133365 
\par \tab // Export / Import
\par \tab virt}{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid12730836 ual void PutData(byte* pData)}{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid133365 
\par }\pard \ql \li2880\ri0\nowidctlpar\faauto\rin0\lin2880\itap0\pararsid12730836 {\f1\fs20\lang2057\langfe3082\langnp2057\insrsid12730836 // Called by the host when it is loading a song/preset. You 
\par //should read the extra data that your plugin might require
\par // (names, extra parameters\'85)
\par // In the current host, it is called fater the parameters have been 
\par // This is probably the wrong approach, but if done the other way 
\par // around, it might cause your data to be corrupted, via calling 
\par // ParameterTweak. Discussion on this should be done.}{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid12730836\charrsid133365 
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0\pararsid133365 {\f1\fs20\lang2057\langfe3082\langnp2057\insrsid133365\charrsid133365 \tab virt}{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid12730836 ual void GetData(byte* pData) }{
\f1\fs20\lang2057\langfe3082\langnp2057\insrsid133365 
\par }\pard \ql \li2880\ri0\nowidctlpar\faauto\rin0\lin2880\itap0\pararsid12730836 {\f1\fs20\lang2057\langfe3082\langnp2057\insrsid12730836 // Called by the host when it is going to save a song/preset. You 
\par //should fill it with the extra data that your plugin might require
\par // (names, extra parameters\'85)}{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid12730836\charrsid133365 
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0\pararsid133365 {\f1\fs20\lang2057\langfe3082\langnp2057\insrsid133365\charrsid133365 \tab virtua}{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid12730836 l int GetDataSize() }{
\f1\fs20\lang2057\langfe3082\langnp2057\insrsid133365 
\par }{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid12730836 \tab \tab \tab \tab // Called by the host to get the size in bytes that it needs for your 
\par }\pard \ql \fi720\li2160\ri0\nowidctlpar\faauto\rin0\lin2160\itap0\pararsid12730836 {\f1\fs20\lang2057\langfe3082\langnp2057\insrsid12730836 // data.
\par // Current host doesn\rquote t save this to the file (when it should). This 
\par // causes problems when plugins are missing. A new fileformat 
\par // should fix this.
\par }{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid6105027 // Default return value is 0.}{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid6105027\charrsid133365 
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0\pararsid133365 {\f1\fs20\lang2057\langfe3082\langnp2057\insrsid133365\charrsid133365 \tab 
\par }{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid12730836 \tab virtual void Command()}{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid133365 
\par }{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid12730836 \tab \tab \tab \tab // This function will be called when the user presses the Menu 
\par \tab \tab \tab \tab // command in the GUI that you\rquote ve named at
\par }\pard \ql \fi720\li2160\ri0\nowidctlpar\faauto\rin0\lin2160\itap0\pararsid12730836 {\f1\fs20\lang2057\langfe3082\langnp2057\insrsid12730836 //  CMachineInfo->command}{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid12730836\charrsid133365 
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0\pararsid133365 {\f1\fs20\lang2057\langfe3082\langnp2057\insrsid133365\charrsid133365 
\par \tab virtual void MuteTrack(int const i) }{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid12730836 
\par \tab \tab \tab \tab // Not used. It would be called by the host to tell the plugin that the 
\par \tab \tab \tab \tab // indicated channel }{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid6105027 Has just changed the muted state. 
\par \tab \tab \tab \tab // Default state is unmuted.
\par }{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid133365\charrsid133365 \tab virtual bool }{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid6105027 IsTrackMuted(int const i) const}{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid133365 
\par }{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid6105027 \tab \tab \tab \tab // Not used. It would be called by the host to know if a track is 
\par \tab \tab \tab \tab // muted or not.
\par \tab \tab \tab \tab // Default return value is false
\par }{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid6105027\charrsid133365 
\par }{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid133365\charrsid133365 \tab virtual void MidiNote(int const channel, int const value, int const velocity) }{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid6105027 
\par }\pard \ql \fi720\li1440\ri0\nowidctlpar\faauto\rin0\lin1440\itap0\pararsid6105027 {\f1\fs20\lang2057\langfe3082\langnp2057\insrsid133365\charrsid133365  \tab /}{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid6105027 /
 Not used. It would be called by the Host to send a Midi 
\par \tab // NoteEvent to the plugin.}{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid6105027\charrsid133365 
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0\pararsid133365 {\f1\fs20\lang2057\langfe3082\langnp2057\insrsid133365\charrsid133365 \tab virtual }{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid6105027 void Event(dword const data)}{
\f1\fs20\lang2057\langfe3082\langnp2057\insrsid133365 
\par }{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid6105027 \tab \tab \tab \tab // Not used. It would be used by the host to send events to the
\par \tab \tab \tab \tab // plugin. The function format is quite limited so it might not be
\par \tab \tab \tab \tab // possible to use it correctly.
\par }{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid6105027\charrsid133365 
\par }{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid133365\charrsid133365 \tab virtual bool DescribeValue(char* txt,int const param, in}{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid6105027 t const value)}{
\f1\fs20\lang2057\langfe3082\langnp2057\insrsid133365 
\par }{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid6105027 \tab \tab \tab \tab // Called by the host to get the description for the parameter.
\par \tab \tab \tab \tab // * txt is a pointer where you should write your Description.
\par \tab \tab \tab \tab // The value is limited to 64chars.
\par \tab \tab \tab \tab // * param indicates the parameter number for which the host
\par \tab \tab \tab \tab // wants the description.
\par \tab \tab \tab \tab // * value indicates the value for which the host wants the 
\par \tab \tab \tab \tab // description. 
\par \tab \tab \tab \tab // return true if you have filled txt. False otherwise.}{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid6105027\charrsid133365 
\par }{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid133365\charrsid133365 
\par \tab virtual bool PlayWave(int const wave, int const }{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid6105027 note, float const volume)
\par }\pard \ql \li2880\ri0\nowidctlpar\faauto\rin0\lin2880\itap0\pararsid14437952 {\f1\fs20\lang2057\langfe3082\langnp2057\insrsid6105027 // Not used. (Probably never). It would }{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid14437952 
allow the host to ask the 
\par // plugin to play one of its }{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid15739290 (plugin) }{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid14437952 waves, at the specified note and}{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid15739290 
\par //}{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid14437952  volume.}{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid15739290  The return value indicates the success or failure of the}{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid6105027 
\par }{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid15739290 // operation. (default : false )
\par }\pard \ql \fi720\li2160\ri0\nowidctlpar\faauto\rin0\lin2160\itap0\pararsid14437952 {\f1\fs20\lang2057\langfe3082\langnp2057\insrsid15739290 // I believe it is an archaic function, that could be used in a 
\par // sampler, but right now, it has no use.}{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid6105027 
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0\pararsid133365 {\f1\fs20\lang2057\langfe3082\langnp2057\insrsid6105027 \tab \tab \tab \tab 
\par }{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid133365\charrsid133365 \tab virtual void SeqTick(int channel, int not}{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid6105027 e, int ins, int cmd, int val)}{
\f1\fs20\lang2057\langfe3082\langnp2057\insrsid133365\charrsid133365 
\par \tab }{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid6105027 \tab \tab \tab // Called by the host when a new}{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid14437952  tick with commands (note, tweak 
\par \tab \tab \tab \tab // or effect command) for the plugin comes.}{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid133365 
\par }{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid14437952 \tab \tab \tab \tab // }{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid12019719 * }{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid14437952 channel indicate the track where it is generated. }{
\f1\fs20\lang2057\langfe3082\langnp2057\insrsid12019719 
\par }\pard \ql \fi720\li2160\ri0\nowidctlpar\faauto\rin0\lin2160\itap0\pararsid12019719 {\f1\fs20\lang2057\langfe3082\langnp2057\insrsid12019719 // }{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid14437952 You should use this 
to identify the notes, although it is possible }{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid12019719 
\par // }{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid14437952 that the user plays more than one note at the same time in the }{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid12019719 
\par // }{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid14437952 same channel.
\par }{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid12019719 // * note : The note to be played, if any (see NOTE_OFF)
\par // * ins: The aux column. (called \'93ins\'94 for legacy reasons)
\par // * cmd : First two values of the effects column.
\par // * val : Last two values of the effects column.
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0\pararsid133365 {\f1\fs20\lang2057\langfe3082\langnp2057\insrsid14437952\charrsid133365 
\par }{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid133365\charrsid133365 \tab virtual void StopWave(}{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid14437952 ) }{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid133365\charrsid133365 
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0\pararsid14437952 {\f1\fs20\lang2057\langfe3082\langnp2057\insrsid14437952 \tab \tab \tab \tab // Not used. (Probably never). Counterpart of }{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid15739290 
Play}{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid14437952 Wave.
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0\pararsid133365 {\f1\fs20\lang2057\langfe3082\langnp2057\insrsid133365\charrsid133365 
\par \tab int *Vals;}{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid15739290 \tab \tab // Array of int values that indicate the parameter value.}{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid133365 
\par }{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid15739290 \tab \tab \tab \tab // It is used by the GUI and save functions to know their value.
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0\pararsid15739290 {\f1\fs20\lang2057\langfe3082\langnp2057\insrsid15739290 \tab \tab \tab \tab // It is created by the plugin in the constructor, and is modified 
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0\pararsid133365 {\f1\fs20\lang2057\langfe3082\langnp2057\insrsid15739290 \tab \tab \tab \tab // inside the ParameterTweak function by the plugin too.
\par }{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid15739290\charrsid133365 
\par }{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid133365\charrsid133365 \tab }{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid15739290\charrsid15739290 CFxCallback *pCB\tab // It is assigned by the Host after the plugin has been created.}{
\f1\fs20\lang2057\langfe3082\langnp2057\insrsid133365\charrsid15739290 
\par }{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid15739290 \tab \tab \tab \tab // The plugin might use it after that, to communicate with the
\par \tab \tab \tab \tab // host.}{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid16477168\charrsid15739290 
\par }{\f1\fs20\insrsid133365\charrsid133365 \};}{\f1\fs20\insrsid133365 
\par }{\f1\fs20\insrsid16477168 
\par }{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid1385276\charrsid1385276 The plugin heretates this class ( clas myplugin : public CmachineInterface}{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid1385276  )}{
\f1\fs20\lang2057\langfe3082\langnp2057\insrsid16477168\charrsid1385276 
\par }{\f1\fs20\lang2057\langfe3082\langnp2057\insrsid1385276\charrsid1385276 
\par }}