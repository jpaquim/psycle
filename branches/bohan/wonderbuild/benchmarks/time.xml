<?xml version='1.0' encoding='ascii' ?>
<?xml-stylesheet type='text/xsl' href='time.xsl'?>
<part caption='Benchmarks of various build tools' image='http://upload.wikimedia.org/wikipedia/commons/thumb/5/5d/Koch_curve.svg/180px-Koch_curve.svg.png' alt='koch curve'>
	<part caption='Versions'>
		<ul>
			<li>Scons version was 1.2.0</li>
			<li>Waf version was somewhere after 1.5.2 (svn rev 5274)</li>
			<li>Jam version was 2.5</li>
			<li>Autotools versions were autoconf 2.61, automake 1.10.1, libtool 1.5.26</li>
			<li>Make version was GNU make 3.81</li>
			<li>Tool chain versions were gcc 4.2.4, binutils 2.18.0</li>
		</ul>
	</part>
	<part caption='Notes'>
		The benchmarks were generated with this <a href='gen-bench'/> script.
		The script produces reproductible seeded-random setups.
		All these tests were run on the same gen-bench output,
		but each copied to its own directory to ensure they don't interfere with each others, i.e.
		<code>
			<pre>
	./gen-bench bench 50 100 15 5
	cp -R bench bench-make
	cp -R bench bench-jam
	cp -R bench bench-wonderbuild
	cp -R bench bench-waf
	cp -R bench bench-autotools
	cp -R bench bench-scons
			</pre>
		</code>
		This gen-bench invocation generates 10000 tiny interdependent C++ source and header files,
		to be built into 50 static libs.
		<br/><br/>
		The autotools generated only one makefile with everything (no recursive make invocation),
		and C++ dependencies were tracked with gcc while compiling; libtool was enabled, even for building static libs.
		<br/>
		The toy makefiles generated were recursive, and C++ dependencies were tracked using the makedepend X utility.
		<br/>
		Scons used a full-featured custom preprocessor to scan C++ dependencies.
		<br/>
		Waf used either gcc's generated deps as a side-effect of compilation (-MMD option),
		or a full-featured custom preprocessor.
		<br/>
		Wonderbuild used either gcc's generated deps as a side-effect of compilation (-MMD option),
		or a custom dumb include scanner, with no condition nor macro evaluation.
		<br/><br/>
		Despite a lot of efforts, i wasn't able to find out why jam is missing some header depencencies.
		While it's possible this could be fixed with a trivial change,
		i must point out that the documentation is rather confusing.
		Several people have reported problems on jam's mailing list, but it didn't help me.
		I decided to keep jam's benchmark results, since it's one of the fastest build tool,
		and it's missing only a few dependencies (precisely, it's rebuilding all libs but lib17 itself),
		so real numbers should actually be a bit higher, but not much.
		<br/><br/>
		Waf's parallel algorithm was set to "normal" (faster than "max parallel").
		<br/>
		Waf and scons were tuned to use file timestamps comparisons rather than md5 sums
		(for waf, in Utils.py, def h_file(filename): return str(os.stat(filename).st_mtime) ).
		<br/>
		Scons' automatic fetching of source files from SCMs was disabled,
		cache of implicit deps was enabled, built target cache was disabled,
		copying of source files to the build dir was disabled.
		<br/><br/>
		All tools were configured to use the same compiler flags (-g -O0 -Wall -DBENCH -DBENCH_LIB=x -Idir),
		and to produce static libs only.
		<br/>
		Configuration time was not counted (altough it's not really clear for scons).
		<br/><br/>
		All tests were run at least seven times (first run not counted) and the average taken
		(sorry, didn't measure incertitude).
		Initial builds for scons and autools were not run seven times as they take AGES.
		<br/>
		All tools were run with silent/quiet option and/or > /dev/null.
		<br/>
		All tests were run with 4 jobs on the same quad core system,
		ext2 filesystem on lvm/dmraid0 device, linux, gcc's C++ compiler.
		<br/>
		The command lines used to run the tests were the following
		(of course configurations were not rerun every time,
		see <a href='run-bench'/> for the actual run script):
		<code>
			<pre>
	# toy makefiles
	time make -C bench-make -r --jobs=4 --silent

	# jam
	time jam -j4 > /dev/null

	# wonderbuild
	(
		cd bench-wonderbuild &amp;&amp;
		time ../../wonderbuild.py --jobs=4 --silent
	)

	# waf
	(
		cd bench-waf &amp;&amp;
		../../waf/waf-light configure &amp;&amp;
		(time ../../waf/waf-light --jobs=4) > /dev/null
	)

	# autotools
	(
		cd bench-autotools &amp;&amp;
		autoreconf --install --symlink &amp;&amp;
		mkdir build-autotools &amp;&amp;
		cd build-autotools &amp;&amp;
		../configure --disable-shared CXXFLAGS= &amp;&amp;
		(time make -r --jobs=4 --silent) > /dev/null
	)

	# scons
	time SCONS_LIB_DIR=$(pwd)/../scons/src/engine \
		python ../scons/src/script/scons.py -C bench-scons --no-cache --jobs=4 --silent -Q
			</pre>
		</code>
		<part caption='What is wonderbuild?'>
			Wonderbuild is a work-in-progress and not ready for production.
			Currently, it aims at building C++ code only, it's not documented, and lacks some essential features.
			<br/>
			If you need a complete and fast build tool, i suggest you try <a href='http://code.google.com/p/waf'>waf</a>.
			<br/>
			However, if you have an insterest in developping build tools,
			you can try wonderbuild with this benchmark with:
			<code>
				<pre>
	svn co https://psycle.svn.sourceforge.net/svnroot/psycle/branches/bohan/wonderbuild --ignore-externals
	cd wonderbuild/benchmarks
	./gen-bench bench 50 100 15 5
	cd bench
	time ../../wonderbuild.py --cxx-pic=no --silent # initial full build
	time ../../wonderbuild.py --cxx-pic=no --silent # no-op rebuild
	touch lib_17/class_17.h &amp;&amp; time ../../wonderbuild.py --cxx-pic=no --silent # small partial rebuild
	touch lib_17/*.h &amp;&amp; time ../../wonderbuild.py --cxx-pic=no --silent # big partial rebuild
				</pre>
			</code>
		</part>
	</part>
	<part caption='Results'>
		<part caption='Initial full build'>
			<bars>
				<bar name='wonderbuild'   value=' 28.2s' width=' 28'>using batch compilation and gcc deps</bar>
				<bar name='toy makefiles' value=' 34.1s' width=' 34'/>
				<bar name='jam'           value=' 35.6s' width=' 36'><span style='color: red'>missed header deps!</span></bar>
				<bar name='wonderbuild'   value=' 35.8s' width=' 36'>using gcc deps</bar>
				<bar name='wonderbuild'   value=' 38.5s' width=' 38'>using dumb deps</bar>
				<bar name='waf'           value=' 43.4s' width=' 43'>using gcc deps</bar>
				<bar name='waf'           value=' 46.1s' width=' 46'>using waf cpp</bar>
				<bar name='scons'         value='131.0s' width='131'/>
				<bar name='autotools'     value='188.0s' width='188'/>
			</bars>
		</part>
		<part caption='Big partial rebuild'>
			After touch lib_17/*.hpp => rebuild of 585 object files from c++ and 33 static libs
			<br/><br/>
			<bars>
				<bar name='wonderbuild'   value=' 4.13s' width=' 41'>using batch compilation and gcc deps</bar>
				<bar name='jam'           value=' 4.25s' width=' 43'><span style='color: red'>missed header deps!</span></bar>
				<bar name='toy makefiles' value=' 4.81s' width=' 48'/>
				<bar name='wonderbuild'   value=' 5.21s' width=' 52'>using gcc deps</bar>
				<bar name='wonderbuild'   value=' 5.56s' width=' 56'>using dumb deps</bar>
				<bar name='waf'           value=' 6.75s' width=' 68'>using gcc deps</bar>
				<bar name='waf'           value=' 6.89s' width=' 69'>using waf cpp</bar>
				<bar name='autotools'     value='29.64s' width='296'/>
				<bar name='scons'         value='39.58s' width='396'/>
			</bars>
		</part>
		<part caption='Small partial rebuild'>
			After touch lib_17/class_17.hpp => rebuild of 26 object files from c++ and 8 static libs
			<br/><br/>
			<bars>
				<bar name='jam'           value=' 0.81s' width='  81'><span style='color: red'>missed header deps!</span></bar>
				<bar name='toy makefiles' value=' 1.01s' width=' 101'/>
				<bar name='wonderbuild'   value=' 1.04s' width=' 104'>using batch compilation and gcc deps</bar>
				<bar name='wonderbuild'   value=' 1.21s' width=' 121'>using gcc deps</bar>
				<bar name='wonderbuild'   value=' 1.29s' width=' 129'>using dump deps</bar>
				<bar name='waf'           value=' 1.92s' width=' 192'>same with gcc deps and waf cpp</bar>
				<bar name='autotools'     value=' 4.63s' width=' 463'/>
				<bar name='scons'         value='24.37s' width='2437'/>
			</bars>
		</part>
		<part caption='No-op rebuild'>
			<bars>
				<bar name='jam'           value=' 0.71s' width='  71'><span style='color: red'>missed header deps!</span></bar>
				<bar name='wonderbuild'   value=' 0.76s' width='  76'>using batch compilation and gcc deps</bar>
				<bar name='toy makefiles' value=' 0.79s' width='  79'/>
				<bar name='wonderbuild'   value=' 0.98s' width='  98'>using gcc deps</bar>
				<bar name='wonderbuild'   value=' 1.05s' width=' 105'>using dumb deps</bar>
				<bar name='waf'           value=' 1.20s' width=' 120'>same with gcc deps and waf cpp</bar>
				<bar name='autotools'     value=' 2.05s' width=' 205'/>
				<bar name='scons'         value='23.25s' width='2325'/>
			</bars>
		</part>
	</part>
</part>
