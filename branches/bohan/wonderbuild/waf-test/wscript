#! /usr/bin/env waf

import os, Options, Build

APPNAME = 'waf-test'
VERSION = '1.2.3'

srcdir = '.'
blddir = '++build'

def init(): pass

def set_options(opt):
	opt.tool_options('compiler_cxx')

def configure(conf):
	conf.check_tool('compiler_cxx')
	
	#print conf.env.DEST_OS, conf.env.DEST_BINFMT, conf.env.DEST_CPU

def build(bld):

	#for f in bld.srcnode.find_iter(in_pat = '*', dir=True): print str(f)
	#for f in bld.srcnode.ant_glob('**', src=False, bld=False, dir=True, flat=False): print str(f)
	
	#for f in bld.srcnode.find_iter(in_pat = '*.cpp', dir=True): print str(f)
	#for f in bld.srcnode.ant_glob('**/*.cpp', dir=True, flat=False): print str(f)

	src_dirs = set(['src'])
	
	# get the dirs generated by genbench
	bld.rescan(bld.path)
	for d in bld.cache_dir_contents[bld.path.id]:
		if d.startswith('src-'): src_dirs.add(d)

	for src in src_dirs:
		for type in ('static', 'shared'):
			bld.lib(
				target = 'foo-' + src,
				types = (type,),
				sources = [src + '/foo'],
				includes = [src],
				defines = ['FOO=' + (type == 'shared' and '1' or '-1')]
			)
			bld.program(
				target = 'main-' + src + '-' + type,
				types = (type,),
				sources = [src + '/main'],
				includes = [src],
				defines = ['FOO=' + (type == 'shared' and '0' or '-1')],
				uselib_local = ['foo-' + src]
			)
		bld.install_headers(
			includes = [src],
			headers = [src + '/bar']
		)
	
def shutdown(): pass

def program(bld, target, types = ('static', 'shared',), sources = None, includes = None, defines = None, uselib_local = None, uselib = None):
	module(bld, target, 'program', types, sources, includes, None, defines, uselib_local)
Build.BuildContext.program = program

def lib(bld, target, types = ('static', 'shared'), sources = None, includes = None, headers = None, defines = None, uselib_local = None, uselib = None):
	module(bld, target, 'lib', types, sources, includes, headers, defines, uselib_local)
Build.BuildContext.lib = lib

def module(bld, target, kind, types = ('static', 'shared'), sources = None, includes = None, headers = None, defines = None, uselib_local = None, uselib = None):
	for type in types:
		if kind == 'program':
			obj = bld.new_task_gen('cxx', 'program')
			obj.target = target
			if len(types) > 1: obj.target += '-' + type
		else:
			obj = bld.new_task_gen('cxx', {'static': 'staticlib', 'shared': 'shlib'}[type])
			obj.target = target
			if type == 'shared':
				global VERSION
				obj.vnum = VERSION
		obj.name = target + '-' + type
		obj.source = []
		for s in sources:
			node = bld.path.find_dir(s) # is it a dir?
			if node:
				for f in node.find_iter(in_pat = ['*.cpp']): obj.source.append(f.relpath_gen(bld.path))
			else: obj.source.append(s)
		obj.includes = includes
		if defines is not None: obj.defines = defines
		if type != 'static': obj.rpath = '\\$ORIGIN:\\$ORIGIN/../lib'
		if uselib_local: obj.uselib_local = [u + '-' + type for u in uselib_local]
		if uselib: obj.uselib = [u + '-' + type for u in uselib]
	if kind != 'program':
		if headers is None:
			headers = []
			# we search headers in source dirs
			for s in sources:
				node = bld.path.find_dir(s) # is it a dir?
				if not node:
					node = bld.path.find_resource(s) # is it a file?
					if node: node = node.parent
				if not node: print >> std.err, 'not found:', s
				if node:
					node.parent # we add headers from where the source file located
					headers.append(node.relpath_gen(bld.path))
		install_headers(bld, includes, headers)
Build.BuildContext.module = module

def install_headers(bld, includes, headers):
	headers_filenames = []
	for h in headers:
		#print 'header search:', h
		node = bld.path.find_dir(h) # is it a dir ?
		if node:
			for pat in '*.hpp', '*.h':
				for f in node.find_iter(in_pat = ['*.hpp']): headers_filenames.append(f.relpath_gen(bld.path))
		else: headers_filenames.append(h)
	#print 'found header files:', headers_filenames
	global APPNAME, VERSION
	for i in includes:
		for h in headers_filenames:
			if h.startswith(i):
				bld.install_as('${PREFIX}/include/' + APPNAME + '-' + VERSION + '/' + h[(len(i)):], h)
Build.BuildContext.install_headers = install_headers
