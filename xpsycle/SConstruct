#! /usr/bin/env scons

# This source is free software ; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation ; either version 2, or (at your option) any later version.
# copyright 2006-2007 johan boule <bohan@jabber.org>
# copyright 2006-2007 psycledelics http://psycle.pastnotecut.org

# To be able to import the packageneric package, we add the parent dir of this SConstruct file to the python path:
import sys, os, os.path
sys.path.append(os.path.split(os.getcwd())[0]) # SCons always makes the dir of the SConstruct file the current dir.

# project

from packageneric.generic.scons.project import project
project = project(name = 'xpsycle')

# authors/maintainers/uploaders

from packageneric.generic.scons.person import person
prodos = person('Stefan NattKemper', 'natti__@user.sourceforge.net')
bohan = person('Johan Boule', 'bohan.packageneric@retropaganda.info')

# source package

from packageneric.generic.scons.source_package import source_package
from packageneric.generic.scons.version import version
source_package = source_package(project,
	name = 'xpsycle',
	version = version(0, 0),
	#description_file = 'README',
	description = 'modular music creation studio',
	long_description = """\
psycle is a modular music creation studio ...
"""
)

source_package.add_files(['README', 'NEWS', 'ChangeLog', 'AUTHORS', 'COPYING', 'TODO'])

# external packages

from packageneric.generic.scons.check.external_package import external_package as external_package_check
from packageneric.generic.scons.check.pkg_config import pkg_config as pkg_config_check
from packageneric.generic.scons.check.cxx_build import cxx_build as cxx_build_check

psycore = os.path.join('..', 'psycore', 'SConstruct')
if os.path.exists(psycore): psycore = project.subscript(psycore).local_package()
else:
	psycore = external_package_check(project, name = 'psycore',
		url = 'http://psycle.sourceforge.net',
		distribution_packages = {
			'debian and ubuntu': 'lib-psycore-0-dev (>= 0)',
			'gentoo': '...',
			'fedora': '...',
			'cygwin': '...'
		},
		dependencies = [
			pkg_config_check(project, name = 'psycore-0 >= 0')
		]
	)

ngrs = os.path.join('..', 'ngrs', 'SConstruct')
if os.path.exists(ngrs): ngrs = project.subscript(ngrs).local_package()
else:
	ngrs = external_package_check(project, name = 'ngrs',
		url = 'http://psycle.sourceforge.net',
		distribution_packages = {
			'debian and ubuntu': 'lib-ngrs-0-dev (>= 0)',
			'gentoo': '...',
			'fedora': '...',
			'cygwin': '...'
		},
		dependencies = [
			pkg_config_check(project, name = 'ngrs-0 >= 0')
		]
	)

netaudio = external_package_check(project, name = 'network audio system',
	url = 'http://google.ch "network audio system" nas', # todo check the url
	distribution_packages = {
		'debian and ubuntu': 'libaudio-dev (>= 1.8)', # note that debian package 1.8 corresponds to header version 2.3.0
		'gentoo': '...',
		'fedora': '...',
		'cygwin': '...'
	},
	dependencies = [
		cxx_build_check(project, name = 'netaudio', libraries = ['audio'], source_text = \
			"""\
				#include <audio/audiolib.h>
				#if AudioLibraryVersionMajor < 2 || AudioLibraryVersionMajor == 2 && AudioLibraryVersionMinor < 3
					#error network audio system version too old
				#endif
				void netaudio()
				{
					// todo do something with it for a complete check
				}
			"""
		)
	]
)

esound = external_package_check(project, name = 'esound',
	url = 'http://google.ch esound', # todo check the url
	distribution_packages = {
		'debian and ubuntu': 'libesd0-dev (>= 0.2.34)',
		'gentoo': '...',
		'fedora': '...',
		'cygwin': '...'
	},
	dependencies = [
		pkg_config_check(project, name = 'esound >= 0.2.34')
	]
)

jack = external_package_check(project, name = 'jack',
	url = 'http://jackaudio.net or http://linuxaudio.org ?', # todo check this url
	distribution_packages = {
		'debian and ubuntu': 'libjack-dev (>= 0.80) | libjack0.100.0-dev (>= 0.100)',
		'gentoo': '...',
		'fedora': '...',
		'cygwin': '...'
	},
	dependencies = [
		pkg_config_check(project, name = 'jack >= 0.80')
	]
)

alsa = external_package_check(project, name = 'alsa',
	url = 'http://alsa.org or http://linuxaudio.org ?', # todo check this url
	distribution_packages = {
		'debian and ubuntu': 'libasound-dev (>= 1.0.11) | libasound2-dev (>= 1.0.11)',
		'gentoo': '...',
		'fedora': '...',
		'cygwin': '...'
	},
	dependencies = [
		pkg_config_check(project, name = 'alsa >= 1.0.11')
	]
)

gstreamer = external_package_check(project, name = 'gstreamer',
	url = 'http://gstreamer.net',
	distribution_packages = {
		'debian and ubuntu': 'libgstreamer0.10-dev (>= 0.10), libgstreamer-plugins-base0.10-dev (>= 0.10)',
		'gentoo': '...',
		'fedora': '...',
		'cygwin': '...'
	},
	dependencies = [
		pkg_config_check(project, name = 'gstreamer-0.10 >= 0.10 gstreamer-plugins-base-0.10 >= 0.10')
	]
)

microsoft_direct_sound = external_package_check(project, name = 'microsoft direct sound',
	url = 'http://msdn.microsoft.com',
	distribution_packages = {'microsoft (maybe windows updates?)': 'direct sound'},
	dependencies = [
		cxx_build_check(project, name = 'microsoft direct sound', libraries = ['dsound'], source_text = \
			"""\
				#include <dsound.h>
				#if DIRECTSOUND_VERSION < 0x0900  /* Version 9.0 */
					#error microsoft direct sound version too old
				#endif
				void microsoft_direct_sound()
				{
					// todo do something with it for a complete check
				}
			"""
		)
	]
)

microsoft_mme = external_package_check(project, name = 'microsoft mme',
	url = 'http://msdn.microsoft.com',
	distribution_packages = {'microsoft (maybe windows updates?)': 'multimedia extension'},
	dependencies = [
		cxx_build_check(project, name = 'microsoft mme', libraries = ['winmm'], source_text = \
			"""\
				#include <windows.h>
				#include <mmsystem.h>
				void microsoft_mme()
				{
					//WaveOutOpen(...); // todo do something with it for a complete check
				}
			"""
		)
	]
)

# todo or not todo, asio is not "designed" to be (re)distributed
steinberg_asio = external_package_check(project, name = 'steinberg asio',
	url = 'http://steinberg.de',
	distribution_packages = {'microsoft (distributed by steinberg => no windows updates)': 'steinberg asio'},
	dependencies = [
		cxx_build_check(project, name = 'steinberg asio', libraries = ['asio-is-not-even-a-library'], source_text = \
			"""\
				#include <a-bunch-of-fucked-up-headers-and-even-source-files>
				void steinberg_asio()
				{
					// todo do something with it for a complete check
				}
			"""
		)
	]
)

ladspa = external_package_check(project, name = 'ladspa',
	url = 'http://ladspa.org or http://linuxaudio.org ?',
	distribution_packages = {
		'debian and ubuntu': 'ladspa-dev (>= 1.1) | ladspa-sdk-dev (>= 1.1) | ladspa-sdk (>= 1.1)',
		'gentoo': '...',
		'fedora': '...',
		'cygwin': '...'
	},
	dependencies = [
		cxx_build_check(project, name = 'ladspa >= 1.1', libraries = [], source_text = \
			"""\
				#include <ladspa.h>
				#if LADSPA_VERSION_MAJOR < 1 || LADSPA_VERSION_MAJOR == 1 && LADSPA_VERSION_MINOR < 1
					#error ladspa version too old
				#endif
				void ladspa()
				{
					// todo do something with it for a complete check
				}
			"""
		)
	]
)

# modules

from packageneric.generic.scons.module import module
class xpsycle_module(module):
	def __init__(self):
		module.__init__(self, source_package,
			name = 'xpsycle-' + str(source_package.version().major()),
			version = source_package.version(),
			description = source_package.description(),
			target_type = module.target_types.program,
			dependencies = [psycore, ngrs]
		)
		
	def dynamic_dependencies(self):
		got_audio = False # flag indicating whether we have found at least one audio output lib
		
		if netaudio.result(): self.add_dependency(netaudio) ; got_audio = True
		else: self.contexes().build().compilers().cxx().defines().add({'XPSYCLE__NO_NETAUDIO': 1})
		#self.contexes().build().compilers().cxx().defines().substituted_file(os.path.join('src', 'xpsycle', 'netaudio_conditional_build.h.in'))
		
		if esound.result(): self.add_dependency(esound) ; got_audio = True
		else: self.contexes().build().compilers().cxx().defines().add({'XPSYCLE__NO_ESOUND': 1})
		#self.contexes().build().compilers().cxx().defines().substituted_file(os.path.join('src', 'xpsycle', 'esound_conditional_build.h.in'))

		if jack.result(): self.add_dependency(jack) ; got_audio = True
		else: self.contexes().build().compilers().cxx().defines().add({'XPSYCLE__NO_JACK': 1})
		#self.contexes().build().compilers().cxx().defines().substituted_file(os.path.join('src', 'xpsycle', 'jack_conditional_build.h.in'))
		
		if alsa.result(): self.add_dependency(alsa) ; got_audio = True
		else: self.contexes().build().compilers().cxx().defines().add({'XPSYCLE__NO_ALSA': 1})
		#self.contexes().build().compilers().cxx().defines().substituted_file(os.path.join('src', 'xpsycle', 'alsa_conditional_build.h.in'))
		
		if microsoft_direct_sound.result(): self.add_dependency(microsoft_direct_sound) ; got_audio = True
		else: self.contexes().build().compilers().cxx().defines().add({'XPSYCLE__NO_MICROSOFT_DIRECT_SOUND': 1})
		#self.contexes().build().compilers().cxx().defines().substituted_file(os.path.join('src', 'xpsycle', 'microsoft_direct_sound_conditional_build.h.in'))

		if microsoft_mme.result(): self.add_dependency(microsoft_mme) ; got_audio = True
		else: self.contexes().build().compilers().cxx().defines().add({'XPSYCLE__NO_MICROSOFT_MME': 1})
		#self.contexes().build().compilers().cxx().defines().substituted_file(os.path.join('src', 'xpsycle', 'microsoft_mme_conditional_build.h.in'))

		if steinberg_asio.result(): self.add_dependency(steinberg_asio) ; got_audio = True
		else: self.contexes().build().compilers().cxx().defines().add({'XPSYCLE__NO_STEINBERG_ASIO': 1})
		#self.contexes().build().compilers().cxx().defines().substituted_file(os.path.join('src', 'xpsycle', 'steinberg_asio_conditional_build.h.in'))
		
		if not got_audio:
			self.project().warning(
				'None of the supported audio output libraries was found!\n' \
				'You ought to install at least one of the following packages:\n' +
				''.join([str(package) for package in netaudio, esound, jack, alsa, gstreamer, microsoft_direct_sound, microsoft_mme, steinberg_asio])
			)

		if ladspa.result(): self.add_dependency(ladspa)
		else: self.contexes().build().compilers().cxx().defines().add({'XPSYCLE__NO_LADSPA': 1})
		#self.contexes().build().compilers().cxx().defines().substituted_file(os.path.join('src', 'xpsycle', 'ladspa_conditional_build.h.in'))

		from packageneric.generic.scons.find import find
		self.add_sources(find(self.project(), 'src', [os.path.join('xpsycle', '*.' + extension) for extension in ('cpp', 'c')]))
		self.add_headers(find(self.project(), 'src', [os.path.join('xpsycle', '*.' + extension) for extension in ('hpp', 'h')]))
		self.contexes().source().compilers().cxx().paths().add(['src'])
xpsycle_module = xpsycle_module()


if False:
	# debian

	from packageneric.generic.scons.debian_package import debian_package

	xpsycle_runtime = debian_package(project,
		name = 'xpsycle-' + str(source_package.version().major()),
		section = 'audio',
		description = xpsycle_module.description(),
		long_description = 'This package contains the runtime program.'
	)
	#ngrs_runtime.add_files(ngrs_package.binaries())

	xpsycle_doc = debian_package(project,
		name = xpsycle_runtime.name() + '-doc',
		section = 'doc',
		architecture = 'all',
		description = xpsycle_module.description(),
		long_description = 'This package contains the documentation.'
	)

	from packageneric.generic.scons.debian import debian
	debian = debian(source_package,
		maintainer = prodos,
		uploaders = [prodos, bohan],
		binary_packages = [xpsycle_runtime, xpsycle_doc],
	)


if False:
	plugin_modules = os.path.join('..', 'xpsycle.plugins', 'SConstruct')
	if os.path.exists(plugin_modules): plugin_modules = project.subscript(plugin_modules)
	else: plugin_modules = []
else: plugin_modules = []

project([xpsycle_module] + plugin_modules)
