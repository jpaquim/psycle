<?xml version='1.0' encoding='ascii' ?>
<?xml-stylesheet type='text/xsl' href='time.xsl'?>
<part caption='Benchmarks of various C++ build tools' image='http://upload.wikimedia.org/wikipedia/commons/thumb/5/5d/Koch_curve.svg/180px-Koch_curve.svg.png' alt='koch curve'>
	<part caption='Results'>
		<part caption='Times on a fast machine'>
			All tests were run with 4 jobs on the same quad core system,
			ext2 filesystem on a 4-disk lvm/dmraid0 device, linux 2.6.24, gcc's C++ compiler.
			<part caption='Tool versions'>
				<ul>
					<li>Scons version was 1.2.0</li>
					<li>Waf version was somewhere after 1.5.2 (svn rev 5358)</li>
					<li>Python version was 2.5.2</li>
					<li>Jam version was 2.5</li>
					<li>Autotools versions were autoconf 2.61, automake 1.10.1, libtool 1.5.26</li>
					<li>Make version was gnu make 3.81</li>
					<li>Shell was dash (not bash) version 0.5.4</li>
					<li>Compiler tool chain versions were gcc 4.2.4, binutils 2.18.0</li>
				</ul>
			</part>
			<part caption='Initial full build'>
				<bars scale='5'>
					<bar-section>Using batch compilation</bar-section>
					<bar name='wonderbuild'   value=' 29.4'>gcc deps (same with 1 batch/lib or max &lt;jobs> batches/lib)</bar>
					<bar name='waf'           value=' 38.2'>max 50 srcs/batch, waf cpp, shutil</bar>
					<bar name='waf'           value=' 39.7'>max 50 srcs/batch, waf cpp, mv</bar>
					<bar-section>Not using batch compilation</bar-section>
					<bar name='toy makefiles' value=' 34.1'>(recursive)</bar>
					<bar name='jam'           value=' 35.6'><span style='color: red'>missed header deps!</span></bar>
					<bar name='waf'           value=' 42.8'>gcc deps</bar>
					<bar name='waf'           value=' 45.6'>waf cpp</bar>
					<bar name='scons'         value='131.0'>with fast tuning options</bar>
					<bar name='scons'         value='137.7'>with default options</bar>
					<bar name='autotools'     value='188.0'>(non recursive)</bar>
				</bars>
			</part>
			<part caption='Big partial rebuild'>
				After touch lib_17/*.hpp => rebuild of 585 object files from c++ and 33 static libs
				<br/><br/>
				<bars scale='20'>
					<bar-section>Using batch compilation</bar-section>
					<bar name='wonderbuild'   value=' 4.28'>gcc deps (same with 1 batch/lib or max &lt;jobs> batches/lib)</bar>
					<bar name='waf'           value=' 6.42'>max 50 srcs/batch, waf cpp, shutil</bar>
					<bar name='waf'           value=' 6.64'>max 50 srcs/batch, waf cpp, mv</bar>
					<bar-section>Not using batch compilation</bar-section>
					<bar name='jam'           value=' 4.25'><span style='color: red'>missed header deps!</span></bar>
					<bar name='toy makefiles' value=' 4.81'>(recursive)</bar>
					<bar name='waf'           value=' 6.75'>gcc deps</bar>
					<bar name='waf'           value=' 6.89'>waf cpp</bar>
					<bar name='autotools'     value='29.64'>(non recursive)</bar>
					<bar name='scons'         value='39.58'>(with fast tuning options)</bar>
				</bars>
			</part>
			<part caption='Small partial rebuild'>
				After touch lib_17/class_17.hpp => rebuild of 26 object files from c++ and 8 static libs
				<br/><br/>
				<bars scale='60'>
					<bar-section>Using batch compilation</bar-section>
					<bar name='wonderbuild'   value=' 0.87'>gcc deps (same with 1 batch/lib or max &lt;jobs> batches/lib)</bar>
					<bar name='waf'           value=' 1.90'>max 50 srcs/batch, waf cpp (same with shutil or mv)</bar>
					<bar-section>Not using batch compilation</bar-section>
					<bar name='jam'           value=' 0.81'><span style='color: red'>missed header deps!</span></bar>
					<bar name='toy makefiles' value=' 1.01'>(recursive)</bar>
					<bar name='waf'           value=' 1.92'>(same with gcc deps and waf cpp)</bar>
					<bar name='autotools'     value=' 4.63'>(non recursive)</bar>
					<bar name='scons'         value='24.37'>(with fast tuning options)</bar>
				</bars>
			</part>
			<part caption='No-op rebuild'>
				<bars scale='60'>
					<bar name='wonderbuild'   value=' 0.69'/>
					<bar name='jam'           value=' 0.71'><span style='color: red'>missed header deps!</span></bar>
					<bar name='toy makefiles' value=' 0.79'>(recursive)</bar>
					<bar name='waf'           value=' 1.15'/>
					<bar name='autotools'     value=' 2.05'>(non recursive)</bar>
					<bar name='scons'         value='23.25'>with fast tuning options</bar>
					<bar name='scons'         value='35.97'>with default options</bar>
				</bars>
			</part>
		</part>
		<part caption='Times on a slower machine'>
			All tests were run with 1 job on the same system, linux 2.6.24, gcc's C++ compiler.
			<part caption='Tool versions'>
				<ul>
					<li>Scons version was 1.2.0</li>
					<li>Waf version was somewhere after 1.5.2 (svn rev 5345)</li>
					<li>Python version was 2.4.4</li>
					<li>Jam version was 2.5</li>
					<li>Autotools versions were autoconf 2.61, automake 1.10, libtool 1.5.22</li>
					<li>Make version was gnu make 3.81</li>
					<li>Shell was bash version 3.1.17</li>
					<li>Compiler tool chain versions were gcc 4.1.2, binutils 2.17</li>
				</ul>
			</part>
			<part caption='Initial full build'>
				<bars scale='0.7'>
					<bar-section>Using batch compilation</bar-section>
					<bar name='wonderbuild'   value=' 168'>gcc deps</bar>
					<bar-section>Not using batch compilation</bar-section>
					<bar name='toy makefiles' value=' 189'>(recursive)</bar>
					<bar name='jam'           value=' 203'><span style='color: red'>missed header deps!</span></bar>
					<bar name='waf'           value=' 251'>waf cpp</bar>
					<bar name='scons'         value=' 445'/>
					<bar name='autotools'     value='1336'>(non recursive)</bar>
				</bars>
			</part>
			<part caption='Big partial rebuild'>
				After touch lib_17/*.hpp => rebuild of 585 object files from c++ and 33 static libs
				<br/><br/>
				<bars scale='4.5'>
					<bar-section>Using batch compilation</bar-section>
					<bar name='wonderbuild'   value=' 21.9'>gcc deps</bar>
					<bar-section>Not using batch compilation</bar-section>
					<bar name='jam'           value=' 22.6'><span style='color: red'>missed header deps!</span></bar>
					<bar name='toy makefiles' value=' 24.4'>(recursive)</bar>
					<bar name='waf'           value=' 36.2'>waf cpp</bar>
					<bar name='scons'         value='122.8'/>
					<bar name='autotools'     value='203.8'>(non recursive)</bar>
				</bars>
			</part>
			<part caption='Small partial rebuild'>
				After touch lib_17/class_17.hpp => rebuild of 26 object files from c++ and 8 static libs
				<br/><br/>
				<bars scale='20'>
					<bar-section>Using batch compilation</bar-section>
					<bar name='wonderbuild'   value=' 2.77'>gcc deps</bar>
					<bar-section>Not using batch compilation</bar-section>
					<bar name='jam'           value=' 2.58'><span style='color: red'>missed header deps!</span></bar>
					<bar name='toy makefiles' value=' 3.33'>(recursive)</bar>
					<bar name='waf'           value=' 6.22'>waf cpp</bar>
					<bar name='autotools'     value='26.25'>(non recursive)</bar>
					<bar name='scons'         value='77.1 '/>
				</bars>
			</part>
			<part caption='No-op rebuild'>
				<bars scale='20'>
					<bar name='wonderbuild'   value=' 1.75'>gcc deps</bar>
					<bar name='jam'           value=' 2.02'><span style='color: red'>missed header deps!</span></bar>
					<bar name='toy makefiles' value=' 2.25'>(recursive)</bar>
					<bar name='waf'           value=' 3.12'>waf cpp</bar>
					<bar name='autotools'     value=' 7.11'>(non recursive)</bar>
					<bar name='scons'         value='73.12'/>
				</bars>
			</part>
		</part>
		<part caption='Number of system calls' anchor='strace'>
			The following numbers were obtained with <code>strace -fF</code>
			<br/><br/>
			(Note: the wonderbuild script finds source files dynamically instead of relying on a hard-coded file list.)
			<part caption='No-op rebuild'>
				<bars unit='' scale='0.02'>
					<bar-section>Number of stat() calls</bar-section>
					<bar name='jam'           value=' 9252'><span style='color: red'>missed header deps!</span></bar>
					<bar name='wonderbuild'   value='10343'>without check of missing built files</bar>
					<bar name='wonderbuild'   value='10393'>with check of missing built files (including intermediate object files)</bar>
					<bar name='waf'           value='10442'/>
					<bar name='scons'         value='46693'>with fast tuning options</bar>
					<bar name='toy makefiles' value='61996'>(recursive)</bar>
					<bar name='scons'         value='67190'>with default options</bar>
				</bars>
				<bars unit='' scale='0.02'>
					<bar-section>Number of fstat() calls</bar-section>
					<bar name='wonderbuild'   value='  215'>(same with or without check of missing built files)</bar>
					<bar name='waf'           value='  514'/>
					<bar name='scons'         value='  780'>with fast tuning options</bar>
					<bar name='jam'           value='10560'><span style='color: red'>missed header deps!</span></bar>
					<bar name='toy makefiles' value='32014'>(recursive)</bar>
					<bar name='scons'         value='60780'>with default options</bar>
					<bar-section>Number of open() calls</bar-section>
					<bar name='wonderbuild'   value='  749'>(same with or without check of missing built files)</bar>
					<bar name='waf'           value=' 1547'/>
					<bar name='scons'         value=' 2433'>with fast tuning options</bar>
					<bar name='jam'           value=' 9308'><span style='color: red'>missed header deps!</span></bar>
					<bar name='scons'         value='27433'>with default options</bar>
					<bar name='toy makefiles' value='33227'>(recursive)</bar>
				</bars>
				<bars unit=''>
					<bar-section>Number of getdents() calls</bar-section>
					<bar name='wonderbuild'   value='    5'>(same with or without check of missing built files)</bar>
					<bar name='jam'           value='  152'><span style='color: red'>missed header deps!</span></bar>
					<bar name='toy makefiles' value='  202'>(recursive)</bar>
					<bar name='scons'         value='  217'>(same with or without fast tuning options)</bar>
					<bar name='waf'           value='  309'/>
				</bars>
			</part>
		</part>
		<part caption='Using pre-compiled headers' anchor='pch'>
			Here the benchmark was modified to add a <code>#include &lt;boost/spirit.hpp></code> in every header.
			<br/>
			It clearly demonstrates the advantage of pre-compilation as soon as the size of the headers become significant.
			<br/><br/>
			All tests were run with 4 jobs on the same quad core system,
			ext2 filesystem on a 4-disk lvm/dmraid0 device, linux 2.6.24, gcc's C++ compiler.
			<part caption='Tool versions'>
				<ul>
					<li>Waf version was 1.5.3</li>
					<li>Python version was 2.5.2</li>
					<li>Compiler tool chain versions were gcc 4.2.4, binutils 2.18.0</li>
				</ul>
			</part>
			<part caption='Initial full build'>
				<bars scale='15' unit='m'>
					<bar-section>Using both batch compilation and pre-compiled headers</bar-section>
					<bar name='wonderbuild'   value=' 7.13'>-MMD gcc deps</bar>
					<bar name='wonderbuild'   value=' 7.38'>-MD gcc deps</bar>
					<bar-section>Using batch compilation but no pre-compiled headers</bar-section>
					<bar name='wonderbuild'   value='20.50'>-MMD gcc deps</bar>
					<bar name='wonderbuild'   value='20.93'>-MD gcc deps</bar>
					<bar name='waf'           value='21.51'>waf deps</bar>
					<bar-section>Using neither</bar-section>
					<bar name='waf'           value='21.63'>-MMD gcc deps</bar>
					<bar name='waf'           value='21.63'>waf deps</bar>
					<bar name='waf'           value='21.92'>-MD gcc deps</bar>
				</bars>
			</part>
			<part caption='Big partial rebuild'>
				After touch lib_17/*.hpp => rebuild of 585 object files from c++ and 33 static libs
				<br/><br/>
				<bars scale='2'>
					<bar-section>Using both batch compilation and pre-compiled headers</bar-section>
					<bar name='wonderbuild'   value=' 53.0'>-MMD gcc deps</bar>
					<bar name='wonderbuild'   value=' 53.0'>-MD gcc deps</bar>
					<bar-section>Using batch compilation but no pre-compiled headers</bar-section>
					<bar name='wonderbuild'   value='147.0'>-MMD gcc deps</bar>
					<bar name='wonderbuild'   value='151.0'>-MD gcc deps</bar>
					<bar name='waf'           value='  1.1'>waf deps <span style='color: red'>(nothing rebuilt!)</span></bar>
					<bar-section>Using neither</bar-section>
					<bar name='waf'           value='158.0'>-MMD gcc deps</bar>
					<bar name='waf'           value='159.0'>waf deps</bar>
					<bar name='waf'           value='162.0'>-MD gcc deps</bar>
				</bars>
			</part>
			<part caption='Small partial rebuild'>
				After touch lib_17/class_17.hpp => rebuild of 26 object files from c++ and 8 static libs
				<br/><br/>
				<bars scale='35.1'>
					<bar-section>Using both batch compilation and pre-compiled headers</bar-section>
					<bar name='wonderbuild'   value=' 3.01'>-MMD gcc deps</bar>
					<bar name='wonderbuild'   value=' 3.13'>-MD gcc deps</bar>
					<bar-section>Using batch compilation but no pre-compiled headers</bar-section>
					<bar name='wonderbuild'   value=' 7.52'>-MMD gcc deps</bar>
					<bar name='wonderbuild'   value='10.36'>-MD gcc deps</bar>
					<bar name='waf'           value=' 1.10'>waf deps <span style='color: red'>(nothing rebuilt!)</span></bar>
					<bar-section>Using neither</bar-section>
					<bar name='waf'           value=' 8.57'>waf deps</bar>
					<bar name='waf'           value=' 8.65'>-MMD gcc deps</bar>
					<bar name='waf'           value='12.02'>-MD gcc deps</bar>
				</bars>
			</part>
			<part caption='No-op rebuild'>
				<bars scale='153'>
					<bar-section>Using both batch compilation and pre-compiled headers</bar-section>
					<bar name='wonderbuild'   value='0.690'>-MMD gcc deps</bar>
					<bar name='wonderbuild'   value='0.700'>-MD gcc deps</bar>
					<bar-section>Using batch compilation but no pre-compiled headers</bar-section>
					<bar name='wonderbuild'   value='0.690'>-MMD gcc deps</bar>
					<bar name='wonderbuild'   value='4.640'>-MD gcc deps</bar>
					<bar name='waf'           value='1.100'>waf deps <span style='color: red'>(missed deps!)</span></bar>
					<bar-section>Using neither</bar-section>
					<bar name='waf'           value='1.130'>waf deps</bar>
					<bar name='waf'           value='1.130'>-MMD gcc deps</bar>
					<bar name='waf'           value='4.580'>-MD gcc deps</bar>
				</bars>
			</part>
		</part>
	</part>
	<part caption='Configuration details'>
		The benchmarks were generated with this <a href='gen-bench'/> script.
		The script produces reproductible seeded-random setups.
		All these tests were run on the same gen-bench output,
		but each copied to its own directory to ensure they don't interfere with each others.
		<br/><br/>
		The gen-bench script was run with the arguments "50 100 15 5".
		<br/>
		This gen-bench invocation generates 10000 tiny interdependent C++ source and header files,
		to be built into 50 static libs.
		<br/><br/>
		All tools were configured to use the same compiler flags (-g -O0 -Wall -DBENCH -DBENCH_LIB=x -Idir),
		and to produce static libs only.
		<br/>
		Configuration time was not counted (altough it's not really clear for scons).
		<br/><br/>
		All tests were run at least seven times (first run not counted) and the average taken
		(sorry, didn't measure incertitude).
		Initial builds were not always run seven times, but the first run was never counted.
		<br/>
		All tools were run with silent/quiet option and/or > /dev/null.
		<br/>
		The command lines used to run the tests can be seen in in this <a href='run-bench'/> script.
		<part caption='Toy makefiles'>
			The toy makefiles generated were recursive, and C++ dependencies were tracked using the makedepend X utility.
		</part>
		<part caption='Autotools'>
			The autotools generated only one makefile with everything (no recursive make invocation).
			<br/>
			C++ dependencies were tracked with gcc's generated deps as a side-effect of compilation (-MMD option).
			<br/>
			Libtool was enabled, even for building static libs.
		</part>
		<part caption='Jam'>
			Despite a lot of efforts, i wasn't able to find out why jam is missing some header depencencies.
			While it's possible this could be fixed with a trivial change,
			i must point out that the documentation is rather confusing.
			Several people have reported problems on jam's mailing list, but it didn't help me.
			I decided to keep jam's benchmark results, since it's one of the fastest build tool,
			and it's missing only a few dependencies (precisely, it's rebuilding all libs but lib17 itself),
			so real numbers should actually be a bit higher, but not much.
		</part>
		<part caption='Scons'>
			Scons was tuned to use file timestamps comparisons rather than md5 sums.
			<br/>
			C++ dependencies were tracked with scons' own full-featured custom preprocessor.
			<br/>
			Automatic fetching of source files from SCMs was disabled.
			<br/>
			Cache of implicit deps was enabled.
			<br/>
			Built target cache was disabled.
			<br/>
			Copying of source files to the build dir was disabled.
		</part>
		<part caption='Waf'>
			Waf was tuned to use file timestamps comparisons rather than md5 sums
			(in Utils.py, def h_file(filename): return str(os.stat(filename).st_mtime) ).
			<br/>
			C++ dependencies were tracked with either gcc's generated deps as a side-effect of compilation (-MMD option),
			or waf's own full-featured custom preprocessor.
			<br/>
			The parallel algorithm was set to "normal" (faster than "max parallel").
			<br/>
		</part>
		<part caption='Wonderbuild'>
			Wonderbuild used either gcc's generated deps as a side-effect of compilation (-MMD option),
			or a custom dumb include scanner, with no condition nor macro evaluation.
			<br/>
			The wonderbuild script finds source files dynamically instead of relying on a hard-coded file list.
			This is far more maintainance-free, and the impact on speed is negligible.
			<br/><br/>
			Wonderbuild is a work-in-progress and not ready for production.
			Currently, it aims at building C++ code only, it's not documented, and lacks some essential features.
			<br/>
			If you need a complete and fast build tool, i suggest you try <a href='http://code.google.com/p/waf'>waf</a>.
			<br/>
			However, if you have an insterest in developping build tools,
			you can try wonderbuild with this benchmark with:
			<code>
				<pre>
	svn co https://psycle.svn.sourceforge.net/svnroot/psycle/branches/bohan/wonderbuild --ignore-externals
	cd wonderbuild/benchmarks
	./gen-bench bench 50 100 15 5
	cd bench
	time ../../wonderbuild.py --cxx-pic=no --silent # initial full build
	time ../../wonderbuild.py --cxx-pic=no --silent # no-op rebuild
	touch lib_17/class_17.h &amp;&amp; time ../../wonderbuild.py --cxx-pic=no --silent # small partial rebuild
	touch lib_17/*.h &amp;&amp; time ../../wonderbuild.py --cxx-pic=no --silent # big partial rebuild
				</pre>
			</code>
		</part>
	</part>
</part>
