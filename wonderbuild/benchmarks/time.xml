<?xml version='1.0' encoding='ascii' ?>
<?xml-stylesheet type='text/xsl' href='time.xsl'?>
<part caption='Benchmarks of various C++ build tools' image='http://upload.wikimedia.org/wikipedia/commons/thumb/5/5d/Koch_curve.svg/180px-Koch_curve.svg.png' alt='koch curve'>
	<part caption='Results'>
		<part caption='Results on a fast machine'>
			All tests were run with 4 jobs on the same quad core system,
			ext2 filesystem on lvm/dmraid0 device, linux, gcc's C++ compiler.
			<part caption='Initial full build'>
				<bars>
					<bar-section>Using batch compilation</bar-section>
					<bar name='wonderbuild'   value=' 28.2s' width=' 282'>gcc deps (same with 1 batch/lib or max &lt;jobs> batches/lib)</bar>
					<bar name='waf'           value=' 38.2s' width=' 382'>max 50 srcs/batch, waf cpp, shutil</bar>
					<bar name='waf'           value=' 39.7s' width=' 397'>max 50 srcs/batch, waf cpp, mv</bar>
					<bar-section>Not using batch compilation</bar-section>
					<bar name='toy makefiles' value=' 34.1s' width=' 341'>(recursive)</bar>
					<bar name='jam'           value=' 35.6s' width=' 356'><span style='color: red'>missed header deps!</span></bar>
					<bar name='wonderbuild'   value=' 35.8s' width=' 358'>gcc deps</bar>
					<bar name='wonderbuild'   value=' 38.5s' width=' 385'>dumb deps</bar>
					<bar name='waf'           value=' 43.4s' width=' 434'>gcc deps</bar>
					<bar name='waf'           value=' 46.1s' width=' 461'>waf cpp</bar>
					<bar name='scons'         value='131.0s' width='1310'/>
					<bar name='autotools'     value='188.0s' width='1880'>(non recursive)</bar>
				</bars>
			</part>
			<part caption='Big partial rebuild'>
				After touch lib_17/*.hpp => rebuild of 585 object files from c++ and 33 static libs
				<br/><br/>
				<bars>
					<bar-section>Using batch compilation</bar-section>
					<bar name='wonderbuild'   value=' 4.13s' width=' 413'>gcc deps (same with 1 batch/lib or max &lt;jobs> batches/lib)</bar>
					<bar name='waf'           value=' 6.42s' width=' 642'>max 50 srcs/batch, waf cpp, shutil</bar>
					<bar name='waf'           value=' 6.64s' width=' 664'>max 50 srcs/batch, waf cpp, mv</bar>
					<bar-section>Not using batch compilation</bar-section>
					<bar name='jam'           value=' 4.25s' width=' 425'><span style='color: red'>missed header deps!</span></bar>
					<bar name='toy makefiles' value=' 4.81s' width=' 481'>(recursive)</bar>
					<bar name='wonderbuild'   value=' 5.21s' width=' 521'>gcc deps</bar>
					<bar name='wonderbuild'   value=' 5.56s' width=' 556'>dumb deps</bar>
					<bar name='waf'           value=' 6.75s' width=' 675'>gcc deps</bar>
					<bar name='waf'           value=' 6.89s' width=' 689'>waf cpp</bar>
					<bar name='autotools'     value='29.64s' width='2964'>(non recursive)</bar>
					<bar name='scons'         value='39.58s' width='3958'/>
				</bars>
			</part>
			<part caption='Small partial rebuild'>
				After touch lib_17/class_17.hpp => rebuild of 26 object files from c++ and 8 static libs
				<br/><br/>
				<bars>
					<bar-section>Using batch compilation</bar-section>
					<bar name='wonderbuild'   value=' 1.04s' width=' 104'>gcc deps (same with 1 batch/lib or max &lt;jobs> batches/lib)</bar>
					<bar name='waf'           value=' 1.90s' width=' 190'>max 50 srcs/batch, waf cpp (same with shutil or mv)</bar>
					<bar-section>Not using batch compilation</bar-section>
					<bar name='jam'           value=' 0.81s' width='  81'><span style='color: red'>missed header deps!</span></bar>
					<bar name='toy makefiles' value=' 1.01s' width=' 101'>(recursive)</bar>
					<bar name='wonderbuild'   value=' 1.21s' width=' 121'>gcc deps</bar>
					<bar name='wonderbuild'   value=' 1.29s' width=' 129'>dump deps</bar>
					<bar name='waf'           value=' 1.92s' width=' 192'>(same with gcc deps and waf cpp)</bar>
					<bar name='autotools'     value=' 4.63s' width=' 463'>(non recursive)</bar>
					<bar name='scons'         value='24.37s' width='2437'/>
				</bars>
			</part>
			<part caption='No-op rebuild'>
				<bars>
					<bar-section>Using batch compilation</bar-section>
					<bar name='wonderbuild'   value=' 0.76s' width='  76'>gcc deps (same with 1 batch/lib or max &lt;jobs> batches/lib)</bar>
					<bar name='waf'           value=' 1.15s' width=' 115'>max 50 srcs/batch, waf cpp (same with shutil or mv)</bar>
					<bar-section>Not using batch compilation</bar-section>
					<bar name='jam'           value=' 0.71s' width='  71'><span style='color: red'>missed header deps!</span></bar>
					<bar name='toy makefiles' value=' 0.79s' width='  79'>(recursive)</bar>
					<bar name='wonderbuild'   value=' 0.98s' width='  98'>gcc deps</bar>
					<bar name='wonderbuild'   value=' 1.05s' width=' 105'>dumb deps</bar>
					<bar name='waf'           value=' 1.20s' width=' 120'>(same with gcc deps and waf cpp)</bar>
					<bar name='autotools'     value=' 2.05s' width=' 205'>(non recursive)</bar>
					<bar name='scons'         value='23.25s' width='2325'/>
				</bars>
			</part>
		</part>
		<part caption='Results on a slower machine'>
			All tests were run with 1 job on the same system, linux, gcc's C++ compiler.
			<part caption='Initial full build'>
				<bars>
					<bar-section>Using batch compilation</bar-section>
					<bar name='wonderbuild'   value=' 171s' width=' 171'>gcc deps</bar>
					<bar-section>Not using batch compilation</bar-section>
					<bar name='jam'           value=' todo' width='   0'><span style='color: red'>missed header deps!</span></bar>
					<bar name='toy makefiles' value=' 189s' width=' 189'>(recursive)</bar>
					<bar name='waf'           value=' 251s' width=' 251'>waf cpp</bar>
					<bar name='autotools'     value=' todo' width='   0'>(non recursive)</bar>
					<bar name='scons'         value=' todo' width='   0'/>
				</bars>
			</part>
			<part caption='Big partial rebuild'>
				After touch lib_17/*.hpp => rebuild of 585 object files from c++ and 33 static libs
				<br/><br/>
				<bars>
					<bar-section>Using batch compilation</bar-section>
					<bar name='wonderbuild'   value=' 23.2s' width=' 232'>gcc deps</bar>
					<bar-section>Not using batch compilation</bar-section>
					<bar name='jam'           value='  todo' width='   0'><span style='color: red'>missed header deps!</span></bar>
					<bar name='toy makefiles' value=' 24.4s' width=' 244'>(recursive)</bar>
					<bar name='waf'           value=' 36.2s' width=' 362'>waf cpp</bar>
					<bar name='autotools'     value='  todo' width='   0'>(non recursive)</bar>
					<bar name='scons'         value='  todo' width='   0'/>
				</bars>
			</part>
			<part caption='Small partial rebuild'>
				After touch lib_17/class_17.hpp => rebuild of 26 object files from c++ and 8 static libs
				<br/><br/>
				<bars>
					<bar-section>Using batch compilation</bar-section>
					<bar name='wonderbuild'   value=' 3.65s' width=' 365'>gcc deps</bar>
					<bar-section>Not using batch compilation</bar-section>
					<bar name='jam'           value='  todo' width='   0'><span style='color: red'>missed header deps!</span></bar>
					<bar name='toy makefiles' value=' 3.33s' width=' 333'>(recursive)</bar>
					<bar name='waf'           value=' 6.22s' width=' 622'>waf cpp</bar>
					<bar name='autotools'     value='  todo' width='   0'>(non recursive)</bar>
					<bar name='scons'         value='  todo' width='   0'/>
				</bars>
			</part>
			<part caption='No-op rebuild'>
				<bars>
					<bar-section>Using batch compilation</bar-section>
					<bar name='wonderbuild'   value=' 2.45s' width=' 245'>gcc deps</bar>
					<bar-section>Not using batch compilation</bar-section>
					<bar name='jam'           value='  todo' width='   0'><span style='color: red'>missed header deps!</span></bar>
					<bar name='toy makefiles' value=' 2.25s' width=' 225'>(recursive)</bar>
					<bar name='waf'           value=' 3.12s' width=' 312'>waf cpp</bar>
					<bar name='autotools'     value='  todo' width='   0'>(non recursive)</bar>
					<bar name='scons'         value='  todo' width='   0'/>
				</bars>
			</part>
		</part>
	</part>
	<part caption='Tool versions'>
		<ul>
			<li>Scons version was 1.2.0</li>
			<li>Waf version was somewhere after 1.5.2 (svn rev 5345)</li>
			<li>Jam version was 2.5</li>
			<li>Autotools versions were autoconf 2.61, automake 1.10.1, libtool 1.5.26</li>
			<li>Make version was GNU make 3.81</li>
			<li>Tool chain versions were gcc 4.2.4, binutils 2.18.0</li>
		</ul>
	</part>
	<part caption='Configuration details'>
		The benchmarks were generated with this <a href='gen-bench'/> script.
		The script produces reproductible seeded-random setups.
		All these tests were run on the same gen-bench output,
		but each copied to its own directory to ensure they don't interfere with each others.
		<br/><br/>
		The gen-bench script was run with the arguments "50 100 15 5".
		<br/>
		This gen-bench invocation generates 10000 tiny interdependent C++ source and header files,
		to be built into 50 static libs.
		<br/><br/>
		All tools were configured to use the same compiler flags (-g -O0 -Wall -DBENCH -DBENCH_LIB=x -Idir),
		and to produce static libs only.
		<br/>
		Configuration time was not counted (altough it's not really clear for scons).
		<br/><br/>
		All tests were run at least seven times (first run not counted) and the average taken
		(sorry, didn't measure incertitude).
		Initial builds were not always run seven times, but the first run was never counted.
		<br/>
		All tools were run with silent/quiet option and/or > /dev/null.
		<br/>
		The command lines used to run the tests can be seen in in this <a href='run-bench'/> script.
		<part caption='Toy makefiles'>
			The toy makefiles generated were recursive, and C++ dependencies were tracked using the makedepend X utility.
		</part>
		<part caption='Autotools'>
			The autotools generated only one makefile with everything (no recursive make invocation).
			<br/>
			C++ dependencies were tracked with gcc's generated deps as a side-effect of compilation (-MMD option).
			<br/>
			Libtool was enabled, even for building static libs.
		</part>
		<part caption='Jam'>
			Despite a lot of efforts, i wasn't able to find out why jam is missing some header depencencies.
			While it's possible this could be fixed with a trivial change,
			i must point out that the documentation is rather confusing.
			Several people have reported problems on jam's mailing list, but it didn't help me.
			I decided to keep jam's benchmark results, since it's one of the fastest build tool,
			and it's missing only a few dependencies (precisely, it's rebuilding all libs but lib17 itself),
			so real numbers should actually be a bit higher, but not much.
		</part>
		<part caption='Scons'>
			Scons was tuned to use file timestamps comparisons rather than md5 sums.
			<br/>
			C++ dependencies were tracked with scons' own full-featured custom preprocessor.
			<br/>
			Automatic fetching of source files from SCMs was disabled.
			<br/>
			Cache of implicit deps was enabled.
			<br/>
			Built target cache was disabled.
			<br/>
			Copying of source files to the build dir was disabled.
		</part>
		<part caption='Waf'>
			Waf was tuned to use file timestamps comparisons rather than md5 sums
			(in Utils.py, def h_file(filename): return str(os.stat(filename).st_mtime) ).
			<br/>
			C++ dependencies were tracked with either gcc's generated deps as a side-effect of compilation (-MMD option),
			or waf's own full-featured custom preprocessor.
			<br/>
			The parallel algorithm was set to "normal" (faster than "max parallel").
			<br/>
		</part>
		<part caption='Wonderbuild'>
			Wonderbuild used either gcc's generated deps as a side-effect of compilation (-MMD option),
			or a custom dumb include scanner, with no condition nor macro evaluation.
			<br/>
			The wonderbuild script finds source files dynamically instead of relying on a hard-coded file list.
			This is far more maintainance-free, and the impact on speed is negligible.
			<br/><br/>
			Wonderbuild is a work-in-progress and not ready for production.
			Currently, it aims at building C++ code only, it's not documented, and lacks some essential features.
			<br/>
			If you need a complete and fast build tool, i suggest you try <a href='http://code.google.com/p/waf'>waf</a>.
			<br/>
			However, if you have an insterest in developping build tools,
			you can try wonderbuild with this benchmark with:
			<code>
				<pre>
	svn co https://psycle.svn.sourceforge.net/svnroot/psycle/branches/bohan/wonderbuild --ignore-externals
	cd wonderbuild/benchmarks
	./gen-bench bench 50 100 15 5
	cd bench
	time ../../wonderbuild.py --cxx-pic=no --silent # initial full build
	time ../../wonderbuild.py --cxx-pic=no --silent # no-op rebuild
	touch lib_17/class_17.h &amp;&amp; time ../../wonderbuild.py --cxx-pic=no --silent # small partial rebuild
	touch lib_17/*.h &amp;&amp; time ../../wonderbuild.py --cxx-pic=no --silent # big partial rebuild
				</pre>
			</code>
		</part>
	</part>
</part>
