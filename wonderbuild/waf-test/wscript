#! /usr/bin/env waf

import os, Options, Build

APPNAME = 'waf-test'
VERSION = '1.2.3'

srcdir = '.'
blddir = '++build'

def init(): pass

def set_options(opt):
	opt.tool_options('compiler_cxx')

def configure(conf):
	conf.check_tool('compiler_cxx')

def build(bld):
	src_dirs = set(['src'])
	
	# get the dirs generated by genbench
	bld.rescan(bld.path)
	for d in bld.cache_dir_contents[bld.path.id]:
		if d.startswith('src-'): src_dirs.add(d)

	for src in src_dirs:
		bld.lib(
			target = 'foo-' + src,
			types = ['static', 'shared'],
			sources = [src + '/foo'],
			includes = [src]
		)
		bld.program(
			target = 'main-' + src,
			types = ['static', 'shared'],
			sources = [src + '/main'],
			includes = [src],
			uselib_local = ['foo-' + src]
		)
		bld.install_headers(
			includes = [src],
			headers = [src + '/bar']
		)
	
def shutdown(): pass

def program(bld, target, types = ['static', 'shared'], sources = None, includes = None, uselib_local = None, uselib = None):
	module(bld, target, 'program', types, sources, includes, None, uselib_local)
Build.BuildContext.program = program

def lib(bld, target, types = ['static', 'shared'], sources = None, includes = None, headers = None, uselib_local = None, uselib = None):
	module(bld, target, 'lib', types, sources, includes, headers, uselib_local)
Build.BuildContext.lib = lib

def module(bld, target, kind, types = ['static', 'shared'], sources = None, includes = None, headers = None, uselib_local = None, uselib = None):
	for type in types:
		if kind == 'program':
			obj = bld.new_task_gen('cxx', 'program')
			obj.target = target
			if len(types) > 1: obj.target += '-' + type
		else:
			obj = bld.new_task_gen('cxx', type == 'static' and 'staticlib' or type == 'shared' and 'shlib')
			obj.target = target
			if type == 'shared':
				global VERSION
				obj.vnum = VERSION
		obj.name = target + '-' + type
		deep_sources(bld, obj, sources)
		obj.includes = includes
		if type != 'static': obj.rpath = '\\$ORIGIN:\\$ORIGIN/../lib'
		if uselib_local: obj.uselib_local = [u + '-' + type for u in uselib_local]
		if uselib: obj.uselib = [u + '-' + type for u in uselib]
	if kind != 'program':
		if headers is None:
			headers = []
			# we search headers in source dirs
			for s in sources:
				node = bld.path.find_resource(s) # is it a file?
				if node: node = node.parent # we add headers from where the source file located
				else: node = bld.path.find_dir(s) # is it a dir?
				headers.append(node.relpath_gen(bld.path))
		install_headers(bld, includes, headers)
Build.BuildContext.module = module

def install_headers(bld, includes, headers):
	headers_filenames = []
	for h in headers:
		#print 'header search:', h
		node = bld.path.find_resource(h) # is it a file?
		if node: headers_filenames.append(h)
		else:
			node = bld.path.find_dir(h) # is it a dir?
			if node:
				for dir in deep_dir_nodes(bld, [node]):
					bld.rescan(dir)
					for file in bld.cache_dir_contents[dir.id]:
						#print file
						if file.endswith('.hpp') or file.endswith('.h'):
							headers_filenames.append(os.path.join(dir.relpath_gen(bld.path), file))
	#print 'found header files:', headers_filenames
	global APPNAME, VERSION
	for i in includes:
		for h in headers_filenames:
			if h.startswith(i):
				bld.install_as('${PREFIX}/include/' + APPNAME + '-' + VERSION + '/' + h[(len(i)):], h)
Build.BuildContext.install_headers = install_headers

def deep_dirs(bld, dirs):
	deep_dirs = []
	for dir in [bld.path.find_dir(d) for d in dirs]: deep_dirs += deep_dir_nodes(bld, dir.dirs())
	return dirs + deep_dirs

def deep_dir_nodes(bld, dir_nodes):
	deep_dirs = []
	for dir in dir_nodes: deep_dirs += deep_dir_nodes(bld, dir.dirs())
	return deep_dirs + dir_nodes

def deep_sources(bld, cxx_taks_gen, sources):
	cxx_taks_gen.source = []
	for s in sources:
		#print 'source search:', s
		node = bld.path.find_resource(s) # is it a file?
		if node: cxx_taks_gen.source.append(s)
		else:
			node = bld.path.find_dir(s) # is it a dir?
			cxx_taks_gen.find_sources_in_dirs([d.relpath_gen(bld.path) for d in deep_dir_nodes(bld, [node])])
	#print 'found source files:', cxx_taks_gen.source
