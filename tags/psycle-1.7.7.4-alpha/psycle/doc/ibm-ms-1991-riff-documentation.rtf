{\rtf1\ansi \deff0\deflang1033{\fonttbl{\f0\froman\fcharset0\fprq2 Tms Rmn{\*\falt Times New Roman};}{\f1\froman\fcharset2\fprq2 Symbol;}{\f2\fswiss\fcharset0\fprq2 Helv;}{\f3\fmodern\fcharset0\fprq1 Courier;}
{\f4\froman\fcharset0\fprq2 Times New Roman;}{\f5\fswiss\fcharset0\fprq2 Arial;}{\f6\froman\fcharset0\fprq2 MS Serif;}{\f7\fswiss\fcharset0\fprq2 MS Sans Serif;}{\f8\froman\fcharset0\fprq2 Times;}{\f9\fswiss\fcharset0\fprq2 Helvetica;}
{\f10\fswiss\fcharset0\fprq2 System;}{\f11\fmodern\fcharset0\fprq1 Courier New;}{\f12\froman\fcharset0\fprq2 New York;}{\f13\fswiss\fcharset0\fprq2 Geneva;}{\f14\fmodern\fcharset0\fprq1 LinePrinter;}{\f15\froman\fcharset0\fprq2 CG Times;}
{\f16\fswiss\fcharset0\fprq2 Univers;}{\f17\fswiss\fcharset0\fprq2 Univers Condensed;}{\f18\fswiss\fcharset0\fprq2 Antique Olive;}{\f19\froman\fcharset0\fprq2 Garamond;}{\f20\fswiss\fcharset0\fprq2 CG Omega;}{\f21\fswiss\fcharset0\fprq2 Albertus Medium;}
{\f22\fswiss\fcharset0\fprq2 Albertus Extra Bold;}{\f23\froman\fcharset0\fprq2 Clarendon Condensed;}{\f24\fscript\fcharset0\fprq2 Coronet;}{\f25\fmodern\fcharset0\fprq1 Letter Gothic;}{\f26\fscript\fcharset0\fprq2 Marigold;}
{\f27\fnil\fcharset2\fprq2 Wingdings;}{\f28\fnil\fcharset2\fprq2 Marlett;}{\f29\froman\fcharset2\fprq2 MT Extra;}{\f30\fswiss\fcharset0\fprq2 Arial Narrow;}{\f31\fswiss\fcharset0\fprq2 Arial Black;}{\f32\fswiss\fcharset0\fprq2 Arial Rounded MT Bold;}
{\f33\froman\fcharset0\fprq2 Book Antiqua;}{\f34\froman\fcharset0\fprq2 Bookman Old Style;}{\f35\fswiss\fcharset0\fprq2 Century Gothic;}{\f36\froman\fcharset0\fprq2 Century Schoolbook;}{\f37\fnil\fcharset2\fprq2 Monotype Sorts;}
{\f38\froman\fcharset0\fprq2 Map Symbols;}{\f39\fswiss\fcharset0\fprq2 Haettenschweiler;}{\f40\fdecor\fcharset0\fprq2 Algerian;}{\f41\fdecor\fcharset0\fprq2 Braggadocio;}{\f42\fswiss\fcharset0\fprq2 Britannic Bold;}
{\f43\fscript\fcharset0\fprq2 Brush Script MT;}{\f44\fdecor\fcharset0\fprq2 Colonna MT;}{\f45\fdecor\fcharset0\fprq2 Desdemona;}{\f46\froman\fcharset0\fprq2 Footlight MT Light;}{\f47\fswiss\fcharset0\fprq2 Impact;}{\f48\fdecor\fcharset0\fprq2 Kino MT;}
{\f49\froman\fcharset0\fprq2 Wide Latin;}{\f50\fscript\fcharset0\fprq2 Matura MT Script Capitals;}{\f51\fdecor\fcharset0\fprq2 Playbill;}{\f52\fmodern\fcharset2\fprq1 MS LineDraw;}{\f53\fmodern\fcharset255\fprq2 Modern;}
{\f54\fswiss\fcharset0\fprq1 MS Dialog;}{\f55\fswiss\fcharset0\fprq0 Helvetica-Narrow{\*\falt Arial Narrow};}{\f56\fdecor\fcharset0\fprq0 ZapfDingbats{\*\falt Monotype Sorts};}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;
\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;
\red128\green128\blue128;\red192\green192\blue192;}{\stylesheet{\li720\sb240\nowidctlpar \fs20 \snext0 Normal;}{\s1\sa1200\keepn\nowidctlpar\brdrb\brdrs\brdrw15\brsp20 \brdrbtw\brdrs\brdrw15\brsp20 \b\f55\fs48 \sbasedon45\snext56 heading 1;}{
\s2\sb480\sa240\keepn\nowidctlpar \b\f55\fs40 \sbasedon45\snext56 heading 2;}{\s3\sb360\sa240\keepn\nowidctlpar \b\f55\fs28 \sbasedon45\snext56 heading 3;}{\s4\li720\sb360\sa240\keepn\nowidctlpar \b\f55\fs28 \sbasedon45\snext56 heading 4;}{
\s5\li720\sb240\keepn\nowidctlpar \b\f55\fs20 \sbasedon45\snext56 heading 5;}{\s6\li720\sb240\nowidctlpar \fs20\ul \sbasedon0\snext38 heading 6;}{\s7\li720\sb240\nowidctlpar \i\fs20 \sbasedon0\snext38 heading 7;}{\s8\li720\sb240\nowidctlpar \i\fs20 
\sbasedon0\snext38 heading 8;}{\s9\li720\sb240\nowidctlpar \i\fs20 \sbasedon0\snext38 heading 9;}{\*\cs10 \additive Default Paragraph Font;}{\*\cs15 \additive\fs16\lang1033 \sbasedon10 annotation reference;}{\s16\li720\sb240\nowidctlpar \fs20 
\sbasedon0\snext16 annotation text;}{\s17\li5040\ri720\sb240\nowidctlpar\tldot\tx8280\tqr\tx8640 \fs20 \sbasedon0\snext0 toc 8;}{\s18\li4320\ri720\sb240\nowidctlpar\tldot\tx8280\tqr\tx8640 \fs20 \sbasedon0\snext0 toc 7;}{
\s19\li3600\ri720\sb240\nowidctlpar\tldot\tx8280\tqr\tx8640 \fs20 \sbasedon0\snext0 toc 6;}{\s20\li2880\ri720\sb240\nowidctlpar\tldot\tx8280\tqr\tx8640 \fs20 \sbasedon0\snext0 toc 5;}{\s21\li1440\ri720\sb240\nowidctlpar\tldot\tx8280\tqr\tx8640 \fs20 
\sbasedon0\snext0 toc 4;}{\s22\li1080\ri720\sb240\nowidctlpar\tldot\tx8280\tqr\tx8640 \fs20 \sbasedon0\snext0 toc 3;}{\s23\li720\ri720\sb240\nowidctlpar\tldot\tx8280\tqr\tx8640 \fs20 \sbasedon0\snext0 toc 2;}{
\s24\li720\ri720\sb240\nowidctlpar\tx1260\tldot\tx8280\tqr\tx8640 \b \sbasedon0\snext0 toc 1;}{\s25\li2160\sb240\nowidctlpar \fs20 \sbasedon0\snext0 index 7;}{\s26\li1800\sb240\nowidctlpar \fs20 \sbasedon0\snext0 index 6;}{\s27\li1440\sb240\nowidctlpar 
\fs20 \sbasedon0\snext0 index 5;}{\s28\li1080\sb240\nowidctlpar \fs20 \sbasedon0\snext0 index 4;}{\s29\li720\sb240\nowidctlpar \fs20 \sbasedon0\snext0 index 3;}{\s30\li360\sb240\nowidctlpar \fs20 \sbasedon0\snext0 index 2;}{\s31\sb240\nowidctlpar \fs20 
\sbasedon0\snext0 index 1;}{\*\cs32 \additive\fs20\lang1033 \sbasedon10 line number;}{\s33\li720\sb240\nowidctlpar \fs20 \sbasedon0\snext31 index heading;}{\s34\li720\sb240\nowidctlpar\brdrt\brdrth\brdrw15\brsp20 \brdrbtw\brdrth\brdrw15\brsp20 
\tqc\tx4320\tqr\tx8640\pvpg \b\i\f2\fs20 \sbasedon0\snext34 footer;}{\s35\li720\sb240\nowidctlpar\brdrb\brdrth\brdrw15\brsp20 \brdrbtw\brdrth\brdrw15\brsp20 \tqr\tx8640 \b\f55\fs20 \sbasedon0\snext35 header;}{\*\cs36 \additive\fs16\up6\lang1033 
\sbasedon10 footnote reference;}{\s37\li720\sb240\nowidctlpar \fs20 \sbasedon0\snext37 footnote text;}{\s38\li1080\sb240\nowidctlpar \fs20 \sbasedon0\snext38 Normal Indent;}{\s39\li720\sb240\nowidctlpar\posyt\dxfrtext187\dfrmtxtx187\dfrmtxty187 \b\f55 
\sbasedon0\snext39 ibm-ms;}{\s40\li720\sb240\nowidctlpar\brdrb\brdrs\brdrw15\brsp20 \brdrbtw\brdrs\brdrw15\brsp20 \posyc\dxfrtext187\dfrmtxtx187\dfrmtxty187 \b\f55\fs60 \sbasedon0\snext40 book title;}{
\s41\li864\sb240\nowidctlpar\tx1454\tx1829\tx2203\tx2578\tx2952\tx3326\tx3701\tx4075\tx4450\tx4824 \f3\fs16 \sbasedon0\snext42 ex;}{\s42\li864\nowidctlpar\tx1454\tx1829\tx2203\tx2578\tx2952\tx3326\tx3701\tx4075\tx4450\tx4824 \f3\fs16 \sbasedon41\snext42 
exb;}{\s43\fi-360\li1080\sb240\nowidctlpar \fs20 \sbasedon0\snext43 list;}{\s44\qc\li720\sb120\sa360\nowidctlpar \b\f55\fs20 \sbasedon38\snext44 fig caption;}{\s45\keepn\nowidctlpar \b\f55\fs20 \snext56 heading base;}{\s46\li720\sb240\nowidctlpar 
\f55\fs20 \sbasedon0\snext46 Note;}{\s47\sb240\nowidctlpar \b\f55\expnd12\expndtw60 \sbasedon0\snext47 chapter number;}{\s48\sa1200\keepn\nowidctlpar\brdrb\brdrs\brdrw15\brsp20 \brdrbtw\brdrs\brdrw15\brsp20 \b\f55\fs48 \sbasedon1\snext48 chapter title;}{
\s49\li720\sb1440\nowidctlpar \fs20 \sbasedon0\snext49 chapter opener;}{\s50\sb240\nowidctlpar \b\fs22 \sbasedon51\snext50 tbl hd;}{\s51\sb120\nowidctlpar \fs20 \sbasedon0\snext51 tbl;}{
\s52\sb120\nowidctlpar\tx389\tx763\tx1138\tx1512\tx1886\tx2261\tx2635\tx3010\tx3384\tx3758 \f3\fs16 \sbasedon51\snext52 tbl ex;}{\s53\sb120\nowidctlpar \b\fs20 \sbasedon51\snext53 tbl hd side;}{\s54\fi-360\li360\sb120\nowidctlpar \fs20 
\sbasedon51\snext54 tbl flag;}{\s55\li720\sb240\sa240\nowidctlpar \fs20 \sbasedon0\snext55 tbl intro;}{\s56\li720\sb240\nowidctlpar \fs20 \sbasedon0\snext0 heading opener;}{\s57\li720\sb240\nowidctlpar\posyb\dxfrtext187\dfrmtxtx187\dfrmtxty187 \b\f55 
\sbasedon0\snext57 book status;}{\s58\li4320\ri720\sb240\nowidctlpar\tldot\tx8280\tqr\tx8640 \fs20 \sbasedon18\snext58 document title;}{\s59\li720\ri720\sb240\nowidctlpar\tldot\tx8280\tqr\tx8640\posyb\dxfrtext187\dfrmtxtx187\dfrmtxty187 \b\f55 
\sbasedon18\snext59 book info;}{\s60\fi-360\li1440\sb240\nowidctlpar \fs20 \sbasedon43\snext60 list 2;}}{\*\revtbl {Unknown;}}{\info{\title IBM/MS RIFF/MCI Specification 1.0}{\author multimedia}{\operator multimedia}{\creatim\yr1991\mo11\dy8\hr9\min57}
{\revtim\yr1998\mo12\dy7\hr17\min10}{\version3}{\edmins0}{\nofpages90}{\nofwords24666}{\nofchars140601}{\*\company fupl}{\vern57443}}\widowctrl\ftnbj\aenddoc\hyphhotz425\hyphcaps0 \fet0\sectd \linex0\headery709\footery709\colsx709\endnhere {\*\pnseclvl1
\pnucrm\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl2\pnucltr\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang{\pntxta )}}{\*\pnseclvl5
\pndec\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl6\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang
{\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}\pard\plain \s40\li720\sb240\widctlpar\brdrb\brdrs\brdrw15\brsp20 \brdrbtw\brdrs\brdrw15\brsp20 \posyc\dxfrtext187\dfrmtxtx187\dfrmtxty187 \b\f55\fs60 {\fs48 
Multimedia Programming Interface \line and Data Specifications 1.0
\par }\pard\plain \s39\li720\sb240\widctlpar\posyb\dxfrtext187\dfrmtxtx187\dfrmtxty187 \b\f55 Issued as a joint design by IBM Corporation and Microsoft Corporation
\par August 1991
\par \pard\plain \li720\sb240\widctlpar \fs20 \page 
This document describes the programming interfaces and data specifications for multimedia that are common to both OS/2 and Windows environments. These specifications may be enhanced to incorporate new technologies or modified based on customer feedback a
nd, as such, specifications incorporated into any final product may vary.
\par \pard \li720\sb240\widctlpar\posyb\dxfrtext187\dfrmtxtx187\dfrmtxty187 Microsoft is a registered trademark, and Windows is a trademark of Microsoft Corp.
\par IBM and OS/2 are registered trademarks of International Business Machines Corporation.
\par \pard\plain \s48\sa1200\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \brdrbtw\brdrs\brdrw15\brsp20 \b\f55\fs48 \column Contents
\par \pard\plain \s24\li720\ri720\sb240\widctlpar\tx1260\tldot\tx8280\tqr\tx8640 \b {\*\bkmkstart table_of_contents}Contents{\*\bkmkend table_of_contents}{\field{\*\fldinst {RD sum.doc}}{\fldrslt }}{\field{\*\fldinst {RD riff.doc}}{\fldrslt }}
{\field{\*\fldinst {RD formats.doc}}{\fldrslt }}{\field{\*\fldinst {RD mci.doc}}{\fldrslt }}{\field\fldedit{\*\fldinst TOC \\s chapter \\o 1-4 \\c \ldblquote \emdash \rdblquote }{\fldrslt 
\par Chapter 1\tab Overview of Multimedia Specifications
\par \pard\plain \s23\li720\ri720\sb240\widctlpar\tldot\tx8280\tqr\tx8640 \fs20 Resource Interchange File Format\tab 1-1
\par Multimedia File Formats\tab 1-1
\par Media Control Interface\tab 1-2
\par Registering Multimedia Formats\tab 1-2
\par \pard\plain \s24\li720\ri720\sb240\widctlpar\tx1260\tldot\tx8280\tqr\tx8640 \b Chapter 2\tab Resource Interchange File Format
\par \pard\plain \s23\li720\ri720\sb240\widctlpar\tldot\tx8280\tqr\tx8640 \fs20 About the RIFF Tagged File Format\tab 2-1
\par \pard\plain \s22\li1080\ri720\sb240\widctlpar\tldot\tx8280\tqr\tx8640 \fs20 Notation Conventions\tab 2-1
\par Chunks\tab 2-2
\par RIFF Forms\tab 2-3
\par Defining and Registering RIFF Forms\tab 2-3
\par \pard\plain \s21\li1440\ri720\sb240\widctlpar\tldot\tx8280\tqr\tx8640 \fs20 Registered Form and Chunk Types\tab 2-4
\par Unregistered (Form-Specific) Chunk Types\tab 2-4
\par \pard\plain \s23\li720\ri720\sb240\widctlpar\tldot\tx8280\tqr\tx8640 \fs20 Notation for Representing Sample RIFF Files\tab 2-5
\par \pard\plain \s22\li1080\ri720\sb240\widctlpar\tldot\tx8280\tqr\tx8640 \fs20 Basic Notation for Representing RIFF Files\tab 2-5
\par Escape Sequences for Four-Character Codes and String Chunks\tab 2-7
\par Extended Notation for Representing RIFF Form Definitions\tab 2-8
\par Atomic Labels\tab 2-10
\par A Sample RIFF Form Definition and RIFF Form\tab 2-11
\par \pard\plain \s23\li720\ri720\sb240\widctlpar\tldot\tx8280\tqr\tx8640 \fs20 Storing Strings in RIFF Chunks\tab 2-12
\par \pard\plain \s21\li1440\ri720\sb240\widctlpar\tldot\tx8280\tqr\tx8640 \fs20 NULL-Terminated String (ZSTR) Format\tab 2-12
\par String Table Format\tab 2-13
\par NULL-Terminated, Byte Size Prefix String (BZSTR) Series\tab 2-13
\par Multiline String Format\tab 2-13
\par Choosing a Storage Method\tab 2-13
\par \pard\plain \s23\li720\ri720\sb240\widctlpar\tldot\tx8280\tqr\tx8640 \fs20 LIST Chunk\tab 2-14
\par \pard\plain \s22\li1080\ri720\sb240\widctlpar\tldot\tx8280\tqr\tx8640 \fs20 INFO List Chunk\tab 2-14
\par \pard\plain \s23\li720\ri720\sb240\widctlpar\tldot\tx8280\tqr\tx8640 \fs20 CSET (Character Set) Chunk\tab 2-16
\par \pard\plain \s22\li1080\ri720\sb240\widctlpar\tldot\tx8280\tqr\tx8640 \fs20 Country Codes\tab 2-16
\par Language and Dialect Codes\tab 2-17
\par \pard\plain \s23\li720\ri720\sb240\widctlpar\tldot\tx8280\tqr\tx8640 \fs20 JUNK (Filler) Chunk\tab 2-18
\par Compound File Structure\tab 2-18
\par \pard\plain \s22\li1080\ri720\sb240\widctlpar\tldot\tx8280\tqr\tx8640 \fs20 Structural Overview\tab 2-19
\par Compound File Table of Contents (CTOC) Chunk\tab 2-19
\par \pard\plain \s21\li1440\ri720\sb240\widctlpar\tldot\tx8280\tqr\tx8640 \fs20 Structural Overview\tab 2-19
\par Header Information\tab 2-21
\par Parameter Table Definition\tab 2-21
\par Header Parameter Table\tab 2-22
\par CTOC Table Entries\tab 2-22
\par Usage Codes for Extra Header and Extra Entry Fields\tab 2-24
\par Compression of Compound File Elements\tab 2-26
\par \pard\plain \s22\li1080\ri720\sb240\widctlpar\tldot\tx8280\tqr\tx8640 \fs20 Compound File Element Group (CGRP) Chunk\tab 2-27
\par Placement of the CTOC and CGRP Chunks\tab 2-27
\par \pard\plain \s24\li720\ri720\sb240\widctlpar\tx1260\tldot\tx8280\tqr\tx8640 \b Chapter 3\tab Multimedia File Formats
\par \pard\plain \s23\li720\ri720\sb240\widctlpar\tldot\tx8280\tqr\tx8640 \fs20 Bundle File Format\tab 3-1
\par Device Independent Bitmap File Format\tab 3-1
\par \pard\plain \s22\li1080\ri720\sb240\widctlpar\tldot\tx8280\tqr\tx8640 \fs20 Overview of DIB Structure\tab 3-2
\par Bitmap File Header\tab 3-2
\par Bitmap Information Header\tab 3-3
\par \pard\plain \s21\li1440\ri720\sb240\widctlpar\tldot\tx8280\tqr\tx8640 \fs20 Information Header Structures\tab 3-4
\par \pard\plain \s22\li1080\ri720\sb240\widctlpar\tldot\tx8280\tqr\tx8640 \fs20 Bitmap Color Table\tab 3-6
\par \pard\plain \s21\li1440\ri720\sb240\widctlpar\tldot\tx8280\tqr\tx8640 \fs20 Color Table Structure\tab 3-6
\par Order of Colors\tab 3-6
\par Field Descriptions\tab 3-6
\par Locating the Color Table\tab 3-7
\par Interpreting the Color Table\tab 3-7
\par \pard\plain \s22\li1080\ri720\sb240\widctlpar\tldot\tx8280\tqr\tx8640 \fs20 Bitmap Data\tab 3-8
\par Windows 3.0 Bitmap Compression Formats\tab 3-8
\par \pard\plain \s21\li1440\ri720\sb240\widctlpar\tldot\tx8280\tqr\tx8640 \fs20 Compression of 8-Bit-Per-Pixel DIBs\tab 3-8
\par Compression of 4-Bit-Per-Pixel DIBs\tab 3-9
\par \pard\plain \s23\li720\ri720\sb240\widctlpar\tldot\tx8280\tqr\tx8640 \fs20 RIFF Device-Independent Bitmap File Format\tab 3-10
\par \pard\plain \s22\li1080\ri720\sb240\widctlpar\tldot\tx8280\tqr\tx8640 \fs20 Simple RDIB Format\tab 3-10
\par Extended RDIB Format\tab 3-10
\par \pard\plain \s21\li1440\ri720\sb240\widctlpar\tldot\tx8280\tqr\tx8640 \fs20 Bitmap Header Chunk\tab 3-11
\par Transitional Compression\tab 3-16
\par CCC Compression\tab 3-17
\par Palette Chunk\tab 3-17
\par External Palette Chunk\tab 3-17
\par Bitmap Data Chunk\tab 3-17
\par \pard\plain \s23\li720\ri720\sb240\widctlpar\tldot\tx8280\tqr\tx8640 \fs20 MIDI and RIFF\~MIDI File Formats\tab 3-18
\par Palette File Format\tab 3-18
\par \pard\plain \s22\li1080\ri720\sb240\widctlpar\tldot\tx8280\tqr\tx8640 \fs20 Simple PAL Format\tab 3-18
\par Extended PAL Format\tab 3-19
\par \pard\plain \s23\li720\ri720\sb240\widctlpar\tldot\tx8280\tqr\tx8640 \fs20 Rich Text Format (RTF)\tab 3-22
\par Waveform Audio File Format (WAVE)\tab 3-22
\par \pard\plain \s22\li1080\ri720\sb240\widctlpar\tldot\tx8280\tqr\tx8640 \fs20 WAVE Format Chunk\tab 3-22
\par WAVE Format Categories\tab 3-23
\par \pard\plain \s21\li1440\ri720\sb240\widctlpar\tldot\tx8280\tqr\tx8640 \fs20 Pulse Code Modulation (PCM) Format\tab 3-24
\par \pard\plain \s22\li1080\ri720\sb240\widctlpar\tldot\tx8280\tqr\tx8640 \fs20 Storage of WAVE Data\tab 3-26
\par FACT Chunk\tab 3-26
\par Cue-Points Chunk\tab 3-27
\par \pard\plain \s21\li1440\ri720\sb240\widctlpar\tldot\tx8280\tqr\tx8640 \fs20 Examples of File Position Values\tab 3-28
\par \pard\plain \s22\li1080\ri720\sb240\widctlpar\tldot\tx8280\tqr\tx8640 \fs20 Playlist Chunk\tab 3-29
\par Associated Data Chunk\tab 3-29
\par \pard\plain \s21\li1440\ri720\sb240\widctlpar\tldot\tx8280\tqr\tx8640 \fs20 Label and Note Information\tab 3-30
\par Text with Data Length Information\tab 3-30
\par Embedded File Information\tab 3-31
\par \pard\plain \s24\li720\ri720\sb240\widctlpar\tx1260\tldot\tx8280\tqr\tx8640 \b Chapter 4\tab Media Control Interface
\par \pard\plain \s23\li720\ri720\sb240\widctlpar\tldot\tx8280\tqr\tx8640 \fs20 MCI Command Strings\tab 4-1
\par \pard\plain \s22\li1080\ri720\sb240\widctlpar\tldot\tx8280\tqr\tx8640 \fs20 Example of MCI Command Use\tab 4-2
\par Categories of MCI Command Strings\tab 4-2
\par Command Syntax Conventions\tab 4-3
\par System Commands\tab 4-3
\par Required Commands\tab 4-3
\par Basic Commands\tab 4-4
\par Extended Commands\tab 4-4
\par \pard\plain \s21\li1440\ri720\sb240\widctlpar\tldot\tx8280\tqr\tx8640 \fs20 Extended Commands Reserved for Future Use\tab 4-4
\par \pard\plain \s22\li1080\ri720\sb240\widctlpar\tldot\tx8280\tqr\tx8640 \fs20 Creating a Command String\tab 4-5
\par About MCI Device Types\tab 4-6
\par \pard\plain \s23\li720\ri720\sb240\widctlpar\tldot\tx8280\tqr\tx8640 \fs20 Using MCI Command Strings\tab 4-6
\par \pard\plain \s22\li1080\ri720\sb240\widctlpar\tldot\tx8280\tqr\tx8640 \fs20 Opening a Device\tab 4-6
\par \pard\plain \s21\li1440\ri720\sb240\widctlpar\tldot\tx8280\tqr\tx8640 \fs20 Opening Simple Devices\tab 4-7
\par Opening Compound Devices\tab 4-7
\par Using the Shareable Flag\tab 4-8
\par Using the Alias Flag\tab 4-8
\par Opening New Device Elements\tab 4-8
\par \pard\plain \s22\li1080\ri720\sb240\widctlpar\tldot\tx8280\tqr\tx8640 \fs20 Closing a Device\tab 4-8
\par Shortcuts and Variations for MCI Commands\tab 4-9
\par \pard\plain \s21\li1440\ri720\sb240\widctlpar\tldot\tx8280\tqr\tx8640 \fs20 Using All as a Device Name\tab 4-9
\par Combining the Device Type and Device Element Name\tab 4-9
\par Automatic Open\tab 4-9
\par Automatic Close\tab 4-9
\par \pard\plain \s22\li1080\ri720\sb240\widctlpar\tldot\tx8280\tqr\tx8640 \fs20 Using Wait and Notify Flags\tab 4-10
\par \pard\plain \s21\li1440\ri720\sb240\widctlpar\tldot\tx8280\tqr\tx8640 \fs20 Using the Notify Flag\tab 4-10
\par \pard\plain \s22\li1080\ri720\sb240\widctlpar\tldot\tx8280\tqr\tx8640 \fs20 Obtaining Information From MCI Devices\tab 4-11
\par The Play Command\tab 4-11
\par Stop, Pause, and Resume Commands\tab 4-11
\par \pard\plain \s23\li720\ri720\sb240\widctlpar\tldot\tx8280\tqr\tx8640 \fs20 MCI System Commands\tab 4-12
\par Required Commands for All Devices\tab 4-13
\par Basic Commands for Specific Device Types\tab 4-14
\par CD Audio (Redbook) Commands\tab 4-17
\par MIDI Sequencer Commands\tab 4-20
\par Videodisc Player Commands\tab 4-25
\par Waveform Audio Commands\tab 4-29
\par \pard\plain \s49\li720\sb1440\widctlpar \fs20 }}\pard\plain \s49\li720\sb1440\widctlpar \fs20 
\par \pard\plain \s47\sb240\widctlpar \b\f55\expnd12\expndtw60 \column Chapter {\field{\*\fldinst SEQ chapter \\r1}{\fldrslt {\lang1024 1}}}
\par \pard\plain \s1\sa1200\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \brdrbtw\brdrs\brdrw15\brsp20 \b\f55\fs48 Overview of Multimedia Specifications
\par \pard\plain \s56\li720\sb240\widctlpar \fs20 This document describes the file format and control interface specifications for multimedia. These specifications allow developers to use common file format and device control interfaces.
\par \pard\plain \s2\sb480\sa240\keepn\widctlpar \b\f55\fs40 Resource Interchange File Format
\par \pard\plain \s56\li720\sb240\widctlpar \fs20 
The Resource Interchange File Format (RIFF), a tagged file structure, is a general specification upon which many file formats can be defined. The main advantage of RIFF is its extensibility; file formats based on RIFF can be future-proofed, as format chan
ges can be ignored by existing applications.
\par \pard\plain \li720\sb240\widctlpar \fs20 The RIFF file format is suitable for the following multimedia tasks:
\par \pard\plain \s43\fi-360\li1080\sb240\widctlpar \fs20 \bullet \tab Playing back multimedia data
\par \bullet \tab Recording multimedia data
\par \bullet \tab Exchanging multimedia data between applications and across platforms
\par \pard\plain \li720\sb240\widctlpar \fs20 Chapter 2, \ldblquote Resource Interchange File Format,\rdblquote  describes the RIFF format.
\par \pard\plain \s2\sb480\sa240\keepn\widctlpar \b\f55\fs40 Multimedia File Formats
\par \pard\plain \s56\li720\sb240\widctlpar \fs20 A number of RIFF-based and non-RIFF file formats have been defined for the storage of multimedia data. Chapter 3, \ldblquote Multimedia File Formats,\rdblquote  describes the following file formats:
\par \pard\plain \s43\fi-360\li1080\sb240\widctlpar \fs20 \bullet \tab Bundle File Format
\par \bullet \tab Device-Independent Bitmap (DIB) and RIFF DIB file formats
\par \bullet \tab Musical Instrument Digital Interface (MIDI) and RIFF MIDI file formats
\par \bullet \tab Palette File Format
\par \bullet \tab Rich Text File Format
\par \bullet \tab Waveform Audio File Format
\par \pard\plain \s2\sb480\sa240\keepn\widctlpar \b\f55\fs40 Media Control Interface
\par \pard\plain \s56\li720\sb240\widctlpar \fs20 The Media Control Interface (MCI) is a high-level control mechanism that provides a device-independent interface to multimedia devices and resource files.
\par \pard\plain \li720\sb240\widctlpar \fs20 
The Media Control Interface (MCI) provides a command set for playing and recording multimedia devices and resource files. Developers creating multimedia applications are encouraged to use this high-level command interface rather than the low-level functio
ns specific to each platform. The MCI command set acts as a platform-independent layer that sits between multimedia applications and the underlying system software. 
\par The MCI command set is extensible in two ways:
\par \pard\plain \s43\fi-360\li1080\sb240\widctlpar \fs20 \bullet \tab Developers can incorporate new multimedia devices and file formats in the MCI command set by creating new MCI drivers to interpret the commands.
\par \bullet \tab New commands and command options can be added to support special features or functions required by new multimedia devices or file formats.
\par \pard\plain \li720\sb240\widctlpar \fs20 Using MCI, an application can control multimedia devices using simple command strings like open, play, and c
lose. The MCI command strings provide a generic interface to different multimedia devices, reducing the number of commands a developer needs to learn. A multimedia application might even accept MCI commands from an end user and pass them unchanged to the 
MCI driver, which parses the command and performs the appropriate action.
\par Chapter 3, \ldblquote Media Control Interface,\rdblquote  describes MCI and its command set in detail.
\par \pard\plain \s2\sb480\sa240\keepn\widctlpar \b\f55\fs40 Registering Multimedia Formats
\par \pard\plain \s56\li720\sb240\widctlpar \fs20 This document discusses several multimedia codes and formats that require registration. These multimedia elements include the following:
\par \pard\plain \s43\fi-360\li1080\sb240\widctlpar \fs20 \bullet \tab Compression techniques
\par \bullet \tab RIFF form types, chunk IDs, and list types
\par \bullet \tab Compound-file usage codes
\par \bullet \tab Waveform audio format codes
\par \pard\plain \li720\sb240\widctlpar \fs20 To register these multimedia elements, request a {\i Multimedia Developer Registration Kit} from the following group:{\pard\plain \li720\sb240\widctlpar \v\fs20 {\xe {RIFF forms;registering}}}
\par \pard\plain \s38\li1080\sb240\widctlpar \fs20 Microsoft Corporation\line Multimedia Systems Group\line Product Marketing\line One Microsoft Way\line Redmond, WA 98052-6399
\par \pard\plain \li720\sb240\widctlpar \fs20 The {\i Multimedia Developer Registration Kit} also lists currently defined multimedia elements.
\par \pard\plain \s47\sb240\widctlpar \b\f55\expnd12\expndtw60 \column Chapter {\field{\*\fldinst SEQ chapter \\r2}{\fldrslt {\lang1024 2}}}
\par \pard\plain \s1\sa1200\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \brdrbtw\brdrs\brdrw15\brsp20 \b\f55\fs48 Resource Interchange File Format
\par \pard\plain \s56\li720\sb240\widctlpar \fs20 
The Resource Interchange File Format (RIFF) is a tagged file structure developed for use on multimedia platforms. This chapter defines RIFF and describes the file structures based on RIFF. If your application requires a new file format, you should define 
it using the RIFF tagged file structure described in this chapter. 
\par \pard\plain \s2\sb480\sa240\keepn\widctlpar \b\f55\fs40 About the RIFF Tagged File Format
\par \pard\plain \s56\li720\sb240\widctlpar \fs20 RIFF (Resource Interchange File Format) is the 
tagged file structure developed for multimedia resource files. The structure of a RIFF file is similar to the structure of an Electronic Arts IFF file. RIFF is not actually a file format itself (since it does not represent a specific kind of information),
 but its name contains the words \ldblquote interchange file format\rdblquote  in recognition of its roots in IFF. Refer to the EA IFF definition document, {\i EA IFF 85 Standard for Interchange Format Files}
, for a list of reasons to use a tagged file format.
\par \pard\plain \li720\sb240\widctlpar \fs20 RIFF has a counterpar
t, RIFX, that is used to define RIFF file formats that use the Motorola integer byte-ordering format rather than the Intel format. A RIFX file is the same as a RIFF file, except that the first four bytes are \lquote RIFX\rquote  instead of \lquote RIFF
\rquote , and integer byte ordering is represented in Motorola format.{\pard\plain \li720\sb240\widctlpar \v\fs20 {\xe {RIFF files;structure}}}{\pard\plain \li720\sb240\widctlpar \v\fs20 {\xe {File formats;Resource Interchange (RIFF)}}}
\par \pard\plain \s3\sb360\sa240\keepn\widctlpar \b\f55\fs28 Notation Conventions
\par \pard\plain \s56\li720\sb240\widctlpar \fs20 The following table lists some of the notation conventions used in this document. Further conventions and the notation for documenting RIFF forms are presented later in the document in the section \ldblquote 
Notation for Representing Sample RIFF Files.\rdblquote {\pard\plain \s56\li720\sb240\widctlpar \v\fs20 {\xe {RIFF files;notational conventions}}}\line 
\par \trowd \trgaph108\trleft612 \clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx3420\clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx8640 \pard\plain \s50\sb240\widctlpar\intbl \b\fs22 Notation\cell Description\cell \pard\plain \widctlpar\intbl \fs20 
\row \trowd \trgaph108\trleft612 \clbrdrt\brdrs\brdrw15 \cellx3420\clbrdrt\brdrs\brdrw15 \cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b <element label>}\cell RIFF file element with the label \ldblquote element label\rdblquote \cell 
\pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \cellx3420\cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b <element label: TYPE>}\cell RIFF file element with data type \ldblquote TYPE\rdblquote \cell \pard\plain 
\widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 [{\b <element label>}]\cell Optional RIFF file element\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b <element label>}...\cell 
One or more copies of the specified element\cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \clbrdrb\brdrs\brdrw15 \cellx3420\clbrdrb\brdrs\brdrw15 \cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 [{\b <element label>}]...
\cell Zero or more copies of the specified element\line \cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s3\sb360\sa240\keepn\widctlpar \b\f55\fs28 Chunks
\par \pard\plain \s56\li720\sb240\widctlpar \fs20 The basic building block of a RIFF file is called a {\i chunk}. Using C syntax, a chunk can be defined as follows:{\pard\plain \s56\li720\sb240\widctlpar \v\fs20 {\xe {RIFF chunk;defined in C syntax}}}
\par \pard\plain \s41\li864\sb240\widctlpar\tx1454\tx1829\tx2203\tx2578\tx2952\tx3326\tx3701\tx4075\tx4450\tx4824 \f3\fs16 typedef unsigned long DWORD;\line typedef unsigned char BYTE;\line \line typedef DWORD FOURCC;\tab \tab \tab \tab // Four-character code
\line \line typedef FOURCC CKID;\tab \tab \tab \tab // Four-character-code chunk identifier\line typedef DWORD CKSIZE;\tab \tab \tab \tab // 32-bit unsigned size value\line \line typedef struct \{\tab \tab \tab \tab \tab // Chunk structure\line \tab CKID
\tab     ckID;\tab \tab \tab \tab \tab // Chunk type identifier\line \tab CKSIZE\tab     ckSize;\tab \tab \tab \tab \tab // Chunk size field (size of ckData)\line \tab BYTE\tab     ckData[ckSize];\tab \tab \tab // Chunk data\line \} CK;
\par \pard\plain \li720\sb240\widctlpar \fs20 A FOURCC is represented as a sequence of one to four ASCII alphanumeric characters, padded on the right with blank characters (ASCII character value 32) as required, with no embedded blanks.{\pard\plain 
\li720\sb240\widctlpar \v\fs20 {\xe {DWORD, in RIFF chunk}}}{\pard\plain \li720\sb240\widctlpar \v\fs20 {\xe {RIFF files;FOURCC code in}}}{\pard\plain \li720\sb240\widctlpar \v\fs20 {\xe {BYTE, in RIFF chunk}}}{\pard\plain \li720\sb240\widctlpar \v\fs20 
{\xe {FOURCCdatatype;inRIFFchunk}}}
\par For example, the four-character code \lquote FOO\rquote  is stored as a sequence of four bytes: 'F', 'O', 'O', '\~' in ascending addresses. For quick comparisons, a four-character code may also be treated as a 32-bit number.
\par \pard\plain \s55\li720\sb240\sa240\widctlpar \fs20 The three parts of the chunk are described in the following table:{\pard\plain \s55\li720\sb240\sa240\widctlpar \v\fs20 {\xe {RIFF chunk;ID}}}{\pard\plain \s55\li720\sb240\sa240\widctlpar \v\fs20 {\xe {
RIFF chunk;size}}}
\par \trowd \trgaph108\trleft612 \clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx2160\clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx8640 \pard\plain \s50\sb240\widctlpar\intbl \b\fs22 Part\cell Description\cell \pard\plain \widctlpar\intbl \fs20 \row 
\trowd \trgaph108\trleft612 \clbrdrt\brdrs\brdrw15 \cellx2160\clbrdrt\brdrs\brdrw15 \cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b ckID}\cell A four-character code that identifies the representation of the chunk data {\b data}
. A program reading a RIFF file can skip over any chunk whose chunk ID it doesn't recognize; it simply skips the number of bytes specified by {\b ckSize }plus the pad byte, if present.\cell \pard\plain \widctlpar\intbl \fs20 \row \trowd 
\trgaph108\trleft612 \cellx2160\cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b ckSize}\cell A 32-bit unsigned value identifying the size of {\b ckData}. This size value does not include the size of the {\b ckID} or {\b ckSize}
 fields or the pad byte at the end of {\b ckData}.\cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \clbrdrb\brdrs\brdrw15 \cellx2160\clbrdrb\brdrs\brdrw15 \cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b ckData}\cell 
Binary data of fixed or variable size. The start of {\b ckData }is word-aligned with respect to the start of the RIFF file. If the chunk size is an odd number of bytes, a pad byte with value zero is written after {\b ckData}
. Word aligning improves access speed (for chunks resident in memory) and maintains compatibility with EA IFF. The {\b ckSize }value does not include the pad byte.\line \cell \pard\plain \widctlpar\intbl \fs20 \row \pard \li720\sb240\widctlpar 
We can represent a chunk with the following notation (in this example, the {\b ckSize }and pad byte are implicit):{\pard\plain \li720\sb240\widctlpar \v\fs20 {\xe {RIFF chunk;notation}}}
\par \pard\plain \s41\li864\sb240\widctlpar\tx1454\tx1829\tx2203\tx2578\tx2952\tx3326\tx3701\tx4075\tx4450\tx4824 \f3\fs16 <ckID> ( <ckData> )
\par \pard\plain \li720\sb240\widctlpar \fs20 Two types of chunks, the \lquote LIST\rquote  and \lquote RIFF\rquote 
 chunks, may contain nested chunks, or subchunks. These special chunk types are discussed later in this document. All other chunk types store a single element of binary data in {\b <ckData>}.
\par \pard\plain \s3\sb360\sa240\keepn\widctlpar \b\f55\fs28 RIFF Forms
\par \pard\plain \s56\li720\sb240\widctlpar \fs20 A RIFF form is a chunk with a \lquote RIFF\rquote  chunk ID. The term also refers to a file form
at that follows the RIFF framework. The following is the current list of registered RIFF forms. Each is described in Chapter 3, \ldblquote Multimedia File Formats.\rdblquote \line 
\par \trowd \trgaph108\trleft612 \clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx2880\clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx8640 \pard\plain \s50\sb240\widctlpar\intbl \b\fs22 Form Type\cell Description\cell \pard\plain \widctlpar\intbl \fs20 
\row \trowd \trgaph108\trleft612 \clbrdrt\brdrs\brdrw15 \cellx2880\clbrdrt\brdrs\brdrw15 \cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 PAL\cell RIFF Palette Format \cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 
\cellx2880\cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 RDIB\cell RIFF Device Independent Bitmap Format \cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 RMID\cell RIFF MIDI Format \cell \pard\plain 
\widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 RMMP\cell RIFF Multimedia Movie File Format\cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \clbrdrb\brdrs\brdrw15 \cellx2880\clbrdrb\brdrs\brdrw15 
\cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 WAVE\cell Waveform Audio Format\line \cell \pard\plain \widctlpar\intbl \fs20 \row \pard \li720\sb240\widctlpar Using the notation for representing a chunk, a RIFF form looks like the following:
{\pard\plain \li720\sb240\widctlpar \v\fs20 {\xe {RIFF chunk;RIFF form notation}}}
\par \pard\plain \s41\li864\sb240\widctlpar\tx1454\tx1829\tx2203\tx2578\tx2952\tx3326\tx3701\tx4075\tx4450\tx4824 \f3\fs16 RIFF ( <formType> <ck>... )
\par \pard\plain \li720\sb240\widctlpar \fs20 The first four bytes of a RIFF form make up a chunk ID with values \lquote R\rquote , \lquote I\rquote , \lquote F\rquote , \lquote F\rquote . The {\b ckSize }
field is required, but for simplicity it is omitted from the notation. 
\par The first DWORD of chunk data in the \lquote RIFF\rquote  chunk (shown above as {\b <formType>}) is a four-character code value identifying the data representation, or {\i form type}
, of the file. Following the form-type code is a series of subchunks. Which subchunks are present depends on the form type. The definition of a particular RIFF form typically includes the following:{\pard\plain \li720\sb240\widctlpar \v\fs20 {\xe {
RIFF chunk;in RIFF form}}}
\par \pard\plain \s43\fi-360\li1080\sb240\widctlpar \fs20 \bullet \tab A unique four-character code identifying the form type
\par \bullet \tab A list of mandatory chunks
\par \bullet \tab A list of optional chunks
\par \bullet \tab Possibly, a required order for the chunks
\par \pard\plain \s3\sb360\sa240\keepn\widctlpar \b\f55\fs28 Defining and Registering RIFF Forms 
\par \pard\plain \s56\li720\sb240\widctlpar \fs20 The form-type code for a RIFF form must be unique. To guarantee this uniqueness, you must register any new form types before release. See \ldblquote Registering Multimedia Formats\rdblquote  in Chapter 1, 
\ldblquote Overview of Multimedia Specifications,\rdblquote  for information on registering RIFF forms.
\par \pard\plain \li720\sb240\widctlpar \fs20 Like RIFF forms, RIFX forms must also be registered. Registering a RIFF form does not automatically register the RIFX counterpart. No RIFX form types are currently defined. 
\par \pard\plain \s4\li720\sb360\sa240\keepn\widctlpar \b\f55\fs28 Registered Form and Chunk Types
\par \pard\plain \s56\li720\sb240\widctlpar \fs20 
By convention, the form-type code for registered form types contains only digits and uppercase letters. Form-type codes that are all uppercase denote a registered, unique form type. Use lowercase letters for temporary or prototype chunk types.
{\pard\plain \s56\li720\sb240\widctlpar \v\fs20 {\xe {FOURCCdatatype;and registering form type}}}{\pard\plain \s56\li720\sb240\widctlpar \v\fs20 {\xe {RIFF chunk;registering}}}
\par \pard\plain \li720\sb240\widctlpar \fs20 
Certain chunk types are also globally unique and must also be registered before use. These registered chunk types are not specific to a certain form type; they can be used in any form. If a registered chunk type can be used to store your data, you should 
use the registered chunk type rather than define your own chunk type containing the same type of information. 
\par For example, a chunk with chunk ID \lquote INAM\rquote  always contains the name or title of a file. Also, within all RIFF files, filenames or titles are contained within chunks with ID \lquote INAM\rquote  and have a standard data format.
\par \pard\plain \s4\li720\sb360\sa240\keepn\widctlpar \b\f55\fs28 Unregistered (Form-Specific) Chunk Types
\par \pard\plain \s56\li720\sb240\widctlpar \fs20 
Chunk types that are used only in a certain form type use a lowercase chunk ID. A lowercase chunk ID has specific meaning only within the context of a specific form type. After a form designer is allocated a registered form type, the designer can choose l
owercase chunk types to use within that form. See \ldblquote Registering Multimedia Formats\rdblquote  in Chapter 1, \ldblquote Overview of Multimedia Specifications,\rdblquote  for information on registering form types.
\par \pard\plain \li720\sb240\widctlpar \fs20 For example, a chunk with ID \lquote scln\rquote  inside one form type might contain the \ldblquote number of scan lines.\rdblquote  Inside some other form type, a chunk with ID \lquote scln\rquote  might mean 
\ldblquote secondary lambda number.\rdblquote 
\par \pard\plain \s2\sa240\keepn\widctlpar \b\f55\fs40 \page Notation for Representing Sample RIFF Files
\par \pard\plain \s56\li720\sb240\widctlpar \fs20 
RIFF is a binary format, but it is easier to comprehend an ASCII representation of a RIFF file. This section defines a standard notation used to present samples of various types of RIFF files. If you define a RIFF form, we urge you to use this notation in
 any file format samples you provide in your documentation.{\pard\plain \s56\li720\sb240\widctlpar \v\fs20 {\xe {RIFF files;form notation}}}
\par \pard\plain \s3\sb360\sa240\keepn\widctlpar \b\f55\fs28 Basic Notation for Representing RIFF Files
\par \pard\plain \s56\li720\sb240\widctlpar \fs20 The following table summarizes the elements of the RIFF notation required for representing sample RIFF files:\line 
\par \trowd \trgaph108\trleft612 \clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx2880\clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx8640 \pard\plain \s50\sb240\widctlpar\intbl \b\fs22 Notation\cell Description\cell \pard\plain \widctlpar\intbl \fs20 
\row \trowd \trgaph108\trleft612 \clmgf \cellx8640\clmrg \cellx8640 \pard\plain \s53\sb120\widctlpar\intbl \b\fs20 <ckID> (<ckData>)\cell \pard\plain \li720\sb240\widctlpar\intbl \fs20 \cell \pard \widctlpar\intbl \row \trowd \trgaph108\trleft612 
\cellx2880\cellx8640 \pard \li720\sb240\widctlpar\intbl {\b \cell }\pard\plain \s51\sb120\widctlpar\intbl \fs20 The chunk with ID {\b <ckID>} and data {\b <ckData>}. As previously described, {\b <ckID>}
 is a four-character code which may be enclosed by single quotes for emphasis.
\par For example, the following notation describes a \lquote RIFF\rquote  chunk with a form type of \lquote QRST\rquote . The data portion of this chunk contains a \lquote FOO\rquote  subchunk.
\par \pard\plain \s52\sb120\widctlpar\intbl\tx389\tx763\tx1138\tx1512\tx1886\tx2261\tx2635\tx3010\tx3384\tx3758 \f3\fs16 RIFF('QRST' FOO(17 23))
\par \pard\plain \s51\sb120\widctlpar\intbl \fs20 The following example describes an \lquote ICOP\rquote  chunk containing the string \ldblquote Copyright Encyclopedia International.\rdblquote :
\par \pard\plain \s52\sb120\widctlpar\intbl\tx389\tx763\tx1138\tx1512\tx1886\tx2261\tx2635\tx3010\tx3384\tx3758 \f3\fs16 'ICOP' ("Copyright Encyclopedia International."Z)\cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \clmgf 
\cellx8640\clmrg \cellx8640 \pard\plain \s53\sb120\widctlpar\intbl \b\fs20 <number>[<modifier>]\cell \pard\plain \li720\sb240\widctlpar\intbl \fs20 \cell \pard \widctlpar\intbl \row \trowd \trgaph108\trleft612 \cellx2880\cellx8640 \pard 
\li720\sb240\widctlpar\intbl {\b \cell }\pard\plain \s51\sb120\widctlpar\intbl \fs20 A number in Intel format, where {\b <number>} is an optional sign (+\~or\~-) followed by one or more digits and modified by the optional {\b <modifier>}. Valid {\b 
<modifier>} values follow:
\par \pard \s51\fi-1080\li1080\sb120\widctlpar\intbl\brdrt\brdrs\brdrw15\brsp20 \brdrbtw\brdrs\brdrw15\brsp20 {\b Modifier\tab Meaning
\par }\pard \s51\fi-1080\li1080\sb120\widctlpar\intbl None\tab 16-bit number in decimal format
\par H\tab 16-bit number in hexadecimal format
\par C\tab 8-bit number in decimal format
\par CH\tab 8-bit number in hexadecimal format
\par L\tab 32-bit number in decimal format
\par \pard \s51\fi-1080\li1080\sb120\widctlpar\intbl\brdrb\brdrs\brdrw15\brsp20 \brdrbtw\brdrs\brdrw15\brsp20 LH\tab 32-bit number in hexadecimal format\line 
\par \pard \s51\sb120\widctlpar\intbl \cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s53\sb120\widctlpar\intbl \b\fs20 \cell \pard\plain \s51\sb120\widctlpar\intbl \fs20 Several examples follow:
\par \pard\plain \s52\sb120\widctlpar\intbl\tx389\tx763\tx1138\tx1512\tx1886\tx2261\tx2635\tx3010\tx3384\tx3758 \f3\fs16 0\line 65535\line -1\line 0L\line 4a3c89HL\line -1C\line 21HC
\par \pard\plain \s51\sb120\widctlpar\intbl \fs20 Note that -1 and 65535 represent the same value. The application reading this file must know whether to interpret the number as signed or unsigned.\cell \pard\plain \widctlpar\intbl \fs20 \row \trowd 
\trgaph108\trleft612 \clmgf \cellx8640\clmrg \cellx8640 \pard\plain \s53\sb120\widctlpar\intbl \b\fs20 '<chars>'{\pard\plain \s53\sb120\widctlpar\intbl \b\v\fs20 {\xe {RIFF chunk;FOURCC code notation}}}{\pard\plain \s53\sb120\widctlpar\intbl \b\v\fs20 
{\xe {FOURCC data type;RIFF chunk notation}}}\cell \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \cellx2880\cellx8640 \pard \li720\sb240\widctlpar\intbl \cell \pard\plain 
\s51\sb120\widctlpar\intbl \fs20 A four-character code (32-bit quantity) consisting of a sequence of zero to four ASCII characters {\b <chars>} in the given order. If {\b <chars>}
 is less than four characters long, it is implicitly padded on the right with blanks. Two single quotes is equivalent to four blanks. Examples follow.
\par \pard\plain \s52\sb120\widctlpar\intbl\tx389\tx763\tx1138\tx1512\tx1886\tx2261\tx2635\tx3010\tx3384\tx3758 \f3\fs16 'RIFF'\line 'xyz'\line ''
\par \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b <chars>} can include escape sequences, which are combinations of characters introduced by a backslash (\\) and used to represent other characters. Escape sequences are listed in the following section.\cell 
\pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\pard\plain \s51\sb120\widctlpar\intbl \b\v\fs20 {\xe {\b RIFF files;sample file notation strings}}}{\b "<string>"[<modifier>]}\cell 
The sequence of ASCII characters contained in {\b <string>} and modified by the optional modifier {\b <modifier>}. The quoted text can include any of the escape sequences listed in the following section. Valid {\b <modifier>} values follow:
\par \pard \s51\fi-1080\li1080\sb120\widctlpar\intbl\brdrt\brdrs\brdrw15\brsp20 \brdrbtw\brdrs\brdrw15\brsp20 {\b Modifier\tab Meaning
\par }\pard \s51\fi-1080\li1080\sb120\widctlpar\intbl none\tab No NULL terminator or size prefix.
\par Z\tab String is NULL-terminated
\par B\tab String has an 8-bit (byte) size prefix
\par W\tab String has a 16-bit (word) size prefix
\par BZ\tab String has a byte-size prefix and is NULL-terminated
\par \pard \s51\fi-1080\li1080\sb120\widctlpar\intbl\brdrb\brdrs\brdrw15\brsp20 \brdrbtw\brdrs\brdrw15\brsp20 WZ\tab String has a word-size prefix and is NULL-terminated\line 
\par \pard\plain \s52\sb120\widctlpar\intbl\tx389\tx763\tx1138\tx1512\tx1886\tx2261\tx2635\tx3010\tx3384\tx3758 \f3\fs16 \cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \clbrdrb\brdrs\brdrw15 \cellx2880\clbrdrb\brdrs\brdrw15 
\cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell 
NULL-terminated means that the string is followed by a character with ASCII value 0. A size prefix is an unsigned integer, stored as a byte or a word in Intel format preceding the string characters, that specifie
s the length of the string. In the case of strings with BZ or WZ modifiers, the size prefix specifies the size of the string without the terminating NULL.
\par The various string formats referred to above are discussed in "Storing Strings in RIFF Chunks," following later in this section., +
\par Examples follow:
\par \pard\plain \s52\sb120\widctlpar\intbl\tx389\tx763\tx1138\tx1512\tx1886\tx2261\tx2635\tx3010\tx3384\tx3758 \f3\fs16 "No prefix, no NULL terminator"\line "No prefix, NULL terminator"Z\line "Byte prefix, NULL terminator"BZ\line 
\par \cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s3\sb360\sa240\keepn\widctlpar \b\f55\fs28 Escape Sequences for Four-Character Codes and String Chunks
\par \pard\plain \s56\li720\sb240\widctlpar \fs20 The following escape sequences can be used in four-character codes and string chunks:{\pard\plain \s56\li720\sb240\widctlpar \v\fs20 {\xe {Strings,inRIFFchunk;escapesequences\rdblquote }}}{\pard\plain 
\s56\li720\sb240\widctlpar \v\fs20 {\xe {RIFF chunk;escape sequences}}}{\pard\plain \s56\li720\sb240\widctlpar \v\fs20 {\xe {Escape sequence;list of}}}{\pard\plain \s56\li720\sb240\widctlpar \v\fs20 {\xe {FOURCC data type;escape sequences}}}{\pard\plain 
\s56\li720\sb240\widctlpar \v\fs20 {\xe {RIFF files;escape sequences}}}{\pard\plain \s56\li720\sb240\widctlpar \v\fs20 {\xe {New line escape sequence}}}{\pard\plain \s56\li720\sb240\widctlpar \v\fs20 {\xe {Carriage return escape sequence}}}{\pard\plain 
\s56\li720\sb240\widctlpar \v\fs20 {\xe {Line feed escape sequence}}}{\pard\plain \s56\li720\sb240\widctlpar \v\fs20 {\xe {Tab escape sequence}}}{\pard\plain \s56\li720\sb240\widctlpar \v\fs20 {\xe {Backspace escape sequence\rdblquote }}}{\pard\plain 
\s56\li720\sb240\widctlpar \v\fs20 {\xe {Backslash escape sequence}}}{\pard\plain \s56\li720\sb240\widctlpar \v\fs20 {\xe {Quote character escape sequence}}}
\par \pard\plain \li720\sb240\widctlpar \fs20 
\par \trowd \trgaph108\trleft612 \clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx2880\clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx4320\clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx8640 \pard\plain \s50\sb240\widctlpar\intbl \b\fs22 
Escape Sequence\cell ASCII Value\cell Description\cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \clbrdrt\brdrs\brdrw15 \cellx2880\clbrdrt\brdrs\brdrw15 \cellx4320\clbrdrt\brdrs\brdrw15 \cellx8640 \pard\plain 
\s51\sb120\widctlpar\intbl \fs20 \\n\cell 10\cell Newline character\cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \cellx2880\cellx4320\cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 \\t\cell 9\cell 
Horizontal tab character\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \\b\cell 8\cell Backspace character\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \\r\cell 13
\cell Carriage return character\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \\f\cell 12\cell Form feed character\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \\\\
\cell 92\cell Backslash\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \\'\cell 39\cell Single quote\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \\"\cell 34\cell 
Double quote\cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \clbrdrb\brdrs\brdrw15 \cellx2880\clbrdrb\brdrs\brdrw15 \cellx4320\clbrdrb\brdrs\brdrw15 \cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 \\{\i ddd}\cell Octal {
\i ddd}\cell Arbitrary character\line \cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s3\sa240\keepn\widctlpar \b\f55\fs28 \page Extended Notation for Representing RIFF Form Definitions 
\par \pard\plain \s56\li720\sb240\widctlpar \fs20 To unambiguously define the structure of new RIFF forms, document the RIFF form using the basic notation along with the following extended notation:{\pard\plain \s56\li720\sb240\widctlpar \v\fs20 {\xe {
RIFF files;sample file notation}}}\line 
\par \trowd \trgaph108\trleft612 \clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx2160\clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx8640 \pard\plain \s50\sb240\widctlpar\intbl \b\fs22 Notation\cell Description\cell \pard\plain \widctlpar\intbl \fs20 
\row \trowd \trgaph108\trleft612 \clmgf \cellx2160\clmrg \cellx8640 \pard\plain \s53\sb120\widctlpar\intbl \b\fs20 <name>\cell \pard\plain \li720\sb240\widctlpar\intbl \fs20 \cell \pard \widctlpar\intbl \row \trowd \trgaph108\trleft612 \cellx2160
\cellx8640 \pard \li720\sb240\widctlpar\intbl {\b \cell }\pard\plain \s51\sb120\widctlpar\intbl \fs20 A label that refers to some element of the file, where {\b <name>} is the name of the label. Examples follow:
\par \pard\plain \s52\sb120\widctlpar\intbl\tx389\tx763\tx1138\tx1512\tx1886\tx2261\tx2635\tx3010\tx3384\tx3758 \f3\fs16 <NAME-ck>\line <GOBL-form>\line <bitmap-bits>\line <foo>
\par \pard\plain \s51\sb120\widctlpar\intbl \fs20 Conventionally, a label that refers to a chunk is named <ckID-ck>, where \lquote ckID\rquote  is the chunk ID. Similarly, a label that refers to a RIFF form is named <formType-form>, where \ldblquote formType
\rdblquote  is the name of the form's type.\cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \clmgf \cellx2160\clmrg \cellx8640 \pard\plain \s53\sb120\widctlpar\intbl \b\fs20 <name> {\f56\fs24 \'dd} elements\cell \pard\plain 
\li720\sb240\widctlpar\intbl \fs20 \cell \pard \widctlpar\intbl \row \trowd \trgaph108\trleft612 \cellx2160\cellx8640 \pard \li720\sb240\widctlpar\intbl \cell \pard\plain \s51\sb120\widctlpar\intbl \fs20 The actual data represented by {\b <name>}
 is defined as {\b elements}.
\par This states that {\b <name>} is an abbreviation for {\b elements}, where {\b elements} is a sequence of other labels and literal data. An example follows:
\par \pard\plain \s52\sb120\widctlpar\intbl\tx389\tx763\tx1138\tx1512\tx1886\tx2261\tx2635\tx3010\tx3384\tx3758 \f3\fs16 <GOBL-form> {\f56\fs24 \'dd} RIFF ( 'GOBL' <form-data> )
\par \pard\plain \s51\sb120\widctlpar\intbl \fs20 This example defines label <GOBL-form> as representing a RIFF form with chunk ID \lquote GOBL\rquote 
 and data equal to <form-data>, where <form-data> is a label that would be defined in another rule. Note that a label may represent any data, not just a RIFF chunk or form.
\par {\b\i Note:} A number of atomic labels are defined in the section \ldblquote Atomic Labels\rdblquote  later in this document. These labels refer to primitive data types.\cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \clmgf 
\cellx2160\clmrg \cellx8640 \pard\plain \s53\sb120\widctlpar\intbl \b\fs20 <name:type>\cell \pard\plain \li720\sb240\widctlpar\intbl \fs20 \cell \pard \widctlpar\intbl \row \trowd \trgaph108\trleft612 \cellx2160\cellx8640 \pard 
\li720\sb240\widctlpar\intbl {\b \cell }\pard\plain \s51\sb120\widctlpar\intbl \fs20 This is the same as {\b <name>}, but it also defines {\b <name>} to be equivalent to {\b <type>}. This notation obviates the following rule:
\par \pard\plain \s52\sb120\widctlpar\intbl\tx389\tx763\tx1138\tx1512\tx1886\tx2261\tx2635\tx3010\tx3384\tx3758 \f3\fs16 <name> {\f56\fs24 \'dd} <type>
\par \pard\plain \s51\sb120\widctlpar\intbl \fs20 This allows you to give a symbolic name to an element of a file format and to specify the element data type. An example follows:
\par \pard\plain \s52\sb120\widctlpar\intbl\tx389\tx763\tx1138\tx1512\tx1886\tx2261\tx2635\tx3010\tx3384\tx3758 \f3\fs16 <xyz-coordinate> {\f56\fs24 \'dd} <x:INT> <y:INT> <z:INT>
\par \pard\plain \s51\sb120\widctlpar\intbl \fs20 This defines <xyz-coordinate> to consist of three parts concatenated together: <x>, <y>, and <z>. The definition also specifies that <x>, <y>, and <z> are integers. This notation is equivalent to the following:

\par \pard\plain \s52\sb120\widctlpar\intbl\tx389\tx763\tx1138\tx1512\tx1886\tx2261\tx2635\tx3010\tx3384\tx3758 \f3\fs16 <xyz-coordinate> {\f56\fs24 \'dd} <x> <y> <z>\line <x> {\f56\fs24 \'dd} <INT>\line <y> {\f56\fs24 \'dd} <INT>\line <z> {\f56\fs24 \'dd}
 <INT>\cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \clmgf \cellx2160\clmrg \cellx8640 \pard\plain \s53\sb120\widctlpar\intbl \b\fs20 [elements]\cell \pard\plain \li720\sb240\widctlpar\intbl \fs20 \cell \pard \widctlpar\intbl 
\row \trowd \trgaph108\trleft612 \cellx2160\cellx8640 \pard \li720\sb240\widctlpar\intbl {\b \cell }\pard\plain \s51\sb120\widctlpar\intbl \fs20 
An optional sequence of labels and literal data. Surrounded by square brackets, it may be considered an element itself. An example follows:
\par \pard\plain \s52\sb120\widctlpar\intbl\tx389\tx763\tx1138\tx1512\tx1886\tx2261\tx2635\tx3010\tx3384\tx3758 \f3\fs16 <FOO-form> {\f56\fs24 \'dd} RIFF('FOO' [<header-ck>] <data-ck>)
\par \pard\plain \s51\sb120\widctlpar\intbl \fs20 This example defines form \ldblquote FOO\rdblquote  with an optional header chunk followed by a mandatory data chunk.\cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \clmgf \cellx2160
\clmrg \cellx8640 \pard\plain \s53\sb120\widctlpar\intbl \b\fs20 el1 | el2 | ... | elN\cell \pard\plain \li720\sb240\widctlpar\intbl \fs20 \cell \pard \widctlpar\intbl \row \trowd \trgaph108\trleft612 \cellx2160\cellx8640 \pard 
\li720\sb240\widctlpar\intbl \cell \pard\plain \s51\sb120\widctlpar\intbl \fs20 Exactly one of the listed elements must be present. An example follows:
\par \pard\plain \s52\sb120\widctlpar\intbl\tx389\tx763\tx1138\tx1512\tx1886\tx2261\tx2635\tx3010\tx3384\tx3758 \f3\fs16 <hdr-ck> {\f56\fs24 \'dd} hdr(<hdr-x> | <hdr-y> | <hdr-z>)
\par \pard\plain \s51\sb120\widctlpar\intbl \fs20 This example defines the \lquote hdr\rquote  chunk's data as containing one of <hdr-x>, <hdr-y>, or <hdr-z>.\cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \clmgf \cellx2160\clmrg 
\cellx8640 \pard\plain \s53\sb120\widctlpar\intbl \b\fs20 element...\cell \pard\plain \li720\sb240\widctlpar\intbl \fs20 \cell \pard \widctlpar\intbl \row \trowd \trgaph108\trleft612 \cellx2160\cellx8640 \pard \li720\sb240\widctlpar\intbl \cell 
\pard\plain \s51\sb120\widctlpar\intbl \fs20 One or more occurrences of {\b element} may be present. An ellipsis has this meaning only if it follows an element; in cases such as \ldblquote el1\~|\~el2\~|\~...\~|\~elN,\rdblquote 
 the ellipsis has its ordinary English meaning. If there is any possibility of confusion, an ellipsis should only be used to indicate one or more occurrences. An example follows:
\par \pard\plain \s52\sb120\widctlpar\intbl\tx389\tx763\tx1138\tx1512\tx1886\tx2261\tx2635\tx3010\tx3384\tx3758 \f3\fs16 <data-ck> {\f56\fs24 \'dd} data(<count:INT> <item:INT>...)
\par \pard\plain \s51\sb120\widctlpar\intbl \fs20 This example defines the data of the \lquote data\rquote  chunk to contain an integer <count>, followed by one or more occurrences of the integer <item>. \cell \pard\plain \widctlpar\intbl \fs20 \row \trowd 
\trgaph108\trleft612 \clmgf \cellx2160\clmrg \cellx8640 \pard\plain \s53\sb120\widctlpar\intbl \b\fs20 [element]...\cell \pard\plain \li720\sb240\widctlpar\intbl \fs20 \cell \pard \widctlpar\intbl \row \trowd \trgaph108\trleft612 \cellx2160\cellx8640 
\pard \li720\sb240\widctlpar\intbl {\b \cell }\pard\plain \s51\sb120\widctlpar\intbl \fs20 Zero or more occurrences of {\b element} may be present. An example follows.
\par \pard\plain \s52\sb120\widctlpar\intbl\tx389\tx763\tx1138\tx1512\tx1886\tx2261\tx2635\tx3010\tx3384\tx3758 \f3\fs16 <data-ck> {\f56\fs24 \'dd} data(<count:INT> [<item:INT>]...)
\par \pard\plain \s51\sb120\widctlpar\intbl \fs20 This example defines the data of the \lquote data\rquote  chunk to contain an integer <count> followed by zero or more occurrences of an integer <item>.\cell \pard\plain \widctlpar\intbl \fs20 \row \trowd 
\trgaph108\trleft612 \clmgf \cellx2160\clmrg \cellx8640 \pard\plain \s53\sb120\widctlpar\intbl \b\fs20 \{elements\}\cell \pard\plain \li720\sb240\widctlpar\intbl \fs20 \cell \pard \widctlpar\intbl \row \trowd \trgaph108\trleft612 \cellx2160\cellx8640 
\pard \li720\sb240\widctlpar\intbl \cell \pard\plain \s51\sb120\widctlpar\intbl \fs20 The group of elements within the braces should be considered a single element. An example follows:
\par \pard\plain \s52\sb120\widctlpar\intbl\tx389\tx763\tx1138\tx1512\tx1886\tx2261\tx2635\tx3010\tx3384\tx3758 \f3\fs16 <blorg> {\f56\fs24 \'dd} <this> | \{<that> | <other>\}...
\par \pard\plain \s51\sb120\widctlpar\intbl \fs20 This example defines <blorg> to be either <this> or one or more occurrences of <that> or <other>, intermixed in any way. Contrast this with the following example:
\par \pard\plain \s52\sb120\widctlpar\intbl\tx389\tx763\tx1138\tx1512\tx1886\tx2261\tx2635\tx3010\tx3384\tx3758 \f3\fs16 <blorg> {\f56\fs24 \'dd} <this> | <that> | <other>...
\par \pard\plain \s51\sb120\widctlpar\intbl \fs20 This example defines <blorg> to be either <this> or <that> or one or more occurrences of <other>.\line \cell \pard\plain \widctlpar\intbl \fs20 \row \pard \li720\sb240\widctlpar {\b \page 
\par }\trowd \trgaph108\trleft612 \clmgf \cellx2160\clmrg \cellx8640 \pard\plain \s53\sb120\widctlpar\intbl \b\fs20 struct \{ ...\} name\cell \pard\plain \li720\sb240\widctlpar\intbl \fs20 \cell \pard \widctlpar\intbl \row \trowd \trgaph108\trleft612 
\cellx2160\cellx8640 \pard \li720\sb240\widctlpar\intbl \cell \pard\plain \s51\sb120\widctlpar\intbl \fs20 
A structure defined using C syntax. This can be used instead of a sequence of labels if a C header (include) file is available that defines the structure. The label used to refer to the structure should be the same as the structure's typedef name. An exam
ple follows:
\par \pard\plain \s52\sb120\widctlpar\intbl\tx389\tx763\tx1138\tx1512\tx1886\tx2261\tx2635\tx3010\tx3384\tx3758 \f3\fs16 <3D_POINT> {\f56\fs24 \'dd} struct \{\line \tab \tab \tab \tab \tab INT x; \tab \tab     \tab // x-coordinate\line \tab \tab \tab \tab 
\tab INT y;\tab \tab \tab \tab // y-coordinate\line \tab \tab \tab \tab \tab INT z;\tab \tab \tab \tab // z-coordinate\line \tab \tab \tab \tab \} 3D_POINT
\par \pard\plain \s51\sb120\widctlpar\intbl \fs20 Wherever possible, the types used in the structure should be the types listed in the following section, \ldblquote Atomic Labels,\rdblquote 
 because these types are more portable than C types such as int. The structure fields are assumed to be present in the file in the order given, with no padding or forced alignment.
\par Unless the RIFF chunk ID is \lquote RIFX\rquote , integer byte ordering is assumed to be in Intel format.\cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \clmgf \cellx2160\clmrg \cellx8640 \pard\plain \s51\sb120\widctlpar\intbl 
\fs20 {\b // comment}\cell \pard\plain \li720\sb240\widctlpar\intbl \fs20 \cell \pard \widctlpar\intbl \row \trowd \trgaph108\trleft612 \clbrdrb\brdrs\brdrw15 \cellx2160\clbrdrb\brdrs\brdrw15 \cellx8640 \pard \li720\sb240\widctlpar\intbl {\b \cell 
}\pard\plain \s51\sb120\widctlpar\intbl \fs20 An explanatory comment to a rule. An example follows:
\par \pard\plain \s52\sb120\widctlpar\intbl\tx389\tx763\tx1138\tx1512\tx1886\tx2261\tx2635\tx3010\tx3384\tx3758 \f3\fs16 <weekend> {\f56\fs24 \'dd} 'Sat'|'Sun'\tab  \tab // Four-character code \line \tab \tab \tab \tab \tab \tab \tab \tab // for day\line 
\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s3\sb360\sa240\keepn\widctlpar \b\f55\fs28 Atomic Labels
\par \pard\plain \s56\li720\sb240\widctlpar \fs20 The following are atomic labels, which are labels that refer to primitive data types. Where available, the equivalent Microsoft C data type is also listed.\line {\pard\plain \s56\li720\sb240\widctlpar \v\fs20 
{\xe {Datatypelabels}}}{\pard\plain \s56\li720\sb240\widctlpar \v\fs20 {\xe {Atomic labels}}}{\pard\plain \s56\li720\sb240\widctlpar \v\fs20 {\xe {RIFF files;primitive data type labels}}}
\par \trowd \trgaph108\trleft612 \clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx2160\clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx5400\clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx8640 \pard\plain \s50\sb240\widctlpar\intbl \b\fs22 Label\cell 
Meaning\cell  MS C Type\cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \clbrdrt\brdrs\brdrw15 \cellx2160\clbrdrt\brdrs\brdrw15 \cellx5400\clbrdrt\brdrs\brdrw15 \cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 <CHAR>\cell 
8-bit signed integer\cell signed char\cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \cellx2160\cellx5400\cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 <BYTE>\cell 8-bit unsigned quantity\cell unsigned char\cell 
\pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 <INT>\cell 16-bit signed integer in Intel format\cell signed int\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 <WORD>\cell 
16-bit unsigned quantity in Intel format\cell unsigned int\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 <LONG>\cell 32-bit signed integer in Intel format\cell signed long\cell \pard\plain \widctlpar\intbl 
\fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 <DWORD>\cell 32-bit unsigned quantity in Intel format\cell unsigned long\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 <FLOAT>\cell 
32-bit IEEE floating point number\cell float\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 <DOUBLE>\cell 64-bit IEEE floating point number\cell double \cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain 
\s51\sb120\widctlpar\intbl \fs20 <STR>\cell String (a sequence of characters)\cell \pard\plain \li720\sb240\widctlpar\intbl \fs20 \cell \pard \widctlpar\intbl \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 <ZSTR>\cell NULL-terminated string\cell 
\pard\plain \li720\sb240\widctlpar\intbl \fs20 \cell \pard \widctlpar\intbl \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 <BSTR>\cell String with byte (8-bit) size prefix\cell \pard\plain \li720\sb240\widctlpar\intbl \fs20 \cell \pard 
\widctlpar\intbl \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 <WSTR>\cell String with word (16-bit) size prefix\cell \pard\plain \li720\sb240\widctlpar\intbl \fs20 \cell \pard \widctlpar\intbl \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 <BZSTR>
\cell NULL-terminated string with byte size prefix\cell \pard\plain \li720\sb240\widctlpar\intbl \fs20 \cell \pard \widctlpar\intbl \row \trowd \trgaph108\trleft612 \clbrdrb\brdrs\brdrw15 \cellx2160\clbrdrb\brdrs\brdrw15 \cellx5400\clbrdrb\brdrs\brdrw15 
\cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 <WZSTR>\cell NULL-terminated string with word size prefix\line \cell \pard\plain \li720\sb240\widctlpar\intbl \fs20 \cell \pard \widctlpar\intbl \row \pard \li720\sb240\widctlpar 
NULL-terminated means that the string is followed by a character with ASCII value 0.
\par A size prefix is an unsigned integer, stored as a byte or a word in Intel format, that specifies the length of the string. In the case of strings with BZ or WZ modifiers, the size prefix specifies the size of the string without the terminating NULL.

\par \pard\plain \s46\li720\sb240\widctlpar \f55\fs20 {\b\i Note:} The WINDOWS.H header file defines the C types BYTE, WORD, LONG, and DWORD. These types correspond to labels <BYTE>, <WORD>, <LONG>, and <DWORD>, respectively.
\par \pard\plain \s3\sb360\sa240\keepn\widctlpar \b\f55\fs28 A Sample RIFF Form Definition and RIFF Form 
\par \pard\plain \s56\li720\sb240\widctlpar \fs20 The following example defines <GOBL-form>, the hypothetical RIFF form of type \lquote GOBL\rquote 
. To fully document a new RIFF form definition, a developer would also provide detailed descriptions of each file element, including the semantics of each chunk and sample files documented using the standard notation.{\pard\plain 
\s56\li720\sb240\widctlpar \v\fs20 {\xe {RIFF forms;example of definition}}}
\par \pard\plain \s41\li720\sb240\widctlpar\tx1094\tx1469\tx1843\tx2218\tx2592\tx2966\tx3341\tx3715\tx4090\tx4464\tx4838\tx5213\tx5587\tx5962\tx6336 \f3\fs16 <GOBL-form> {\f56\fs24 \'dd} \tab \tab RIFF( 'GOBL' \tab \tab \tab \tab // RIFF form header\line \tab 
\tab \tab       \tab \tab \tab [<org-ck>]\tab \tab \tab // Origin chunk (default (0,0,0))\line \tab \tab \tab \tab \tab \tab \tab <obj-list>)\tab \tab \tab // Series of graphical objects\line \line <org-ck> {\f56\fs24 \'dd} \tab \tab org( \tab 
<origin:3D_POINT> )\tab \tab \tab // Object-list origin\line \line \tab \tab \tab \tab \tab \tab \tab \tab \tab \tab \tab \tab // An object is a:\line <obj-list> {\f56\fs24 \'dd} \tab \tab LIST(\tab 'obj'\tab \{\tab <sqr-ck>  |\tab \tab \tab \tab \tab 
// square,\line \tab \tab \tab \tab     \tab    \tab \tab \tab  \tab <circ-ck> |\tab \tab \tab \tab \tab // circle,\line \tab \tab \tab \tab       \tab  \tab \tab \tab  \tab <poly-ck>  \}... )\tab \tab \tab // or polygon\line \line <sqr-ck> {\f56\fs24 
\'dd} \tab \tab sqr(\tab <pt1:3D_POINT>\tab \tab \tab // one vertex\line \tab \tab \tab \tab \tab \tab \tab <pt2:3D_POINT>\tab \tab \tab // another vertex\line \tab \tab \tab \tab \tab \tab \tab <pt3:3D_POINT> )\tab \tab // a third vertex\line \line 
<circ-ck> {\f56\fs24 \'dd \tab \tab }circ(\tab <center:3D_POINT> \tab \tab \tab // Center of circle\line \tab \tab \tab \tab \tab \tab \tab <circumPt:3D_POINT> ) \tab \tab // Point on circumference\line \line <poly-ck> {\f56\fs24 \'dd} \tab \tab 
poly( <pt:3D_POINT>... )\tab \tab // List of points in a polygon\line \line <3D_POINT> {\f56\fs24 \'dd} \tab \tab struct\tab \tab \tab \tab \tab \tab // Defined in "gobl.h"\line \tab \tab \tab \tab \tab \{\tab INT x;\tab \tab \tab \tab \tab \tab 
// x-coordinate\line \tab \tab \tab \tab \tab \tab INT y;\tab \tab \tab \tab \tab \tab // y-coordinate\line \tab \tab \tab \tab \tab \tab INT z;\tab \tab \tab \tab \tab \tab // z-coordinate\line \tab \tab \tab \tab \tab \} 3D_POINT
\par \pard\plain \s5\li720\sb240\keepn\widctlpar \b\f55\fs20 Sample RIFF Form
\par \pard\plain \s56\li720\sb240\widctlpar \fs20 The following sample RIFF form adheres to the form definition for form type GOBL. The file contains three subchunks:{\pard\plain \s56\li720\sb240\widctlpar \v\fs20 {\xe {RIFF forms;example}}}{\pard\plain 
\s56\li720\sb240\widctlpar \v\fs20 {\xe {RIFF chunk;example}}}
\par \pard\plain \s43\fi-360\li1080\sb240\widctlpar \fs20 \bullet \tab An \lquote INFO\rquote  list
\par \bullet \tab An \lquote org\rquote  chunk
\par \bullet \tab An \lquote obj\rquote  chunk
\par \pard\plain \li720\sb240\widctlpar \fs20 The \lquote INFO\rquote  list and \lquote org\rquote  chunk each have two subchunks. The \lquote INFO\rquote  list is a registered global chunk that can be used within any RIFF file. The \lquote INFO\rquote 
 list is described in the \lquote INFO List Chunk,\rdblquote  later in this chapter.{\pard\plain \li720\sb240\widctlpar \v\fs20 {\xe {RIFF chunk;INFO chunk}}}{\pard\plain \li720\sb240\widctlpar \v\fs20 {\xe {INFO chunk}}}{\pard\plain 
\li720\sb240\widctlpar \v\fs20 {\xe {RIFF files;INFO chunk}}}
\par Since the definition of the GOBL form does not refer to the INFO chunk, software that expects only \lquote org\rquote  and \lquote obj\rquote  chunks in a GOBL form would ignore the unknown \lquote INFO\rquote  chunk.
\par \pard\plain \s41\li864\sb240\widctlpar\tx1454\tx1829\tx2203\tx2578\tx2952\tx3326\tx3701\tx4075\tx4450\tx4824 \f3\fs16 RIFF( 'GOBL'\line \tab     LIST('INFO'\tab \tab \tab // INFO list containing filename and copyright\line \tab \tab     \tab 
INAM("A House"Z)\line \tab \tab     \tab ICOP("(C) Copyright Encyclopedia International 1991"Z)\line \tab \tab \tab   )\line \line \tab \tab org(2, 0, 0)\tab \tab // Origin of object list\line \line \tab \tab LIST('obj' \tab \tab \tab 
// Object list containing two polygons\line \tab \tab \tab \tab poly(0,0,0  2,0,0  2,2,0, 1,3,0, 0,2,0)\line \tab \tab \tab \tab poly(0,0,5  2,0,5  2,2,5, 1,3,5, 0,2,5)\line \tab \tab \tab  )\line     )\tab \tab \tab \tab \tab \tab // End of form
\par \pard\plain \s2\sb480\sa240\keepn\widctlpar \b\f55\fs40 Storing Strings in RIFF Chunks
\par \pard\plain \s56\li720\sb240\widctlpar \fs20 This section lists methods for storing text strings in RIFF chunks. While these guidelines may not make sense for all applications, you should follow these conventions if you must make an arbitrary dec
ision regarding string storage.{\pard\plain \s56\li720\sb240\widctlpar \v\fs20 {\xe {RIFF chunk;text strings in}}}
\par \pard\plain \s4\li720\sb360\sa240\keepn\widctlpar \b\f55\fs28 NULL-Terminated String (ZSTR) Format{\pard\plain \s4\li720\sb360\sa240\keepn\widctlpar \b\v\f55\fs28 {\xe {ZSTR format, in RIFF chunk}}}
\par \pard\plain \s56\li720\sb240\widctlpar \fs20 
A NULL-terminated string (ZSTR) consists of a series of characters followed by a terminating NULL character. The ZSTR is better than a simple character sequence (STR) because many programs are easier to write if strings are NULL-terminated. ZSTR is prefer
red to a string with a size prefix (BSTR or WSTR) because the size of the string is already available as the {\b <ckSize> }value, minus one for the terminating NULL character.{\pard\plain \s56\li720\sb240\widctlpar \v\fs20 {\xe {WSTR format, in RIFF chunk
}}}{\pard\plain \s56\li720\sb240\widctlpar \v\fs20 {\xe {BSTR format, in RIFF chunk}}}
\par \pard\plain \s4\li720\sa240\keepn\widctlpar \b\f55\fs28 \page String Table Format{\pard\plain \s4\li720\sa240\keepn\widctlpar \b\v\f55\fs28 {\xe {String table format, in RIFF chunk}}}
\par \pard\plain \s56\li720\sb240\widctlpar \fs20 
In a string table, all strings used in a structure are stored at the end of the structure in packed format. The structure includes fields that specify the offsets from the beginning of the string table to the individual strings. An example follows:
\par \pard\plain \s41\li864\sb240\widctlpar\tx1454\tx1829\tx2203\tx2578\tx2952\tx3326\tx3701\tx4075\tx4450\tx4824 \f3\fs16 typedef struct \tab \tab \line \{ \tab \tab \tab \line \tab INT\tab \tab iWidgetNumber;\tab \tab // the widget number\line \tab WORD\tab 
offszWidgetName;\tab // an offset to a string in <rgchStrTab>\line \tab WORD\tab offszWidgetDesc;\tab // an offset to a string in <rgchStrTab>\line \tab INT\tab \tab iQuantity;\tab \tab \tab // how many widgets\line \tab CHAR\tab rgchStrTab[1];\tab \tab 
// string table (allocate as large as needed)\line \}\tab WIDGET;
\par \pard\plain \li720\sb240\widctlpar \fs20 
If multiple chunks within the file need to reference variable-length strings, you can store the strings in a single chunk that acts as a string table. The chunks that refer to the strings contain offsets relative to the beginning of the data part of the s
tring table chunk.
\par \pard\plain \s4\li720\sb360\sa240\keepn\widctlpar \b\f55\fs28 NULL-Terminated, Byte Size Prefix String (BZSTR) Series{\pard\plain \s4\li720\sb360\sa240\keepn\widctlpar \b\v\f55\fs28 {\xe {BZSTR format, in RIFF chunk}}}
\par \pard\plain \s56\li720\sb240\widctlpar \fs20 
In a BZSTR series, a series of strings is stored in packed format. Each string is a BZSTR, with a byte size prefix and a NULL terminator. This format retains the ease-of-use characteristics of the ZSTR while providing the string size, allowing the applica
tion to quickly skip unneeded strings.
\par \pard\plain \s4\li720\sb360\sa240\keepn\widctlpar \b\f55\fs28 Multiline String Format
\par \pard\plain \s56\li720\sb240\widctlpar \fs20 When storing multiline strings, separate lines with a carriage return/line feed pair (ASCII 13/ASCII 10
 pair). Although applications vary in their requirements for new line symbols (carriage return only, line feed only, or both), it is generally easier to strip out extra characters than to insert extra ones. Inserting characters might require reallocating 
memory blocks or pre-scanning the chunk before allocating memory for it.{\pard\plain \s56\li720\sb240\widctlpar \v\fs20 {\xe {Multiline string format, in RIFF chunk}}}
\par \pard\plain \s4\li720\sb360\sa240\keepn\widctlpar \b\f55\fs28 Choosing a Storage Method
\par \pard\plain \s56\li720\sb240\widctlpar \fs20 The following lists guidelines for deciding which storage method is appropriate for your application. {\pard\plain \s56\li720\sb240\widctlpar \v\fs20 {\xe {Strings, in RIFF chunk;storage methods}}}
\par \pard\plain \li720\sb240\widctlpar \fs20 
\par \trowd \trgaph108\trleft612 \clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx4932\clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx8640 \pard\plain \s50\sb240\widctlpar\intbl \b\fs22 Usage\cell Recommended Format\cell \pard\plain \widctlpar\intbl 
\fs20 \row \trowd \trgaph108\trleft612 \clbrdrt\brdrs\brdrw15 \cellx4932\clbrdrt\brdrs\brdrw15 \cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 Chunk data contains nothing except a string\cell ZSTR (NULL-terminated string) format. \cell 
\pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \cellx4932\cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 Chunk data contains a number of fields, some of which are variable-length strings\cell String-table format \cell 
\pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 Multiple chunks within the file need to reference variable-length strings\cell String-table format \cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain 
\s51\sb120\widctlpar\intbl \fs20 Chunk data stores a sequence of strings, some of which the application may want to skip\cell BZSTR (NULL-terminated string with byte size prefix) series \cell \pard\plain \widctlpar\intbl \fs20 \row \trowd 
\trgaph108\trleft612 \clbrdrb\brdrs\brdrw15 \cellx4932\clbrdrb\brdrs\brdrw15 \cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 Chunk data contains multiline strings\cell A multiline string format \line \cell \pard\plain \widctlpar\intbl \fs20 \row 
\pard\plain \s2\sa240\keepn\widctlpar \b\f55\fs40 LIST Chunk
\par \pard\plain \s56\li720\sb240\widctlpar \fs20 A LIST chunk contains a list, or ordered sequence, of subchunks. A LIST chunk is defined as follows:
\par \pard\plain \s41\li864\sb240\widctlpar\tx1454\tx1829\tx2203\tx2578\tx2952\tx3326\tx3701\tx4075\tx4450\tx4824 \f3\fs16 LIST( <list-type> [<chunk>]... )
\par \pard\plain \li720\sb240\widctlpar \fs20 The {\b <list-type> }is a four-character code that identifies the contents of the list.
\par If an application recognizes the list type, it should know how to interpret the sequence of subchunks. However, since a LIST chunk may contain only subchunks (after the list type), an application that does not know ab
out a specific list type can still walk through the sequence of subchunks.
\par Like chunk IDs, list types must be registered, and an all-lowercase list type has meaning relative to the form that contains it. See \ldblquote Registering Multimedia Formats\rdblquote  in Chapter 1, \ldblquote Overview of Multimedia Specifications,
\rdblquote  for information on registering list types.
\par \pard\plain \s3\sb360\sa240\keepn\widctlpar \b\f55\fs28 INFO List Chunk
\par \pard\plain \s56\li720\sb240\widctlpar \fs20 The \lquote INFO\rquote  list is a registered global form type that can store information that helps identify the contents of the chunk. This information is useful but doe
s not affect the way a program interprets the file; examples are copyright information and comments. An \lquote INFO\rquote  list is a \lquote LIST\rquote  chunk with list type \lquote INFO\rquote . The following shows a sample \lquote INFO\rquote 
 list chunk:
\par \pard\plain \s41\li864\sb240\widctlpar\tx1454\tx1829\tx2203\tx2578\tx2952\tx3326\tx3701\tx4075\tx4450\tx4824 \f3\fs16 LIST('INFO'\tab INAM("Two Trees"Z) \line \tab \tab \tab ICMT("A picture for the opening screen"Z) )
\par \pard\plain \s55\li720\sb240\sa240\widctlpar \fs20 An \lquote INFO\rquote 
 list should contain only the following chunks. New chunks may be defined, but an application should ignore any chunk it doesn't understand. The chunks listed below may only appear in an \lquote INFO\rquote  list. Each chunk contains
 a ZSTR, or null-terminated text string.
\par \trowd \trgaph108\trleft612 \clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx2160\clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx8640 \pard\plain \s50\sb240\widctlpar\intbl \b\fs22 Chunk ID\cell  Description\cell \pard\plain \widctlpar\intbl \fs20 
\row \trowd \trgaph108\trleft612 \clbrdrt\brdrs\brdrw15 \cellx2160\clbrdrt\brdrs\brdrw15 \cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 IARL\cell {\i Archival Location.} Indicates where the subject of the file is archived.\cell \pard\plain 
\widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \cellx2160\cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 IART\cell {\i Artist.} Lists the artist of the original subject of the file. For example, \ldblquote Michaelangelo.\rdblquote \cell 
\pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 ICMS\cell {\i Commissioned.} Lists the name of the person or organization that commissioned the subject of the file. For example, \ldblquote Pope Julian II.\rdblquote 
\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 ICMT\cell {\i Comments.}
 Provides general comments about the file or the subject of the file. If the comment is several sentences long, end each sentence with a period. Do {\i not} include newline characters.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain 
\s51\sb120\widctlpar\intbl \fs20 ICOP\cell {\i Copyright.} Records the copyright information for the file. For example, \ldblquote Copyright Encyclopedia International 1991.\rdblquote 
 If there are multiple copyrights, separate them by a semicolon followed by a space.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 ICRD\cell {\i Creation date.}
 Specifies the date the subject of the file was created. List dates in year-month-day format, padding one-digit months and days with a zero on the left. For example, \ldblquote 1553-05-03\rdblquote  for May 3, 1553.\cell \pard\plain \widctlpar\intbl 
\fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 ICRP\cell {\i Cropped.} Describes whether an image has been cropped and, if so, how it was cropped. For example, \ldblquote lower right corner.\rdblquote \cell \pard\plain \widctlpar\intbl \fs20 
\row \pard\plain \s51\sb120\widctlpar\intbl \fs20 IDIM\cell {\i Dimensions.} Specifies the size of the original subject of the file. For example, \ldblquote 8.5 in h, 11 in w.\rdblquote \cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain 
\s51\sb120\widctlpar\intbl \fs20 IDPI\cell {\i Dots Per Inch.} Stores dots per inch setting of the digitizer used to produce the file, such as \ldblquote 300.\rdblquote \cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl 
\fs20 IENG\cell {\i Engineer.} Stores the name of the engineer who worked on the file. If there are multiple engineers, separate the names by a semicolon and a blank. For example, \ldblquote Smith, John; Adams, Joe.\rdblquote \cell \pard\plain 
\widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 IGNR\cell {\i Genre.} Describes the original work, such as, \ldblquote landscape,\rdblquote  \ldblquote portrait,\rdblquote  \ldblquote still life,\rdblquote  etc.\cell \pard\plain 
\widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 IKEY\cell {\i Keywords.} Provides a list of keywords that refer to the file or subject of the file. Separate multiple keywords with a semicolon and a blank. For example, \ldblquote 
Seattle; aerial view; scenery.\rdblquote \cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 ILGT\cell {\i Lightness.} Describes the changes in lightness settings on the digitizer required to produce the file. No
te that the format of this information depends on hardware used.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 IMED\cell {\i Medium.} Describes the original subject of the file, such as, \ldblquote 
computer image,\rdblquote  \ldblquote drawing,\rdblquote  \ldblquote lithograph,\rdblquote  and so forth.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 INAM\cell {\i Name.}
 Stores the title of the subject of the file, such as, \ldblquote Seattle From Above.\rdblquote \cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 IPLT\cell {\i Palette Setting.}
 Specifies the number of colors requested when digitizing an image, such as \ldblquote 256.\rdblquote \cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 IPRD\cell {\i Product.}
 Specifies the name of the title the file was originally intended for, such as \ldblquote Encyclopedia of Pacific Northwest Geography.\rdblquote \cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 ISBJ\cell {\i 
Subject.} Describes the conbittents of the file, such as \ldblquote Aerial view of Seattle.\rdblquote \cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 ISFT\cell {\i Software.}
 Identifies the name of the software package used to create the file, such as \ldblquote Microsoft WaveEdit.\rdblquote \cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 ISHP\cell {\i Sharpness.}
 Identifies the changes in sharpness for the digitizer required to produce the file (the format depends on the hardware used).\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 ISRC\cell {\i Source.}
 Identifies the name of the person or organization who supplied the original subject of the file. For example, \ldblquote Trey Research.\rdblquote \cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 ISRF\cell {\i 
Source Form.} Identifies the original form of the material that was digitized, such as \ldblquote slide,\rdblquote  \ldblquote paper,\rdblquote  \ldblquote map,\rdblquote  and so forth. This is not necessarily the same as IMED.\cell \pard\plain 
\widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \clbrdrb\brdrs\brdrw15 \cellx2160\clbrdrb\brdrs\brdrw15 \cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 ITCH\cell {\i Technician.}
 Identifies the technician who digitized the subject file. For example, \ldblquote Smith, John.\rdblquote \line \cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s2\sa240\keepn\widctlpar \b\f55\fs40 \page CSET (Character Set) Chunk
\par \pard\plain \s56\li720\sb240\widctlpar \fs20 
To define character-set and language information for a RIFF file, use the CSET chunk. The CSET chunk defines the code page and country,  language, and dialect codes for the file. These values can be overridden for specific file elements; see \ldblquote 
Usage Codes for Extra Header and Extra Entry Fields,\rdblquote  later in this chapter, for information on specifying character set information in a compound file.
\par \pard\plain \li720\sb240\widctlpar \fs20 The CSET chunk is defined as follows:
\par \pard\plain \s41\li864\sb240\widctlpar\tx1454\tx1829\tx2203\tx2578\tx2952\tx3326\tx3701\tx4075\tx4450\tx4824 \f3\fs16 <CSET chunk> {\f56\fs24 \'dd} CSET(\tab <wCodePage:WORD>
\par \pard\plain \s42\li864\widctlpar\tx1454\tx1829\tx2203\tx2578\tx2952\tx3326\tx3701\tx4075\tx4450\tx4824 \f3\fs16 \tab \tab \tab \tab \tab \tab <wCountryCode:WORD>
\par \tab \tab \tab \tab \tab \tab <wLanguageCode:WORD>
\par \tab \tab \tab \tab \tab \tab <wDialect:WORD> )
\par \pard\plain \s55\li720\sb240\sa240\widctlpar \fs20 The fields are as follows:
\par \trowd \trgaph108\trleft612 \clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx3600\clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx8640 \pard\plain \s50\sb240\widctlpar\intbl \b\fs22 Field\cell Description\cell \pard\plain \widctlpar\intbl \fs20 
\row \trowd \trgaph108\trleft612 \clbrdrt\brdrs\brdrw15 \cellx3600\clbrdrt\brdrs\brdrw15 \cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b wCodePage}\cell 
Specifies the code page used for file elements. If the CSET chunk is not present, or if this field has value zero, assume standard ISO 8859/1 code page (identical to code page 1004 without code points defined in hex columns 0, 1, 8, and 9).\cell 
\pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \cellx3600\cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b wCountryCode}\cell Specifies the country code used for file elements. See \ldblquote Country Codes,\rdblquote 
 following this section, for a list of currently defined country codes.
\par If the CSET chunk is not present, or if this field has value zero, assume USA (country code 001). \cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \clbrdrb\brdrs\brdrw15 \cellx3600\clbrdrb\brdrs\brdrw15 \cellx8640 \pard\plain 
\s51\sb120\widctlpar\intbl \fs20 {\b wLanguage}, \line {\b wDialect}\cell Specify the language and dialect used for file elements. See \ldblquote Language and Dialect Codes,\rdblquote  later in this chapter, for a list of language and dialect codes.

\par If the CSET chunk is not present, or if these fields have value zero, assume US English (language code 9, dialect code 1).\line \cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s3\sb360\sa240\keepn\widctlpar \b\f55\fs28 Country Codes
\par \pard\plain \s56\li720\sb240\widctlpar \fs20 Use one of the following country codes in the {\b wCountryCode} field:\line 
\par \trowd \trgaph108\trleft612 \clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx2880\clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx8640 \pard\plain \s50\sb240\widctlpar\intbl \b\fs22 Country Code\cell Country\cell \pard\plain \widctlpar\intbl \fs20 
\row \trowd \trgaph108\trleft612 \clbrdrt\brdrs\brdrw15 \cellx2880\clbrdrt\brdrs\brdrw15 \cellx8640 \pard\plain \s51\sb240\widctlpar\intbl \fs20 000\cell None (ignore this field)\cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 
\cellx2880\cellx8640 \pard\plain \s51\widctlpar\intbl \fs20 001\cell USA\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\widctlpar\intbl \fs20 002 \cell Canada\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\widctlpar\intbl 
\fs20 003\cell Latin America\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\widctlpar\intbl \fs20 030\cell Greece\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\widctlpar\intbl \fs20 031\cell Netherlands\cell \pard\plain 
\widctlpar\intbl \fs20 \row \pard\plain \s51\widctlpar\intbl \fs20 032\cell Belgium\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\widctlpar\intbl \fs20 033\cell France\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain 
\s51\widctlpar\intbl \fs20 034\cell Spain\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\widctlpar\intbl \fs20 039\cell Italy\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\widctlpar\intbl \fs20 041\cell Switzerland\cell 
\pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\widctlpar\intbl \fs20 043\cell Austria\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\widctlpar\intbl \fs20 044\cell United Kingdom\cell \pard\plain \widctlpar\intbl \fs20 \row 
\pard\plain \s51\widctlpar\intbl \fs20 045\cell Denmark\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\widctlpar\intbl \fs20 046\cell Sweden\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\widctlpar\intbl \fs20 047\cell Norway
\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\widctlpar\intbl \fs20 049\cell West Germany\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\widctlpar\intbl \fs20 052\cell Mexico\cell \pard\plain \widctlpar\intbl \fs20 \row 
\pard\plain \s51\widctlpar\intbl \fs20 055\cell Brazil\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\widctlpar\intbl \fs20 061\cell Australia\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\widctlpar\intbl \fs20 064\cell 
New Zealand\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\widctlpar\intbl \fs20 081\cell Japan\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\widctlpar\intbl \fs20 082\cell Korea\cell \pard\plain \widctlpar\intbl \fs20 \row 
\pard\plain \s51\widctlpar\intbl \fs20 086\cell People\rquote s Republic of China\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\widctlpar\intbl \fs20 088\cell Taiwan\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain 
\s51\widctlpar\intbl \fs20 090\cell Turkey\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\widctlpar\intbl \fs20 351\cell Portugal\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\widctlpar\intbl \fs20 352\cell Luxembourg\cell 
\pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\widctlpar\intbl \fs20 354\cell Iceland\cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \clbrdrb\brdrs\brdrw15 \cellx2880\clbrdrb\brdrs\brdrw15 \cellx8640 \pard\plain 
\s51\widctlpar\intbl \fs20 358 \cell Finland\line \cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s3\sb360\sa240\keepn\widctlpar \b\f55\fs28 Language and Dialect Codes
\par \pard\plain \s56\li720\sb240\widctlpar \fs20 Specify one of the following pairs of language-code and dialect-code values in the {\b wLanguage} and {\b wDialect} fields:\line 
\par \trowd \trgaph108\trleft612 \clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx2880\clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx4680\clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx8640 \pard\plain \s50\sb240\widctlpar\intbl \b\fs22 
Language Code\cell Dialect Code\cell Language\cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \clbrdrt\brdrs\brdrw15 \cellx2880\clbrdrt\brdrs\brdrw15 \cellx4680\clbrdrt\brdrs\brdrw15 \cellx8640 \pard\plain 
\s51\sb240\widctlpar\intbl \fs20 0\cell 0\cell None (ignore these fields)\cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \cellx2880\cellx4680\cellx8640 \pard\plain \s51\widctlpar\intbl \fs20 1\cell 1\cell Arabic\cell \pard\plain 
\widctlpar\intbl \fs20 \row \pard\plain \s51\widctlpar\intbl \fs20 2\cell 1\cell Bulgarian\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\widctlpar\intbl \fs20 3\cell 1\cell Catalan\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain 
\s51\widctlpar\intbl \fs20 4\cell 1\cell Traditional Chinese\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\widctlpar\intbl \fs20 4\cell 2\cell Simplified Chinese\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain 
\s51\widctlpar\intbl \fs20 5\cell 1\cell Czech\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\widctlpar\intbl \fs20 6\cell 1\cell Danish\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\widctlpar\intbl \fs20 7\cell 1\cell 
German\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\widctlpar\intbl \fs20 7\cell 2\cell Swiss German\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\widctlpar\intbl \fs20 8\cell 1\cell Greek\cell \pard\plain 
\widctlpar\intbl \fs20 \row \pard\plain \s51\widctlpar\intbl \fs20 9\cell 1\cell US English\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\widctlpar\intbl \fs20 9\cell 2\cell UK English\cell \pard\plain \widctlpar\intbl \fs20 \row 
\pard\plain \s51\widctlpar\intbl \fs20 10\cell 1\cell Spanish\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\widctlpar\intbl \fs20 10\cell 2\cell Spanish Mexican\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\widctlpar\intbl 
\fs20 11\cell 1\cell Finnish\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\widctlpar\intbl \fs20 12\cell 1\cell French\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\widctlpar\intbl \fs20 12\cell 2\cell Belgian French\cell 
\pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\widctlpar\intbl \fs20 12\cell 3\cell Canadian French\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\widctlpar\intbl \fs20 12\cell 4\cell Swiss French\cell \pard\plain 
\widctlpar\intbl \fs20 \row \pard\plain \s51\widctlpar\intbl \fs20 13\cell 1\cell Hebrew\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\widctlpar\intbl \fs20 14\cell 1\cell Hungarian\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain 
\s51\widctlpar\intbl \fs20 15\cell 1\cell Icelandic\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\widctlpar\intbl \fs20 16\cell 1\cell Italian\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\widctlpar\intbl \fs20 16\cell 2
\cell Swiss Italian\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\widctlpar\intbl \fs20 17\cell 1\cell Japanese\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\widctlpar\intbl \fs20 18\cell 1\cell Korean\cell \pard\plain 
\widctlpar\intbl \fs20 \row \pard\plain \s51\widctlpar\intbl \fs20 19\cell 1\cell Dutch\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\widctlpar\intbl \fs20 19\cell 2\cell Belgian Dutch\cell \pard\plain \widctlpar\intbl \fs20 \row 
\pard\plain \s51\widctlpar\intbl \fs20 20\cell 1\cell Norwegian - Bokmal\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\widctlpar\intbl \fs20 20\cell 2\cell Norwegian - Nynorsk\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain 
\s51\widctlpar\intbl \fs20 21\cell 1\cell Polish\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\widctlpar\intbl \fs20 22\cell 1\cell Brazilian Portuguese\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\widctlpar\intbl \fs20 22
\cell 2\cell Portuguese\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\widctlpar\intbl \fs20 23\cell 1\cell Rhaeto-Romanic\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\widctlpar\intbl \fs20 24\cell 1\cell Romanian\cell 
\pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\widctlpar\intbl \fs20 25\cell 1\cell Russian\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\widctlpar\intbl \fs20 26\cell 1\cell Serbo-Croatian (Latin)\cell \pard\plain 
\widctlpar\intbl \fs20 \row \pard\plain \s51\widctlpar\intbl \fs20 26\cell 2\cell Serbo-Croatian (Cyrillic)\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\widctlpar\intbl \fs20 27\cell 1\cell Slovak\cell \pard\plain \widctlpar\intbl \fs20 
\row \pard\plain \s51\widctlpar\intbl \fs20 28\cell 1\cell Albanian\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\widctlpar\intbl \fs20 29\cell 1\cell Swedish\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\widctlpar\intbl 
\fs20 30\cell 1\cell Thai\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\widctlpar\intbl \fs20 31\cell 1\cell Turkish\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\widctlpar\intbl \fs20 32\cell 1\cell Urdu\cell \pard\plain 
\widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \clbrdrb\brdrs\brdrw15 \cellx2880\clbrdrb\brdrs\brdrw15 \cellx4680\clbrdrb\brdrs\brdrw15 \cellx8640 \pard\plain \s51\widctlpar\intbl \fs20 33\cell 1\cell Bahasa\line \cell \pard\plain 
\widctlpar\intbl \fs20 \row \pard\plain \s2\sb480\sa240\keepn\widctlpar \b\f55\fs40 JUNK (Filler) Chunk
\par \pard\plain \s56\li720\sb240\widctlpar \fs20 A JUNK chunk represents padding, filler or outdated information. It contains no relevant data; it is a space filler of arbitrary size. The JUNK chunk is defined as follows:
\par \pard\plain \s41\li864\sb240\widctlpar\tx1454\tx1829\tx2203\tx2578\tx2952\tx3326\tx3701\tx4075\tx4450\tx4824 \f3\fs16 <JUNK chunk> {\f56\fs24 \'dd} JUNK( <filler> )
\par \pard\plain \li720\sb240\widctlpar \fs20 where {\b <filler>} contains random data. 
\par \pard\plain \s2\sb480\sa240\keepn\widctlpar \b\f55\fs40 Compound File Structure
\par \pard\plain \s56\li720\sb240\widctlpar \fs20 The compound file structure is a RIFF-based structure upon which multimedia file formats can be defined. The compound file structure is a parameterized structure that provides for the following:
\par \pard\plain \s43\fi-360\li1080\sb240\widctlpar \fs20 \bullet \tab Storage of multimedia data elements
\par \bullet \tab Direct access to multimedia data elements (as opposed to sequential searching)
\par \pard\plain \li720\sb240\widctlpar \fs20 The goals of the compound file structure are to maximize flexibility and extensibility while minimizing implementation costs. Using the compound file structure, developers of multimedia data formats
 can define both simple and complex file formats.
\par The structure is flexible enough to be used for many purposes, but it can be simplified for use with simple file formats. Designers of new multimedia file formats can restrict the use of standard header fields, requiring some and removing others.
\par For example, a developer might define a compound file format that stores a series of bitmaps in a single file, thus reducing compact disc seek times. Another developer might define a compound file format that contai
ns a special type of audio resource, using the compound file header information to identify the attributes of the audio data stored within.
\par \pard\plain \s3\sb360\sa240\keepn\widctlpar \b\f55\fs28 Structural Overview
\par \pard\plain \s56\li720\sb240\widctlpar \fs20 Files based upon the compound file structure contain the following two RIFF chunks at their topmost level:
\par \pard\plain \s43\fi-360\li1080\sb240\widctlpar \fs20 \bullet \tab Compound File Table of Contents (CTOC) chunk
\par \bullet \tab Compound File Element Group (CGRP) chunk
\par \pard\plain \li720\sb240\widctlpar \fs20 The CTOC chunk indexes the CGRP chunk, which contains the actual multimedia data elements. Defined using the standard chunk notation, a compound file is represented as follows:
\par \pard\plain \s41\li864\sb240\widctlpar\tx1454\tx1829\tx2203\tx2578\tx2952\tx3326\tx3701\tx4075\tx4450\tx4824 \f3\fs16 <compound file> {\f56\fs24 \'dd} RIFF('type' <CTOC> <CGRP>)
\par \pard\plain \li720\sb240\widctlpar \fs20 where 'type' is a FOURCC indicating the file type.
\par This section describes the CTOC and CGRP chunks in detail.
\par \pard\plain \s3\sb360\sa240\keepn\widctlpar \b\f55\fs28 Compound File Table of Contents (CTOC) Chunk
\par \pard\plain \s56\li720\sb240\widctlpar \fs20 
The CTOC chunk functions mainly as an index, allowing direct access to elements within a compound file. The CTOC chunk also contains information about the attributes of the entire file and of each media element within the file.
\par \pard\plain \li720\sb240\widctlpar \fs20 To provide the maximum flexibility for defining compound file 
formats, the CTOC chunk can be customized at several levels. The CTOC chunk contains fields whose length and usage is defined by other CTOC fields. This parameterization adds complexity, but it provides flexibility to file format designers and allows appl
ications to correctly read data without necessarily knowing the specific file format definition.
\par \pard\plain \s4\li720\sb360\sa240\keepn\widctlpar \b\f55\fs28 Structural Overview
\par \pard\plain \s56\li720\sb240\widctlpar \fs20 The CTOC chunk defines the contents of the CGRP chunk. The CTOC chunk has the following components:
\par \pard\plain \s43\fi-360\li1080\sb240\widctlpar \fs20 \bullet \tab Header information defining the size of the CTOC chunk, the number of entries in the CGRP chunk, the size of the CGRP chunk, and general information about the entire header file 
\par \bullet \tab A parameter table definition defining the size and contents of the header parameter table and CTOC table entries
\par \bullet \tab A header parameter table defining attributes that apply to the entire compound file.
\par \bullet \tab CTOC table entries defining the location, size, name, and attributes of the compound file elements contained in the CGRP chunk.
\par \pard\plain \li720\sb240\widctlpar \fs20 These components appear sequentially in the CTOC chunk. The individual fields in the CTOC chunk are the following:
\par \pard\plain \s41\li864\sb240\widctlpar\tx1454\tx1829\tx2203\tx2578\tx2952\tx3326\tx3701\tx4075\tx4450\tx4824 \f3\fs16 <CTOC-chunk>{\f56\fs24 \'dd} CTOC (\line \tab <dwHeaderSize:DWORD>\tab \tab \tab \tab // Header information\line \tab 
<dwEntriesTotal:DWORD>\line \tab <dwEntriesDeleted:DWORD>\line \tab <dwEntriesUnused:DWORD>\line \tab <dwBytesTotal:DWORD>\line \tab <dwBytesDeleted:DWORD>\line \tab <dwHeaderFlags:DWORD>\line \line \tab <wEntrySize:WORD>\tab \tab \tab \tab \tab 
// Parameter table definition\line \tab <wNameSize:WORD>\line \tab <wExHdrFields:WORD>\line \tab <wExEntFields:WORD>\line \tab <awExHdrFldUsage:WORD[wExHdrFields]>\line \tab <awExEntFldUsage:WORD[wExEntFields]>\line \line \tab \tab \tab \tab \tab \tab 
\tab \tab \tab \tab // Header parameter table\line \tab <adwExHdrField:DWORD[wExHdrFields]>\line \tab [<bHeaderPad:BYTE>]\line \tab [<CTOC-table-entry>]\tab \tab \tab \tab // CTOC table entries\line )
\par \pard\plain \li720\sb240\widctlpar \fs20 Each CTOC table entry is defined as follows:
\par \pard\plain \s41\li864\sb240\widctlpar\tx1454\tx1829\tx2203\tx2578\tx2952\tx3326\tx3701\tx4075\tx4450\tx4824 \f3\fs16 <CTOC-table-entry> {\f56\fs24 \'dd \line \tab }<dwOffset:DWORD>\line \tab <dwSize:DWORD>\line \tab <dwMedType:DWORD>\line \tab 
<dwMedUsage:DWORD>\line \tab <dwCompressTech:DWORD>\line \tab <dwUncompressBytes:DWORD>\line \tab <adwExEntField:DWORD[wExEntFields]>\line \tab <bEntryFlags:BYTE>\line \tab <achName:CHAR[wNameSize]>\line \tab [<bEntryPad:BYTE>]...
\par \pard\plain \li720\sb240\widctlpar \fs20 The following sections describe each field in detail.
\par \pard\plain \s4\li720\sa240\keepn\widctlpar \b\f55\fs28 \page Header Information
\par \pard\plain \s56\li720\sb240\widctlpar \fs20 The header information section defines general information about the CTOC header and about the entire compound file. It contains the following fields:
\par \pard\plain \li720\sb240\widctlpar \fs20 
\par \trowd \trgaph108\trleft612 \clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx2880\clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx8640 \pard\plain \s50\sb240\widctlpar\intbl \b\fs22 Field Name\cell Description\cell \pard\plain \widctlpar\intbl 
\fs20 \row \trowd \trgaph108\trleft612 \clbrdrt\brdrs\brdrw15 \cellx2880\clbrdrt\brdrs\brdrw15 \cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b dwHeaderSize}\cell 
Combined size of header information, parameter table definition, and header parameter table. Use this value to locate the start of the CTOC table entries within the CTOC chunk.\cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 
\cellx2880\cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b dwEntriesTotal}\cell Total number of CTOC table entries, including unused entries and entries corresponding to deleted elements.\cell \pard\plain \widctlpar\intbl \fs20 \row 
\pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b dwEntriesDeleted}\cell Number of CTOC table entries that correspond to deleted elements.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b dwEntriesUnused}\cell 
Number of CTOC table entries that are unused.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b dwBytesTotal}\cell Combined size of all CGRP elements, including deleted elements.\cell \pard\plain 
\widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b dwBytesDeleted}\cell Combined size of all deleted CGRP elements.\cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \clbrdrb\brdrs\brdrw15 \cellx2880
\clbrdrb\brdrs\brdrw15 \cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b dwHeaderFlags}\cell Flags that give information about the entire compound file. The following flags may be used:
\par \pard\plain \s54\fi-360\li360\sb120\widctlpar\intbl \fs20 CTOC_HF_SEQUENTIAL\line Valid CTOC table entries are arranged in sequential order. If this flag is not set, the CTOC table entries may be in an arbitrary order.
\par CTOC_HF_MEDSUBTYPE\line The {\b dwMedUsage} field of each CTOC table entry contains a FOURCC that indicates how the element is used. If this flag is not set, the {\b dwMedUsage} field contains information as defined by the form type.\line \cell 
\pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s4\li720\sb360\sa240\keepn\widctlpar \b\f55\fs28 Parameter Table Definition
\par \pard\plain \s56\li720\sb240\widctlpar \fs20 The parameter table definition defines the size and contents of the header parameter table and CTOC table. It contains the following fields:
\par \pard\plain \li720\sb240\widctlpar \fs20 
\par \trowd \trgaph108\trleft612 \clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx2880\clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx8640 \pard\plain \s50\sb240\widctlpar\intbl \b\fs22 Field Name\cell Description\cell \pard\plain \widctlpar\intbl 
\fs20 \row \trowd \trgaph108\trleft612 \clbrdrt\brdrs\brdrw15 \cellx2880\clbrdrt\brdrs\brdrw15 \cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b wEntrySize}\cell Size of each CTOC table entry, including any pad bytes.\cell \pard\plain 
\widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \cellx2880\cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b wNameSize}\cell Size of the {\b achName} field of each CTOC table entry. Each {\b achName}
 field must be padded with null characters to this length. The {\b achName} field is a null-terminated string, so it always contains at least one trailing null character.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl 
\fs20 {\b wExHdrFields}\cell Number of extra header fields, or entries in the {\b awExHdrFldUsage} and {\b adwExHdrField} arrays.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b wExEntFields}\cell 
Number of extra entry fields, or entries in the {\b awExEntFldUsage} and {\b adwExHdrField} arrays.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b awExHdrFldUsage}\cell 
Array of extra header field usage fields. Each entry in this array corresponds to the same numbered entry in the {\b adwExHdrField} array and defines how that entry is interpreted. Valid usage codes for each field in this array are listed in \ldblquote 
Usage Codes for Extra Header and Extra Entry Fields,\rdblquote  later in this chapter. The number of WORDs in this array is defined by the {\b wExHdrFields} value.\cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \clbrdrb
\brdrs\brdrw15 \cellx2880\clbrdrb\brdrs\brdrw15 \cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b awExEntFldUsage}\cell Array of extra entry field usage fields. Each entry in this array corresponds to the same numbered entry in the {\b 
adwExEntField} array, present in each CTOC table entry, and defines how that entry is interpreted. Valid usage codes for each field in this array are listed in \ldblquote Usage Codes for Extra Header and Extra Entry Fields,\rdblquote 
 later in this chapter. The number of WORDs in this array is defined by the {\b wExEntFields} value.\line \cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s4\li720\sb360\sa240\keepn\widctlpar \b\f55\fs28 Header Parameter Table
\par \pard\plain \s56\li720\sb240\widctlpar \fs20 The header parameter table is an optional component generally used to define attributes of the entire compound file.\line 
\par \trowd \trgaph108\trleft612 \clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx2880\clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx8640 \pard\plain \s50\sb240\widctlpar\intbl \b\fs22 Field Name\cell Type\cell \pard\plain \widctlpar\intbl \fs20 \row 
\trowd \trgaph108\trleft612 \clbrdrt\brdrs\brdrw15 \cellx2880\clbrdrt\brdrs\brdrw15 \cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b adwExHdrField}\cell 
Extra header fields. The usage of each cell in the array is defined by the corresponding cell in the {\b awExHdrFldUsage} array.
\par The number of DWORDs in this array is defined by the {\b wExHdrFields} value.\cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \clbrdrb\brdrs\brdrw15 \cellx2880\clbrdrb\brdrs\brdrw15 \cellx8640 \pard\plain 
\s51\sb120\widctlpar\intbl \fs20 {\b bHeaderPad}\cell Zero or more NULL pad bytes. There must be enough padding in this field to make the CTOC header an even number of bytes in length.\line \cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain 
\s4\li720\sb360\sa240\keepn\widctlpar \b\f55\fs28 CTOC Table Entries
\par \pard\plain \s56\li720\sb240\widctlpar \fs20 The CTOC table entries define the location, size, name, and other information about the individual compound file elements contained in the CGRP chunk. The number of CTOC table entries is determined by the {\b 
dwEntriesTotal} field in the header information of the CTOC chunk. 
\par \pard\plain \s55\li720\sa240\widctlpar \fs20 \page Each CTOC table entry is a structure containing the following fields:
\par \trowd \trgaph108\trleft612 \clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx2880\clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx8640 \pard\plain \s50\sb240\widctlpar\intbl \b\fs22 Field Name\cell Description\cell \pard\plain \widctlpar\intbl 
\fs20 \row \trowd \trgaph108\trleft612 \clbrdrt\brdrs\brdrw15 \cellx2880\clbrdrt\brdrs\brdrw15 \cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b dwOffset}\cell 
Byte offset of the compound file element measured from the beginning of the data portion of the CGRP chunk.
\par For example, if {\b dwOffset} is 1000 and the chunk ID of the CGRP chunk is at offset 500, the element is at offset 1508 (1000+500+4 (chunk ID)+4 (chunk size field)).\cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \cellx2880
\cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b dwSize}\cell Size of the element in bytes.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b dwMedType}\cell 
FOURCC value identifying the media element type of the compound file element. This field may be zero if the compound file element is not to be interpreted as a standalone file. If the compound file element is a RIFF form, then the media element type is th
e same as the RIFF form type.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b dwMedUsage}\cell Extra usage information for the compound file element.
\par If the CTOC_HF_MEDSUBTYPE flag is set in the {\b dwHeaderFlags} field, this field contains a FOURCC that indicates how the element is used. To avoid name conflicts, this FOURCC must be registered. See \ldblquote Registering Multimedia Formats\rdblquote 
 in Chapter 1, \ldblquote Overview of Multimedia Specifications,\rdblquote  for information on usage codes.
\par If the CTOC_HF_MEDSUBTYPE flag is not set in the {\b dwHeaderFlags} field, this field contains 32 bits of information interpreted as defined by the form type.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b 
dwCompressTech}\cell Compression technique used to compress the media element. If this value is zero, the element is not compressed. See \ldblquote Compression of Compound File Elements,\rdblquote  later in this chapter, for more information.\cell 
\pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b dwUncompressBytes}\cell 
Number of bytes the compound file element occupies in memory after decompression. This value assumes the decompression technique identified in the {\b dwCompressTech} field. If the {\b dwCompressTech}
 field is 0, then the compound file element is not compressed, and this field should equal the {\b dwSize} field.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b adwExEntField}\cell 
Array of extra entry fields defining attributes of this compound file element. The usage of each cell in the array is defined by the corresponding cell in the {\b awExEntFldUsage} array.
\par The number of DWORDs in this array is defined by the {\b wExEntFields} value.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b bEntryFlags}\cell 
Flags giving information about the compound file element or this CTOC table entry. Possible values follow; these may be combined:
\par \pard\plain \s54\fi-360\li360\sb120\widctlpar\intbl \fs20 CTOC_EF_DELETED\line Compound file is marked as deleted and should not be accessed. Do not combine this flag with the CTOC_EF_UNUSED flag.
\par CTOC_EF_UNUSED\line CTOC table entry is unused and does not refer to any compound file element. This entry can be used to refer to a new compound file element. Do not combine this flag with the CTOC_EF_DELETED flag.\cell \pard\plain \widctlpar\intbl 
\fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b achName}\cell Array of characters containing the name of the compound file element. The number of bytes in this array is defined by the {\b wNameSize} value.
\par The string must be padded on the right with NULL characters and must be terminated by at least one NULL character. This field must be an odd number of bytes in length and must be at least one byte long.\cell \pard\plain \widctlpar\intbl \fs20 \row \trowd 
\trgaph108\trleft612 \clbrdrb\brdrs\brdrw15 \cellx2880\clbrdrb\brdrs\brdrw15 \cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b bEntryPad}\cell Zero or more NULL pad bytes as needed to make the table entry an even number of bytes in length.\line 
\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s4\li720\sb360\sa240\keepn\widctlpar \b\f55\fs28 Usage Codes for Extra Header and Extra Entry Fields
\par \pard\plain \s56\li720\sb240\widctlpar \fs20 The following are valid usage codes for elements in the {\b awExHdrFldUsage} and {\b awExEntFldUsage} arrays, both of which are fields of the CTOC header. These arrays define the meaning of data stored in the {
\b adwExHdrField} and {\b adwExEntField} \ldblquote extra fields.\rdblquote  All usage codes apply to both header fields and entry fields, unless explicitly stated otherwise.
\par \pard\plain \s55\li720\sb240\sa240\widctlpar \fs20 
Values marked in the extra header field arrays generally apply to all elements in the CFRG chunk, while values marked in the extra entry field arrays generally apply only to the element referenced by the corresponding CTOC table entry.
\par \trowd \trgaph108\trleft612 \clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx3600\clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx8640 \pard\plain \s50\sb240\widctlpar\intbl \b\fs22 Flag\cell Description\cell \pard\plain \widctlpar\intbl \fs20 \row 
\trowd \trgaph108\trleft612 \clbrdrt\brdrs\brdrw15 \cellx3600\clbrdrt\brdrs\brdrw15 \cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 CTOC_EFU_UNUSED (0x00)\cell The field is unused. This usage code may be used to logically delete a header field.
\cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \cellx3600\cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 CTOC_EFU_LASTMODTIME (0x01)\cell 
When used to describe an extra header field, the field contains the time that any portion of the CTOC or CGRP was last modified.
\par When used to describe an extra entry field, the field contains the time that the corresponding CTOC table entry, or the compound file element it refers to, was last modified.
\par The field is interpreted as a DWORD containing the number of seconds that have elapsed since 00:00:00 Greenwich Mean Time (GMT), January 1, 1970.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 CTOC_EFU_CODEPAGE
\cell The field contains the code page and country code for the {\b achName} field. These values override any values specified in a CSET chunk. 
\par When used to describe an extra header field, the field contains code-page and country-code information for all CTOC table entries. When used to describe an extra entry field, the field contains information for that specific CTOC table entry. \cell 
\pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell The low-order word of the field contains one of the following code page values:
\par \pard\plain \s54\fi-360\li360\sb120\widctlpar\intbl \fs20 Zero\line Use standard ISO 8859/1 code page. This is identical to code page 1004 without code points defined in hex columns 0, 1, 8, and 9.
\par CTOC_CHARSET_CODEPAGE (0x0000{\i nnnn})\line Use code page 0x{\i nnnn}, where 0x{\i nnnn} is the 16\_bit code page number. For example, 0x00000352 for OS/2 code page 850, or 0x000004E4 for Windows 3.1 code page 1252.\cell \pard\plain \widctlpar\intbl 
\fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell The high-order word contains one of the following country codes:
\par \pard\plain \s54\fi-360\li360\sb120\widctlpar\intbl \fs20 Zero\line Ignore this field.
\par Country code\line See \ldblquote Country Codes,\rdblquote  earlier in this chapter, for a list of currently defined country codes.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 CTOC_EFU_LANGUAGE\cell 
The field contains language and dialect information for the {\b achName} field.  These values override any values specified in a CSET chunk. 
\par When used to describe an extra header field, the field contains language information for all CTOC table entries. When used to describe an extra entry field, the field contains information for that specific CTOC table entry. \cell \pard\plain 
\widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\fs16 \cell }The low-order word of the field contains one of the following language codes:
\par \pard\plain \s54\fi-360\li360\sb120\widctlpar\intbl \fs20 Zero\line Ignore this field.
\par Language code\line See \ldblquote Language and Dialect Codes,\rdblquote  earlier in this chapter, for a list of currently defined language codes.
\par \pard\plain \s51\sb120\widctlpar\intbl \fs20 The high-order word of the field contains one of the following dialect codes:
\par \pard\plain \s54\fi-360\li360\sb120\widctlpar\intbl \fs20 Zero\line Ignore this field.
\par Dialect code\line See \ldblquote Language and Dialect Codes,\rdblquote  earlier in this chapter, for a list of currently defined dialect codes.\cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \clbrdrb\brdrs\brdrw15 \cellx3600
\clbrdrb\brdrs\brdrw15 \cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\fs16 CTOC_EFU_COMPRESSPARAM0} (0x05) through {\fs16 CTOC_EFU_COMPRESSPARAM9} (0x14)\line \cell Specifies a compression parameter. See \ldblquote 
Compression of Compound File Elements,\rdblquote  later in this chapter.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s4\li720\sb360\sa240\keepn\widctlpar \b\f55\fs28 Compression of Compound File Elements
\par \pard\plain \s56\li720\sb240\widctlpar \fs20 Compound file elements can be compressed. The {\b dwCompressTech}
 field of a CTOC table entry contains a FOURCC compression technique identifier for the corresponding compound file element. If the field is zero, the compound file element is not compressed.
\par \pard\plain \li720\sb240\widctlpar \fs20 The definition of a specific compression technique may specify that either the entire compound file element is compressed, or that some specific subset, for example one or more RIFF chunks, is compressed.
\par The {\b dwUncompressSize} field contains the number of bytes that the compound file element will occupy in memory after decompression. If the compound file element is not compressed, this field contain the same value as the {\b dwSize}
 field, which identifies the file size of the compound file element.
\par Compression techniques may demand extra header fields or extra entry fields for decompression parameters. Compression technique identifiers, and any new entry fields corresponding to decompression technique parameters, must be unique. See \ldblquote 
Registering Multimedia Formats\rdblquote  in Chapter 1, \ldblquote Overview of Multimedia Specifications,\rdblquote  for information on registering compression techniques.
\par \pard\plain \s3\sa240\keepn\widctlpar \b\f55\fs28 Compound File Element Group (CGRP) Chunk
\par \pard\plain \s56\li720\sb240\widctlpar \fs20 
The actual elements of data referenced by the CTOC chunk are stored in a compound file Element Group (CGRP) chunk. The CGRP chunk contains all the compound file elements, concatenated together into one contiguous block of data. Some of the elements in the
 CGRP chunk might be unused, if the element was marked for deletion or was altered and stored elsewhere within the CGRP chunk.
\par \pard\plain \li720\sb240\widctlpar \fs20 Elements within the CGRP chunk are of arbitrary size and can appear in a specific or arbitrary order, depending upon the file format definition. Each element is identified by a corresponding CTOC table entry.

\par Using the standard RIFF notation, the CGRP chunk is defined as follows:
\par \pard\plain \s41\li864\sb240\widctlpar\tx1454\tx1829\tx2203\tx2578\tx2952\tx3326\tx3701\tx4075\tx4450\tx4824 \f3\fs16 <CGRP-chunk> {\f56\fs24 \'dd} CGRP([<compound file element>]...)
\par \pard\plain \s3\sb360\sa240\keepn\widctlpar \b\f55\fs28 Placement of the CTOC and CGRP Chunks
\par \pard\plain \s56\li720\sb240\widctlpar \fs20 The specific file format definition can specify which of the two chunks appear first the data file. Generally, the CTOC chunk is placed at the front of the file to reduce the seek and
 read times required to access it. During authoring time, an application might place the CTOC chunk at the end of the file, so it can be expanded as elements are added to the CGRP chunk. 
\par \pard\plain \s47\sb240\widctlpar \b\f55\expnd12\expndtw60 \column Chapter {\field{\*\fldinst SEQ chapter \\r3}{\fldrslt {\lang1024 3}}}
\par \pard\plain \s1\sa1200\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \brdrbtw\brdrs\brdrw15\brsp20 \b\f55\fs48 Multimedia File Formats
\par \pard\plain \s56\li720\sb240\widctlpar \fs20 This chapter describes the multimedia file formats. Most of these file formats are based on the Resource Interchange File Format (RIFF), described in Chapter 2. 
\par \pard\plain \li720\sb240\widctlpar \fs20 This chapter describes the following file formats:
\par \pard\plain \s43\fi-360\li1080\sb240\widctlpar \fs20 \bullet \tab Bundle File Format (BND)
\par \bullet \tab Device Independent Bitmap File Format (DIB) 
\par \bullet \tab RIFF DIB File Format (RDIB)
\par \bullet \tab Musical Instrument Digital Interface File Format (MIDI)
\par \bullet \tab RIFF MIDI File Format (RMID)
\par \bullet \tab Palette File Format (PAL)
\par \bullet \tab Rich Text Format (RTF)
\par \bullet \tab Waveform Audio File Format (WAVE)
\par \pard\plain \s2\sb480\sa240\keepn\widctlpar \b\f55\fs40 Bundle File Format
\par \pard\plain \s56\li720\sb240\widctlpar \fs20 The Bundle (BND)  format contains a series of RIFF chunks or other multimedia files. The BND file is defined as follows:
\par \pard\plain \s41\li864\sb240\widctlpar\tx1454\tx1829\tx2203\tx2578\tx2952\tx3326\tx3701\tx4075\tx4450\tx4824 \f3\fs16 <BND-file> {\f56\fs24 \'dd} RIFF('BND' <CTOC-chunk> <CGRP-chunk> )
\par \pard\plain \li720\sb240\widctlpar \fs20 The {\b <CTOC-chunk>} and {\b <CGRP-chunk>} formats are defined in \ldblquote Compound File Structure,\rdblquote  in Chapter 2, \ldblquote Resource Interchange File Format.\rdblquote 
\par Each compound file element must be capable of standing alone as an independent file. An element may not be a random chunk (except the RIFF chunk, indicating a RIFF file) or random binary data (unless the binary data is supposed to be treated as a file).

\par \pard\plain \s2\sb480\sa240\keepn\widctlpar \b\f55\fs40 Device Independent Bitmap File Format
\par \pard\plain \s56\li720\sb240\widctlpar \fs20 The Device Independent Bitmap (DIB) format represents bitmap images in a device-independent manner. Bitmaps can be represented at 1, 4, and 8 bits per pixel, with a palette containin
g colors represented in 24 bits. Bitmaps can also be represented at 24 bits per pixel without a palette and in a run-length encoded format.{\pard\plain \s56\li720\sb240\widctlpar \v\fs20 {\xe {File formats;Device-Independent Bitmap (DIB)}}}{\pard\plain 
\s56\li720\sb240\widctlpar \v\fs20 {\xe {DIB files;Multimedia Windows}}}
\par \pard\plain \li720\sb240\widctlpar \fs20 This documentation describes three types of DIB files:
\par \pard\plain \s43\fi-360\li1080\sb240\widctlpar \fs20 \bullet \tab Windows version 3.0 device-independent bitmap files
\par \bullet \tab OS/2 Presentation Manager version 1.2 device-independent bitmap files
\par \bullet \tab RIFF device-independent bitmap files
\par \pard\plain \li720\sb240\widctlpar \fs20 The Windows 3.0 and Presentation Manager 1.2 DIBs are similar, so they are discussed together. 
\par \pard\plain \s3\sb360\sa240\keepn\widctlpar \b\f55\fs28 Overview of DIB Structure
\par \pard\plain \s56\li720\sb240\widctlpar \fs20 Windows 3.0 and Presentation Manager 1.2 DIB files consist of the following sequence of data structures:{\pard\plain \s56\li720\sb240\widctlpar \v\fs20 {\xe {DIB files;structure}}}
\par \pard\plain \s43\fi-360\li1080\sb240\widctlpar \fs20 \bullet \tab A file header
\par \bullet \tab A bitmap information header
\par \bullet \tab A color table
\par \bullet \tab An array of bytes that defines the bitmap bits
\par \pard\plain \li720\sb240\widctlpar \fs20 The following sections describe each of these structures.
\par \pard\plain \s3\sb360\sa240\keepn\widctlpar \b\f55\fs28 Bitmap File Header
\par \pard\plain \s56\li720\sb240\widctlpar \fs20 
The bitmap file header contains information about the type, size, and layout of a device-independent bitmap (DIB) file. In both the Windows 3.0 and Presentation Manager 1.2 DIBs, it is defined as a BITMAPFILEHEADER data structure:{\pard\plain 
\s56\li720\sb240\widctlpar \v\fs20 {\xe {BITMAPFILEHEADER data structure;in DIB file}}}{\pard\plain \s56\li720\sb240\widctlpar \v\fs20 {\xe {DIB files;bitmap file header}}}
\par \pard\plain \s41\li864\sb240\widctlpar\tx1454\tx1829\tx2203\tx2578\tx2952\tx3326\tx3701\tx4075\tx4450\tx4824 \f3\fs16 typedef struct tagBITMAPFILEHEADER \{\line \tab WORD\tab bfType;\line \tab DWORD\tab bfSize;\line \tab WORD\tab bfReserved1;\line \tab 
WORD\tab bfReserved2;\line \tab DWORD\tab bfOffBits;\line \} BITMAPFILEHEADER;
\par \pard\plain \s55\li720\sb240\sa240\widctlpar \fs20 The following table describes the fields.
\par \trowd \trgaph108\trleft612 \clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx2880\clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx8640 \pard\plain \s50\sb240\widctlpar\intbl \b\fs22 Field\cell Description\cell \pard\plain \widctlpar\intbl \fs20 
\row \trowd \trgaph108\trleft612 \clbrdrt\brdrs\brdrw15 \cellx2880\clbrdrt\brdrs\brdrw15 \cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b bfType}\cell Specifies the file type. It must consist of the character sequence BM (WORD value 0x4D42).
\cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \cellx2880\cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b bfSize}\cell Specifies the file size in bytes.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain 
\s51\sb120\widctlpar\intbl \fs20 {\b bfReserved1}\cell Reserved. Must be set to zero.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b bfReserved2}\cell Reserved. Must be set to zero.\cell \pard\plain 
\widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \clbrdrb\brdrs\brdrw15 \cellx2880\clbrdrb\brdrs\brdrw15 \cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b bfOffBits}\cell 
Specifies the byte offset from the BITMAPFILEHEADER structure to the actual bitmap data in the file.\line \cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s3\sb360\sa240\keepn\widctlpar \b\f55\fs28 Bitmap Information Header
\par \pard\plain \s56\li720\sb240\widctlpar \fs20 The BITMAPINFO and BITMAPCOREINFO data structures define the dimensions and color information for Windows 3.0 and Presentation Manager 1.2 DIBs, respectively. They are defined as follows:\line 
\par \trowd \trgaph108\trleft612 \clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx4590\clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx8640 \pard\plain \s53\sb120\widctlpar\intbl \b\fs20 Windows 3.0 DIB\cell Presentation Manager 1.2 DIB\cell \pard\plain 
\widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx4590\clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx8640 \pard\plain 
\s52\sb120\widctlpar\intbl\tx389\tx763\tx1138\tx1512\tx1886\tx2261\tx2635\tx3010\tx3384\tx3758 \f3\fs16 typedef struct tagBITMAPINFO \{\line  \tab BITMAPINFOHEADER bmiHeader;\line  \tab RGBQUAD bmiColors[1];\line \} BITMAPINFO;\cell 
typedef struct _BITMAPCOREINFO \{\line  \tab BITMAPCOREHEADER \tab bmciHeader;\line  \tab RGBTRIPLE bmciColors[1];\line \} BITMAPCOREINFO;\line \cell \pard\plain \widctlpar\intbl \fs20 \row \pard \li720\sb240\widctlpar These structures are essentiall
y alike, and this section discusses them simultaneously. Each field name for the Windows BITMAPINFO structure is followed by the corresponding field name for the Presentation Manager BITMAPCOREINFO 1.2 structure, in parentheses.
\par \pard\plain \s55\li720\sb240\sa240\widctlpar \fs20 The following table describes the fields.
\par \trowd \trgaph108\trleft612 \clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx2880\clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx7920 \pard\plain \s50\sb240\widctlpar\intbl \b\fs22 Windows (PM) Field\cell Description\cell \pard\plain 
\widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \clbrdrt\brdrs\brdrw15 \cellx2880\clbrdrt\brdrs\brdrw15 \cellx7920 \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b bmiHeader }({\b bmciHeader})\cell 
Specifies information about the dimensions and color format of the DIB. The BITMAPINFOHEADER and BITMAPCOREHEADER data structures are described in the next section.\cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \clbrdrb
\brdrs\brdrw15 \cellx2880\clbrdrb\brdrs\brdrw15 \cellx7920 \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b bmiColors} ({\b bmciColors})\cell Specifies the DIB color table. The RGBQUAD and RGBTRIPLE data structures are described in \ldblquote 
Bitmap Color Table,\rdblquote  later in this chapter.\line \cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s4\li720\sa240\keepn\widctlpar \b\f55\fs28 \page Information Header Structures
\par \pard\plain \s56\li720\sb240\widctlpar \fs20 The BITMAPINFOHEADER and BITMAPCOREHEADER structures contain information about the dimensions and color format of Windows 3.0 and Presentation Manager 1.2 DIBs, respectively. They are defined as follows:\line 
{\pard\plain \s56\li720\sb240\widctlpar \v\fs20 {\xe {DIB files;bitmap information header}}}{\pard\plain \s56\li720\sb240\widctlpar \v\fs20 {\xe {BITMAPINFOHEADER data structure;in DIB file}}}
\par \trowd \trgaph108\trleft612 \clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx4680\clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx8640 \pard\plain \s50\sb240\widctlpar\intbl \b\fs22 Windows 3.0 DIB\cell Presentation Manager 1.2 DIB\cell \pard\plain 
\widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx4680\clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx8640 \pard\plain 
\s52\sb120\widctlpar\intbl\tx389\tx763\tx1138\tx1512\tx1886\tx2261\tx2635\tx3010\tx3384\tx3758 \f3\fs16 typedef struct tagBITMAPINFOHEADER \{ \line  \tab DWORD biSize;\line  \tab DWORD biWidth;\line  \tab DWORD biHeight;\line  \tab WORD biPlanes;\line  
\tab WORD biBitCount;\line  \tab DWORD biCompression;\line  \tab DWORD biSizeImage;\line  \tab DWORD biXPelsPerMeter;\line  \tab DWORD biYPelsPerMeter;\line  \tab DWORD biClrUsed;\line  \tab DWORD biClrImportant;\line  \} BITMAPINFOHEADER;\line \cell 
typedef struct tagBITMAPCOREHEADER \{\line  \tab DWORD\tab bcSize;\line  \tab WORD\tab bcWidth;\line  \tab WORD\tab bcHeight;\line  \tab WORD\tab bcPlanes;\line  \tab WORD\tab bcBitCount;\line  \} BITMAPCOREHEADER;\cell \pard\plain \widctlpar\intbl \fs20 
\row \pard \li720\sb240\widctlpar Because these structures are essentially alike, except for the 
added fields in the Windows 3.0 structure, this section discusses them simultaneously. Each field name for the Windows structure is followed by the corresponding field name for the Presentation Manager structure, in parentheses.
\par \pard\plain \s5\li720\sb240\keepn\widctlpar \b\f55\fs20 Common Fields
\par \pard\plain \s56\li720\sb240\widctlpar \fs20 The following fields are present in both the Windows 3.0 and Presentation Manager 1.2 formats:\line 
\par \trowd \trgaph108\trleft612 \clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx3600\clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx8640 \pard\plain \s50\sb240\widctlpar\intbl \b\fs22 Windows (PM) Field\cell Description\cell \pard\plain 
\widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \clbrdrt\brdrs\brdrw15 \cellx3600\clbrdrt\brdrs\brdrw15 \cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b biSize} ({\b bcSize})\cell 
Specifies the number of bytes required by the BITMAPINFOHEADER structure. You can use this field to distinguish between Windows 3.0 and Presentation Manager 1.2 DIBs.\cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \cellx3600
\cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b biWidth} ({\b bcWidth})\cell Specifies the width of the DIB in pixels.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b biHeight} ({\b bcHeight})
\cell Specifies the height of the DIB in pixels.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b biPlanes} ({\b bcPlanes})\cell Specifies the number of planes for the target device. Must must be set to 1.
\cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \clbrdrb\brdrs\brdrw15 \cellx3600\clbrdrb\brdrs\brdrw15 \cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b wBitCount} ({\b bcBitCount})\cell 
Specifies the number of bits-per-pixel. See \ldblquote Interpreting the Color Table,\rdblquote  later in this section, for more information.\line \cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s5\li720\keepn\widctlpar \b\f55\fs20 \page 
Windows Fields
\par \pard\plain \s56\li720\sb240\widctlpar \fs20 The following fields are present only in the Windows 3.0 BITMAPINFOHEADER structure:\line 
\par \trowd \trgaph108\trleft612 \clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx2880\clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx8640 \pard\plain \s50\sb240\widctlpar\intbl \b\fs22 Field\cell Description\cell \pard\plain \widctlpar\intbl \fs20 
\row \trowd \trgaph108\trleft612 \clbrdrt\brdrs\brdrw15 \cellx2880\clbrdrt\brdrs\brdrw15 \cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b biCompression}\cell 
Specifies the type of compression for a compressed bitmap. It can be one of the following values:\cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \cellx2880\cellx8640 \pard \li720\sb240\widctlpar\intbl \cell \pard\plain 
\s51\fi-1080\li1080\sb120\widctlpar\intbl\brdrt\brdrs\brdrw15\brsp20 \brdrbtw\brdrs\brdrw15\brsp20 \fs20 {\b Value\tab Meaning
\par }\pard \s51\fi-1080\li1080\sb120\widctlpar\intbl BI_RGB\tab Specifies that the bitmap is not compressed.
\par BI_RLE4\tab Specifies a run-length encoded format for bitmaps with 4 bits-per-pixel. The compression format is a two-byte format consisting of a count byte followed by two word-length color indexes.
\par \pard \s51\fi-1080\li1080\sb120\widctlpar\intbl\brdrb\brdrs\brdrw15\brsp20 \brdrbtw\brdrs\brdrw15\brsp20 BI_RLE8\tab Specifies a run-length encoded format for bitmaps with 8 bits-per-pixel. The compression format is a two-byt
e format consisting of a count byte followed by a color-index byte.\line 
\par \pard \s51\sb120\widctlpar\intbl See \ldblquote Windows 3.0 Bitmap Compression Formats\rdblquote  later in this document for information about the encoding schemes.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 
{\b biSizeImage}\cell Specifies the size in bytes of the image.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b biXPelsPerMeter}\cell 
Specifies the horizontal resolution in pixels per meter of the target device for the bitmap. An application can use this value to select a bitmap from a resource group that best matches the characteristics of the current device.\cell \pard\plain 
\widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b biYPelsPerMeter}\cell Specifies the vertical resolution in pixels per meter of the target device for the bitmap.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain 
\s51\sb120\widctlpar\intbl \fs20 {\b biClrUsed}\cell Specifies the number of color values in the color table actually used by the bitmap. Possible values follow.
\par \pard \s51\fi-1080\li1080\sb120\widctlpar\intbl\brdrt\brdrs\brdrw15\brsp20 \brdrbtw\brdrs\brdrw15\brsp20 {\b Value\tab Result
\par }\pard \s51\fi-1080\li1080\sb120\widctlpar\intbl 0\tab Bitmap uses the maximum number of colors corresponding to the value of the {\b wBitCount field}.
\par \pard \s51\fi-1080\li1080\sb120\widctlpar\intbl\brdrb\brdrs\brdrw15\brsp20 \brdrbtw\brdrs\brdrw15\brsp20 Nonzero\tab If the {\b wBitCount} value is less than 24, the {\b biClrUsed}
 value indicates the actual number of colors which the graphics engine or device driver will access.\line \line If the {\b wBitCount} value is 24, the {\b biClrUsed}
 value indicates the size of the reference color table used to optimize performance of Windows color palettes.\line 
\par \pard \s51\sb120\widctlpar\intbl If the bitmap is a \ldblquote packed\rdblquote  bitmap (that is, a bitmap in which the bitmap array immediately follows the BITMAPINFO header and which is referenced by a single pointer), the {\b biClrUsed}
 field must be set to 0 or to the actual size of the color table.{\pard\plain \s51\sb120\widctlpar\intbl \v\fs20 {\xe {Packed bitmap}}} See \ldblquote Interpreting the Color Table,\rdblquote  later in this section, for more information on h
ow this field affects the interpretation of the color table.\cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \clbrdrb\brdrs\brdrw15 \cellx2880\clbrdrb\brdrs\brdrw15 \cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b 
biClrImportant}\cell Specifies the number of color indexes that are considered important for displaying the bitmap. If this value is 0, then all colors are important.\line \cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain 
\s3\sb360\sa240\keepn\widctlpar \b\f55\fs28 Bitmap Color Table
\par \pard\plain \s56\li720\sb240\widctlpar \fs20 
The color table is a collection of 24-bit RGB values. There are as many entries in the color table as there are colors in the bitmap. The color table isn't present for bitmaps with 24 color bits because each pixel is represented by 24-bit RGB values in th
e actual bitmap data area. {\pard\plain \s56\li720\sb240\widctlpar \v\fs20 {\xe {Color table;and bitmap colors[bitmap]}}}{\pard\plain \s56\li720\sb240\widctlpar \v\fs20 {\xe {DIB files;bitmap color table}}}{\pard\plain \s56\li720\sb240\widctlpar \v\fs20 
{\xe {RGBQUAD data structure;in DIB file}}}{\pard\plain \s56\li720\sb240\widctlpar \v\fs20 {\xe {RGBTRIPLE data structure;in DIB file}}}
\par \pard\plain \s4\li720\sb360\sa240\keepn\widctlpar \b\f55\fs28 Color Table Structure
\par \pard\plain \s56\li720\sb240\widctlpar \fs20 The color table for Windows 3.0 and Presentation Manager 1.2 DIBs consists of an array of RGBQUAD and RGBTRIPLE structures, respectively. These structures are defined as follows: \line 
\par \trowd \trgaph108\trleft612 \clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx4680\clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx8640 \pard\plain \s50\sb240\widctlpar\intbl \b\fs22 Windows 3.0 DIB\cell Presentation Manager 1.2 DIB\cell \pard\plain 
\widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx4680\clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx8640 \pard\plain 
\s52\sb120\widctlpar\intbl\tx389\tx763\tx1138\tx1512\tx1886\tx2261\tx2635\tx3010\tx3384\tx3758 \f3\fs16 typedef struct tagRGBQUAD \{\line  \tab BYTE rgbBlue;\line  \tab BYTE rgbGreen;\line  \tab BYTE rgbRed;\line  \tab BYTE rgbReserved;\line  \} RGBQUAD;
\line \cell  typedef struct tagRGBTRIPLE \{\line  \tab BYTE rgbtBlue;\line  \tab BYTE rgbtGreen;\line  \tab BYTE rgbtRed;\line  \} RGBTRIPLE;\cell \pard\plain \widctlpar\intbl \fs20 \row \pard \li720\sb240\widctlpar 
Because these structures are essentially alike, this section discusses them simultaneously. Each field name for the Windows RGBQUAD structure is followed by the corresponding field name for the Presentation Manager RGBTRIPLE structure, in parentheses.

\par \pard\plain \s4\li720\sb360\sa240\keepn\widctlpar \b\f55\fs28 Order of Colors
\par \pard\plain \s56\li720\sb240\widctlpar \fs20 The colors in the table should appear in order of importance. This can help a device driver render a bitmap on a device tha
t cannot display as many colors as there are in the bitmap. If the DIB is in Windows 3.0 format, the driver can use the {\b biClrImportant} field of the BITMAPINFOHEADER structure to determine which colors are important.{\pard\plain 
\s56\li720\sb240\widctlpar \v\fs20 {\xe {Color table;color order}}}{\pard\plain \s56\li720\sb240\widctlpar \v\fs20 {\xe {RGB values;color table intensity}}}{\pard\plain \s56\li720\sb240\widctlpar \v\fs20 {\xe {Color table;color intensity}}}{\pard\plain 
\s56\li720\sb240\widctlpar \v\fs20 {\xe {BITMAPINFOHEADER data structure;bitmap color importance}}}
\par \pard\plain \s4\li720\sb360\sa240\keepn\widctlpar \b\f55\fs28 Field Descriptions
\par \pard\plain \s56\li720\sb240\widctlpar \fs20 The RGBQUAD (RGBTRIPLE) structure contains the following fields:\line 
\par \trowd \trgaph108\trleft612 \clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx3960\clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx8640 \pard\plain \s50\sb240\widctlpar\intbl \b\fs22 Windows (PM) Field\cell Description\cell \pard\plain 
\widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \clbrdrt\brdrs\brdrw15 \cellx3960\clbrdrt\brdrs\brdrw15 \cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b rgbBlue} ({\b rgbtBlue})\cell Specifies the blue intensity.\cell \pard\plain 
\widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \cellx3960\cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b rgbGreen} ({\b rgbtGreen})\cell Specifies the green intensity.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain 
\s51\sb120\widctlpar\intbl \fs20 {\b rgbRed} ({\b rgbtRed})\cell Specifies the red intensity.\cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \clbrdrb\brdrs\brdrw15 \cellx3960\clbrdrb\brdrs\brdrw15 \cellx8640 \pard\plain 
\s51\sb120\widctlpar\intbl \fs20 {\b rgbReserved} (no PM equivalent)\line \cell Not used. Must be set to 0.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s4\li720\sa240\keepn\widctlpar \b\f55\fs28 Locating the Color Table
\par \pard\plain \s56\li720\sb240\widctlpar \fs20 An application can use the {\b biSize} ({\b bcSize}
) field of the BITMAPINFOHEADER (BITMAPCOREHEADER) structure to locate the color table. Each of the following statements assigns the pColor variable the byte offset of the color table from the beginning of the file:{\pard\plain \s56\li720\sb240\widctlpar 
\v\fs20 {\xe {BITMAPINFOHEADER data structure;color table location}}}{\pard\plain \s56\li720\sb240\widctlpar \v\fs20 {\xe {BITMAPCOREHEADER data structure;color table location}}}
\par \pard\plain \s41\li864\sb240\widctlpar\tx1454\tx1829\tx2203\tx2578\tx2952\tx3326\tx3701\tx4075\tx4450\tx4824 \f3\fs16 // Windows 3.0 DIB \line pColor = (LPSTR)pBitmapInfo + (WORD)pBitmapInfo->biSize\line \line // Presentation Manager 1.2 DIB \line 
pColor = (LPSTR)pBitmapCoreInfo + (WORD)pBitmapCoreInfo->bcSize
\par \pard\plain \s4\li720\sb360\sa240\keepn\widctlpar \b\f55\fs28 Interpreting the Color Table
\par \pard\plain \s56\li720\sb240\widctlpar \fs20 The {\b biSize }({\b bcSize}) field of the BITMAPINFOHEADER (BITMAPCOREHEADER) structure specifies how many bits define each pixel and specifies the maximum number of colors in the bitmap. Its value affec
ts your interpretation of the color table.{\pard\plain \s56\li720\sb240\widctlpar \v\fs20 {\xe {BITMAPINFOHEADER data structure;color definition}}}{\pard\plain \s56\li720\sb240\widctlpar \v\fs20 {\xe {BITMAPCOREHEADER data structure;color definition}}}
{\pard\plain \s56\li720\sb240\widctlpar \v\fs20 {\xe {Color table;defining number of colors}}}
\par \pard\plain \s55\li720\sb240\sa240\widctlpar \fs20 The {\b biSize }({\b bcSize}) field can have any of the following values:
\par \trowd \trgaph108\trleft612 \clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx2160\clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx8640 \pard\plain \s50\sb240\widctlpar\intbl \b\fs22 Value\cell Meaning\cell \pard\plain \widctlpar\intbl \fs20 \row 
\trowd \trgaph108\trleft612 \clbrdrt\brdrs\brdrw15 \cellx2160\clbrdrt\brdrs\brdrw15 \cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 1\cell 
The bitmap is monochrome, and the color table contains two entries. Each bit in the bitmap array represents a pixel. If the bit is clear, the pixel is displayed with the color of the first entry in the color table. If the bit is set, 
the pixel has the color of the second entry in the table.{\pard\plain \s51\sb120\widctlpar\intbl \v\fs20 {\xe {Monochrome bitmap}}}\cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \cellx2160\cellx8640 \pard\plain 
\s51\sb120\widctlpar\intbl \fs20 4\cell The bitmap has a maximum of 16 colors. Each pixel in the bitmap is represented by a four-bit index into the color table.
\par For example, if the first byte in the bitmap is 0x1F, then the byte represents two pixels. The first pixel contains the color in the second table entry, and the second pixel contains the color in the 16th table entry.\cell \pard\plain \widctlpar\intbl 
\fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 8\cell The bitmap has a maximum of 256 colors. Each pixel in the bitma
p is represented by a byte-sized index into the color table. For example, if the first byte in the bitmap is 0x1F, then the first pixel has the color of the thirty-second table entry. \cell \pard\plain \widctlpar\intbl \fs20 \row \trowd 
\trgaph108\trleft612 \clbrdrb\brdrs\brdrw15 \cellx2160\clbrdrb\brdrs\brdrw15 \cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 24\cell The bitmap has a maximum of 2{\fs12\up6 24} colors. The {\b bmiColors} ({\b bmciColors}
) field is NULL, and each three bytes in the bitmap array represent the relative intensities of red, green, and blue, respectively, of a pixel.\line \cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s5\li720\sb240\keepn\widctlpar \b\f55\fs20 
Note on Windows DIBs
\par \pard\plain \s56\li720\sb240\widctlpar \fs20 For Windows 3.0 DIBs, the field of the BITMAPINFOHEADER structure specifies the number of color indexes in the color table actually used by the bitmap. If the {\b biClrUsed }
field is set to 0, the bitmap uses the maximum number of colors corresponding to the value of the field.
\par \pard\plain \s3\sa240\keepn\widctlpar \b\f55\fs28 \page Bitmap Data
\par \pard\plain \s56\li720\sb240\widctlpar \fs20 
The bits in the array are packed together, but each line of pixels, or scan line, must be zero-padded to end on a LONG boundary. When the bitmap is in memory, segment boundaries can appear anywhere in the bitmap. The origin of the bitmap is the lower-left
 corner. The following section discusses compression formats for the Windows 3.0 bitmap data.
\par \pard\plain \s3\sb360\sa240\keepn\widctlpar \b\f55\fs28 Windows 3.0 Bitmap Compression Formats
\par \pard\plain \s56\li720\sb240\widctlpar \fs20 
Windows supports run-length encoded formats for compressing 4- and 8-bit bitmaps. Compression reduces the disk and memory storage required for the bitmap. The following sections describe the compression formats.{\pard\plain \s56\li720\sb240\widctlpar 
\v\fs20 {\xe {DIB files;Windows compression formats}}}
\par \pard\plain \s4\li720\sb360\sa240\keepn\widctlpar \b\f55\fs28 Compression of 8-Bit-Per-Pixel DIBs
\par \pard\plain \s56\li720\sb240\widctlpar \fs20 When the {\b biCompression} field is set to BI_RLE8, the bitmap is compressed using a run-length encoding format for an 8-bit bitmap. This format uses two modes:{\pard\plain \s56\li720\sb240\widctlpar \v\fs20 
{\xe {Compression format;8-bit DIBs[eight]}}}{\pard\plain \s56\li720\sb240\widctlpar \v\fs20 {\xe {Run-length encoded format;8-bit DIBs[eight]}}}
\par \pard\plain \s43\fi-360\li1080\sb240\widctlpar \fs20 \bullet \tab Encoded mode
\par \bullet \tab Absolute mode
\par \pard\plain \li720\sb240\widctlpar \fs20 Both modes can occur anywhere throughout a single bitmap.
\par \pard\plain \s5\li720\sb240\keepn\widctlpar \b\f55\fs20 Encoded Mode
\par \pard\plain \s56\li720\sb240\widctlpar \fs20 Encoded mode consists of two bytes. The first byte specifies the number of consecutive pixels to be drawn using the color index contained in the second byte.{\pard\plain \s56\li720\sb240\widctlpar \v\fs20 {\xe 
{Encoded mode;8-bit DIBs[eight]}}}
\par \pard\plain \li720\sb240\widctlpar \fs20 Also, the first byte of the pair can be set to zero to indicate an escape that denotes an end of line, end of bit
map, or a delta. The interpretation of the escape depends on the value of the second byte of the pair. In encoded mode, the second byte has a value of 0 to 2.
\par \pard\plain \s55\li720\sb240\sa240\widctlpar \fs20 The following table shows the meaning of the second byte:
\par \trowd \trgaph108\trleft612 \clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx2160\clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx8640 \pard\plain \s50\sb240\widctlpar\intbl \b\fs22 Second Byte\cell  Meaning\cell \pard\plain \widctlpar\intbl \fs20 
\row \trowd \trgaph108\trleft612 \clbrdrt\brdrs\brdrw15 \cellx2160\clbrdrt\brdrs\brdrw15 \cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 0\cell End of line.\cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \cellx2160
\cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 1\cell End of bitmap.\cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \clbrdrb\brdrs\brdrw15 \cellx2160\clbrdrb\brdrs\brdrw15 \cellx8640 \pard\plain 
\s51\sb120\widctlpar\intbl \fs20 2\cell Delta. The two bytes following the escape contain unsigned values indicating the horizontal and vertical offset of the next pixel from the current position.\line \cell \pard\plain \widctlpar\intbl \fs20 \row 
\pard\plain \s5\li720\sb240\keepn\widctlpar \b\f55\fs20 Absolute Mode
\par \pard\plain \s56\li720\sb240\widctlpar \fs20 Absolute mode is signalled by the first byte set to zero and the second byte set to a value between 03H and FFH.
\par \pard\plain \li720\sb240\widctlpar \fs20 The second byte represents the number of bytes that follow, each of which contains the color index of a single pixel.{\pard\plain \li720\sb240\widctlpar \v\fs20 {\xe {Absolute mode;8-bit DIBs[eight]}}}
\par Each run must be aligned on a word boundary.
\par \pard\plain \s55\li720\sb240\sa240\widctlpar \fs20 The following example shows the hexadecimal values of an 8-bit RLE bitmap. Under \ldblquote Expanded Data,\rdblquote  the two-digit values represent a color index for a single pixel.
\par \trowd \trgaph108\trleft612 \clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx4320\clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx8640 \pard\plain \s50\sb240\widctlpar\intbl \b\fs22 Compressed Data\cell Expanded Data\cell \pard\plain 
\widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx4320\clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx8640 \pard\plain 
\s52\sb120\widctlpar\intbl\tx389\tx763\tx1138\tx1512\tx1886\tx2261\tx2635\tx3010\tx3384\tx3758 \f3\fs16 03 04\line 05 06 \line 00 03 45 56 67 00 \line 02 78 \line 00 02 05 01 \line 02 78 \line 00 00 \line 09 1E \line 00 01\cell 04 04 04\line 
06 06 06 06 06\line 45 56 67\line 78 78\line move 5 right and 1 down\line 78 78\line end of line\line 1E 1E 1E 1E 1E 1E 1E 1E 1E \line end of RLE bitmap\line \cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s4\li720\sb360\sa240\keepn\widctlpar 
\b\f55\fs28 Compression of 4-Bit-Per-Pixel DIBs
\par \pard\plain \s56\li720\sb240\widctlpar \fs20 When the field is set to BI_RLE4, the bitmap is compressed using a run-length encoding format for a 4-bit bitmap. This format uses two modes:{\pard\plain \s56\li720\sb240\widctlpar \v\fs20 {\xe {
Compression format;4-bit DIBs[four]}}}
\par \pard\plain \s43\fi-360\li1080\sb240\widctlpar \fs20 \bullet \tab Encoded mode
\par \bullet \tab Absolute mode
\par \pard\plain \s5\li720\sb240\keepn\widctlpar \b\f55\fs20 Encoded Mode{\pard\plain \s5\li720\sb240\keepn\widctlpar \b\v\f55\fs20 {\xe {Encoded mode;4-bit DIBs[four]}}}
\par \pard\plain \s56\li720\sb240\widctlpar \fs20 In encoded mode, the first byte of the pair contains the number of pixels to be drawn using the color indexes in the second byte.
\par \pard\plain \li720\sb240\widctlpar \fs20 The second byte contains two color indexes, one in its high-order nibble (that is, its low-order four bits) and one in its low-order nibble.
\par The first of the pixels is drawn using the color specified by the high-order nibble, the second is drawn using the color in the low-order nibble, the third is drawn with the color in the high-order nibble, and so on, until all the pixels specified b
y the first byte have been drawn.
\par Also, the first byte of the pair can be set to zero to indicate an escape that denotes an end of line, end of bitmap, or a delta. The interpretation of the escape depends on the value of the second byte of the pair. In encoded mode, the second byte has a 
value from 00H to 02H.
\par \pard\plain \s5\li720\sb240\keepn\widctlpar \b\f55\fs20 Absolute Mode{\pard\plain \s5\li720\sb240\keepn\widctlpar \b\v\f55\fs20 {\xe {Absolute mode;4-bit DIBs[four]}}}
\par \pard\plain \s56\li720\sb240\widctlpar \fs20 
In absolute mode, the first byte contains zero, the second byte contains the number of color indexes that follow, and subsequent bytes contain color indexes in their high- and low-order nibbles, one color index for each pixel.
\par \pard\plain \li720\sb240\widctlpar \fs20 Each run must be aligned on a word boundary.
\par The end-of-line, end-of-bitmap, and delta escapes valid for BI_RLE8 also apply to BI_RLE4.
\par \pard\plain \s55\li720\sa240\widctlpar \fs20 \page The following example shows the hexadecimal values of a 4-bit RLE bitmap. Under \ldblquote Expanded Data,\rdblquote  the one-digit values represent a color index for a single pixel.
\par \trowd \trgaph108\trleft612 \clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx4320\clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx8640 \pard\plain \s50\sb240\widctlpar\intbl \b\fs22 Compressed Data\cell Expanded Data\cell \pard\plain 
\widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx4320\clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx8640 \pard\plain 
\s52\sb120\widctlpar\intbl\tx389\tx763\tx1138\tx1512\tx1886\tx2261\tx2635\tx3010\tx3384\tx3758 \f3\fs16 03 04\line 05 06 \line 00 06 45 56 67 00 \line 04 78 \line 00 02 05 01 \line 04 78 \line 00 00 \line 09 1E \line 00 01\cell 0 4 0\line 0 6 0 6 0 \line 
4 5 5 6 6 7\line 7 8 7 8\line move 5 right and 1 down\line 7 8 7 8\line end of line\line 1 E 1 E 1 E 1 E 1\line end of RLE bitmap\line \cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s2\sb480\sa240\keepn\widctlpar \b\f55\fs40 
RIFF Device-Independent Bitmap File Format
\par \pard\plain \s56\li720\sb240\widctlpar \fs20 This document describes two types of RIFF Device-Independent Bitmap (RDIB) format:
\par \pard\plain \s43\fi-360\li1080\sb240\widctlpar \fs20 \bullet \tab A simple RDIB consisting of a DIB file enclosed in a RIFF chunk.
\par \bullet \tab An extended RDIB that allows the creation of more complex bitmaps
\par \pard\plain \li720\sb240\widctlpar \fs20 To ensure that the maximum number of programs will accept an RDIB file, programs that adopt the extended RDIB format should also accept simple RDIB files. Both formats are described in the following sections.

\par \pard\plain \s3\sb360\sa240\keepn\widctlpar \b\f55\fs28 Simple RDIB Format
\par \pard\plain \s56\li720\sb240\widctlpar \fs20 The simple RDIB format consists of a Windows 3.0 or Presentation Manager 1.2 DIB enclosed in a \lquote RIFF\rquote  chunk. Enclosing the DIB in a \lquote RIFF\rquote 
 chunk allows the file to be consistently identified; for example, an \lquote INFO\rquote  list can be included in the file. 
\par \pard\plain \li720\sb240\widctlpar \fs20 The simple \lquote RDIB\rquote  form is defined as follows, using the standard RIFF form definition notation:{\pard\plain \li720\sb240\widctlpar \v\fs20 {\xe {DIB files;RDIB format}}}{\pard\plain 
\li720\sb240\widctlpar \v\fs20 {\xe {RIFF files;RDIB form}}}{\pard\plain \li720\sb240\widctlpar \v\fs20 {\xe {RDIB file format}}} {\pard\plain \li720\sb240\widctlpar \v\fs20 {\xe {File formats;RIFF Device-Independent Bitmap (RDIB)}}}{\pard\plain 
\li720\sb240\widctlpar \v\fs20 {\xe {RDIB files;description}}}
\par \pard\plain \s41\li864\sb240\widctlpar\tx1454\tx1829\tx2203\tx2578\tx2952\tx3326\tx3701\tx4075\tx4450\tx4824 \f3\fs16 <RDIB-form> {\f56\fs24 \'dd}\tab \tab RIFF (\tab 'RDIB\rquote  data( <DIB-data> ))\tab 
\par \pard\plain \li720\sb240\widctlpar \fs20 The {\b <DIB-data>} format is defined in \ldblquote Device Independent Bitmap File Format,\rdblquote  earlier in this chapter.
\par \pard\plain \s3\sb360\sa240\keepn\widctlpar \b\f55\fs28 Extended RDIB Format
\par \pard\plain \s56\li720\sb240\widctlpar \fs20 The extended RDIB format, designed to incorporate enhancements such as compression, is defined as follows:
\par \pard\plain \s41\li864\sb240\widctlpar\tx1454\tx1829\tx2203\tx2578\tx2952\tx3326\tx3701\tx4075\tx4450\tx4824 \f3\fs16 <RDIB-form> {\f56\fs24 \'dd\line  \tab \tab }RIFF('RDIB'\line \tab \tab \tab \tab \tab \tab <bmhd-ck>\tab \tab \tab \tab 
// Bitmap header chunk\line \tab \tab \tab \tab \tab \tab [ <pal-file> |\tab \tab \tab // Internal palette chunk\line \tab \tab \tab \tab \tab \tab   <XPAL-ck>   ]\tab \tab \tab // External palette chunk\line \tab \tab \tab \tab \tab \tab <bitmap-data> )
\tab \tab \tab // Bitmap data
\par \pard\plain \li720\sb240\widctlpar \fs20 The {\b <pal-file>} chunk can be any of the palette-file formats discussed in \ldblquote Palette File Format,\rdblquote  later in this chapter. The {\b <bmhd-ck>}, {\b <XPAL-chunk>}, and {\b <bitmap-data>}
 are described in the following sections.
\par \pard\plain \s4\li720\sb360\sa240\keepn\widctlpar \b\f55\fs28 Bitmap Header Chunk
\par \pard\plain \s56\li720\sb240\widctlpar \fs20 The {\b <bmhd-ck>} bitmap header chunk is defined as follows:
\par \pard\plain \s41\li864\sb240\widctlpar\tx1454\tx1829\tx2203\tx2578\tx2952\tx3326\tx3701\tx4075\tx4450\tx4824 \f3\fs16 <bmhd-chunk> {\f56\fs24 \'dd} bmhd( struct \{\line \tab DWORD\tab dwMemSize;\tab \tab \tab \tab // If {\b dwPelFormat}
 is 'data', only these\line \tab DWORD\tab dwPelFormat;\tab \tab \tab // four fields are present.\line \tab WORD\tab wTransType;\line \tab DWORD\tab dwTransVal;\line \tab DWORD\tab dwHdrSize;\tab \tab \tab \tab // Fields from {\b dwHdrSize} forward match
\line \tab DWORD\tab dwWidth;\tab \tab \tab \tab // the Windows BITMAPINFOHEADER \line \tab DWORD\tab dwHeight;\tab \tab \tab \tab // structure, though some fields can\line \tab WORD\tab dwPlanes;\tab \tab \tab \tab // contain new values.\line \tab WORD
\tab dwBitCount;\tab {\b \line }\tab DWORD\tab dwCompression;\tab \line \tab DWORD\tab dwSizeImage;\line \tab DWORD\tab dwXPelsPerMeter;\line \tab DWORD\tab dwYPelsPerMeter;\line \tab DWORD\tab dwClrUsed;\line \tab DWORD\tab dwClrImportant;\line  \} )

\par \pard\plain \li720\sb240\widctlpar \fs20 If the {\b dwCompression} field equals BI_RGB or BI_RLE8 or BI_RLE4, then the extended RDIB has the same bitmap format as a simple RDIB.
\par \pard\plain \s55\li720\sb240\sa240\widctlpar \fs20 Each pixel format defines the orientation, or position of the bitmap origin. Windows bitmaps (identified by a value of \lquote data\rquote  in the {\b dwPelFormat}
 field) have the origin at the bottom left. By default, the other formats have the origin at the top left.
\par \trowd \trgaph108\trleft612 \clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx2880\clmgf\clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx8640\clmrg\clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx8640 \pard\plain \s50\sb240\widctlpar\intbl 
\b\fs22 Field\cell Description\cell \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \clbrdrt\brdrs\brdrw15 \cellx2880\clmgf\clbrdrt\brdrs\brdrw15 \cellx8640\clmrg\clbrdrt
\brdrs\brdrw15 \cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b dwMemSize}\cell Equal to the size of the bitmap bits if the bits are uncompressed. For RDIBs with {\b dwPelFormat} equal to \lquote data,\rquote  {\b dwMemSize}
 has one of the following values:\line \cell \cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \cellx2880\clbrdrt\brdrs\brdrw15 \cellx4320\clbrdrt\brdrs\brdrw15 \cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell 
\pard\plain \s53\sb120\widctlpar\intbl \b\fs20 Image Type\cell Field Value\cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \cellx2880\cellx4320\cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b \cell }Non-RLE\cell 
Same as {\b dwSizeImage} value\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b \cell }8-bit RLE\cell Size as an uncompressed, 8-bit image\cell \pard\plain \widctlpar\intbl \fs20 \row \trowd 
\trgaph108\trleft612 \cellx2880\clbrdrb\brdrs\brdrw15 \cellx4320\clbrdrb\brdrs\brdrw15 \cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b \cell }4-bit RLE\cell Size as an uncompressed, 4-bit image\line \cell \pard\plain \widctlpar\intbl \fs20 
\row \trowd \trgaph108\trleft612 \cellx2880\clmgf \cellx8640\clmrg \cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b dwPelFormat}\cell 
Specifies a FOURCC code defining the pixel format of the bitmap data. The bitmap data is stored in a chunk (or chunks) that has the same chunk ID as is contained in {\b dwPelFormat}
. The compression scheme and pixel depth of the bitmap data are recorded in the {\b dwCompression} and {\b dwBitCount} fields. The current bitmap data values are as follows:\line \cell \cell \pard\plain \widctlpar\intbl \fs20 \row \trowd 
\trgaph108\trleft612 \cellx2880\clbrdrt\brdrs\brdrw15 \cellx3780\clbrdrt\brdrs\brdrw15 \cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell \pard\plain \s53\sb120\widctlpar\intbl \b\fs20 Value\cell Bitmap Data Location and Format\cell 
\pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \cellx2880\cellx3780\cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell 'data'\cell Bitmap data is stored in a \lquote data\rquote 
 chunk using the format defined for Windows 3.0 device independent bitmaps (DIBs). An application can display the bitmap properly even if the fields after (and including) {\b dwMemSize} are ignored.\cell \pard\plain \widctlpar\intbl \fs20 \row 
\pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell 'palb'\cell Bitmap data is stored in a \lquote palb\rquote  chunk. The pixel format is one of the Windows 3.0 RGB palettized formats (1 to 8 bpp, depending on the value of the {\b dwBitCount} field).
\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell 'rgbb'\cell Bitmap data is stored in a \lquote rgbb\rquote 
 chunk. Pixel format is packed, unpalettized RGB represented at 16, 24, or 32 bits per pixel. The following shows the ordering of the RGB bits for each pixel-depth value. The first extra bit (if present) is the high-order bit.\line 
\par \pard \s51\sb120\widctlpar\intbl\brdrt\brdrs\brdrw15\brsp20 \brdrbtw\brdrs\brdrw15\brsp20 \tx1260\tx2160\tx3060\tx3960 {\b dwBitCount\tab Extra\tab Red\tab Green\tab Blue}
\par \pard \s51\widctlpar\intbl\tx1260\tx2160\tx3060\tx3960 15\tab 1\tab 5\tab 5\tab 5
\par 16\tab 0\tab 5\tab 6\tab 5
\par 24\tab 0\tab 8\tab 8\tab 8
\par \pard \s51\widctlpar\intbl\brdrb\brdrs\brdrw15\brsp20 \brdrbtw\brdrs\brdrw15\brsp20 \tx1260\tx2160\tx3060\tx3960 32\tab 8\tab 8\tab 8\tab 8
\par \pard \s51\widctlpar\intbl \cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \cellx2880\clbrdrb\brdrs\brdrw15 \cellx3780\clbrdrb\brdrs\brdrw15 \cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20  \cell 'yuvb'\cell 
Bitmap data is stored in a \lquote yuvb\rquote  chunk. Pixel format is packed, unpalettized YUV. The exact pixel format is currently undefined. By the time this draft is final, the pixel format will be defined similarly to the \lquote rgbb\rquote 
 definition.\line \cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \cellx2880\clmgf \cellx8640\clmrg \cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b wTransType}\cell 
Specifies the type of transparency representation, if any, used for this image. This is normally used for either image overlay applications, where one image may be visually on top of another, and all pels of the transparency color should not be drawn. Exa
mples include sprites, clip art and motion video overlay. Wherever the transparency color occurs in the picture, the background should be visible.
\par This information is stored with the image, so that multiple images that use the same color map may all have different transparency color. There are 5 different values for the transparency variable. These are:\line \cell \cell \pard\plain \widctlpar\intbl 
\fs20 \row \trowd \trgaph108\trleft612 \cellx2880\clbrdrt\brdrs\brdrw15 \cellx4680\clbrdrt\brdrs\brdrw15 \cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell \pard\plain \s53\sb120\widctlpar\intbl \b\fs20 Value\cell Result\cell \pard\plain 
\widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \cellx2880\cellx4680\cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\fs16 BITT_NONE \line (}0x0000)\cell No pels are considered transparent in this image.\cell \pard\plain 
\widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\fs16 BITT_MAPINDEX \line (0x0001)}\cell One of the color map/palette entries should be considered the transparency color. All 
instances of this pel should NOT be drawn, and the existing background should be allowed to show through.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\fs16 BITT_SINGLECOLOR (0x0002)}\cell 
A single RGB or YUV value is considered transparent and should not be drawn.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\fs16 BITT_BITPLANE  \line (0x0003)}\cell 
An individual bit plane is considered transparent, and all pels that have that bit or bits \ldblquote on\rdblquote  should not be drawn.\cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \cellx2880\clbrdrb\brdrs\brdrw15 \cellx4680
\clbrdrb\brdrs\brdrw15 \cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\fs16 BITT_MULTILEVEL \line (0x0004)}\cell A set of bits indicate multiple levels of transparency or opacity. This is usually used with 32-bit 
RGB, where the high 8 bits indicate transparency.\line \cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \cellx2880\clmgf \cellx8640\clmrg \cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b dwTransVal}\cell 
These bytes allow the image definition to indicate the exact information about the transparent color. The information is dependent on the value of the {\b wTransType} as follows:\line \cell \cell \pard\plain \widctlpar\intbl \fs20 \row \trowd 
\trgaph108\trleft612 \cellx2880\clbrdrt\brdrs\brdrw15 \cellx4680\clbrdrt\brdrs\brdrw15 \cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell \pard\plain \s53\sb120\widctlpar\intbl \b\fs20 wTransType\cell dwTransVal Contents\cell \pard\plain 
\widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \cellx2880\cellx4680\cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\fs16 BITT_NONE} \cell Not used.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain 
\s51\sb120\widctlpar\intbl \fs20 \cell {\fs16 BITT_MAPINDEX}\cell Specifies a palette index, either 0 through 16 or 0 through 255, depending on the number of palette entries.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain 
\s51\sb120\widctlpar\intbl \fs20 \cell {\fs16 BITT_SINGLECOLOR}\cell Specifies an RGB or YUV value (2 to 4 bytes in size, depending on the pixel format specified by {\b dwPelFormat}). All pels that match {\b dwTransVal} should be considered transparent.
\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\fs16 BITT_BITPLANE}\cell 
Specifies a bit mask identifying the bits used to indicate a transparent pel. Any pel that has this set of bits set is totally transparent. This allows multiple colors to be considered transparent. This method works for palettized images; in this case, th
e value refers to a map entry that is considered transparent.\cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \cellx2880\clbrdrb\brdrs\brdrw15 \cellx4680\clbrdrb\brdrs\brdrw15 \cellx8640 \pard\plain \s51\sb120\widctlpar\intbl 
\fs20 \cell {\fs16 BITT_MULTILEVEL}\cell Specifies bits to use for transparency levels. These bits act as a mask on every pel, and each pel can be matched to the mask to determine the transparency level for the pel.
\par For example, if {\b dwTransVal}
 has value 0xFF000000, then there are 256 levels of transparency. Each pel can be evaluated against the mask. If the pel has a value FFxxxxxx, then it is fully transparent. If the pel has a value 00xxxxxx, then it is fully visible. If the pel has a value 
7Fxxxxxx, then the pel is half visible.\line \cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \cellx2880\clmgf \cellx8640\clmrg \cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b dwHdrSize}\cell 
Specifies the size of the data portion of the {\b <bmhdr>} chunk. This is always 40, the size of the BITMAPINFOHEADER structure.\cell \cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b dwWidth}\cell 
Specifies the width of the DIB in pixels.\cell \cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b dwHeight}\cell Specifies the height of the DIB in pixels.\cell \cell \pard\plain \widctlpar\intbl \fs20 \row 
\pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b wPlanes}\cell 
Specifies the number of planes. This value is normally 1, but it can be 3 or 4 for 24-bit RGB and 32-bit RGB images, respectively. In a multiplane DIB, each color component (for example, red, green, and blue) is stored as a separate plane, and each plan i
s stored in a separate bitmap data chunk. For example, in a 3-plane, 24-bit \lquote rgbb\rquote  bitmap, the red colors are stored in one \lquote rgbb\rquote  chunk, the green colors in a second \lquote rgbb\rquote  chunk, and the blue colors in a third 
\lquote rgbb\rquote  chunk.
\par Allowing the separate RGB planes to be compressed independently can dramatically improve the compression ratio. The {\b wPlanes} value must be 1 if {\b dwPelFormat} equals \lquote data\rquote .\cell \cell \pard\plain \widctlpar\intbl \fs20 \row 
\pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b wBitCount}\cell Specifies the number of bits per pixel. If the {\b dwPelFormat} field equals \lquote data\rquote , this field must contain values compatible with the Windows 3.0 DIB definition.\cell \cell 
\pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b dwCompression}\cell Specifies the type of compression for a compressed bitmap. It can be one of the following values:\line \cell \cell \pard\plain \widctlpar\intbl 
\fs20 \row \trowd \trgaph108\trleft612 \cellx2880\clbrdrt\brdrs\brdrw15 \cellx4320\clbrdrt\brdrs\brdrw15 \cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell \pard\plain \s53\sb120\widctlpar\intbl \b\fs20 Value\cell Meaning\cell \pard\plain 
\widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \cellx2880\cellx4320\cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell BI_NONE\line (0xFFFF0000)\cell Specifies that the bitmap is not compressed. Pixel values are {\i not}
 padded to four-byte boundaries.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell BI_RGB \line (0x00000000)\cell 
Specifies that the bitmap is an uncompressed, 1-, 4-, 8-, or a 24-bit image. For 24-bit images, the palette is optional. Bitmap bits are represented as defined by Windows 3.0 for BI_RGB DIBs. The {\b dwPelFormat} field must be set to \lquote data\rquote .
\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell BI_RLE8 \line (0x00000001)\cell Specifies a run-length encoded, compressed bitmap (as defined by Windows 3.0 BI_RLE8 DIBs). The palette is required. The {\b 
dwPelFormat} field must be set to \lquote data\rquote .\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell BI_RLE4 \line (0x00000002)\cell Specifies a run-length encoded, compressed bitmap (as defined by 
Windows 3.0 BI_RLE4 DIBs). The palette is required. The {\b dwPelFormat} field must be set to \lquote data\rquote .\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell BI_PACK \line (0xFFF0001)\cell 
Specifies a simple PACKBITS byte compression scheme consisting of one-byte counts followed by byte data, in the form:
\par {\fs16 <count byte }{\i\fs16 n}{\fs16 ><data byte1><data byte2>...<data byte }{\i\fs16 n}{\fs16 >}\line {\fs16 <count byte }{\i\fs16 n}{\fs16 ><data byte to repeat>}
\par The high-order bit of the count byte {\i n} is a decision bit:\line 
\par \pard \s51\sb120\widctlpar\intbl\brdrt\brdrs\brdrw15\brsp20 \brdrbtw\brdrs\brdrw15\brsp20 \tx1080 {\b\i n}{\b  Value\tab Data Representation}
\par \pard\plain \s54\fi-1080\li1080\sb120\widctlpar\intbl \fs20 {\i n} < 0x80\tab A run of {\i n}+1 non-repeating bytes follows.
\par {\i n} > 0x80\tab Data byte is repeated ({\i n}-0x80+1) times.
\par \pard \s54\fi-360\li360\sb120\widctlpar\intbl\brdrb\brdrs\brdrw15\brsp20 \brdrbtw\brdrs\brdrw15\brsp20 \tx1080 {\i n} = 0x80\tab Reserved.\line \cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell BI_TRANS 
\line (0xFFFF0002)\cell Specifies transitional compression, using a table of byte transitions or sequences. See \ldblquote Transitional Compression,\rdblquote  following this table.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain 
\s51\sb120\widctlpar\intbl \fs20 \cell BI_CCC\line (0xFFFF0003)\cell Specifies CCC compression, a method involving encoding each 4-by-4 block of the image using two colors. See \ldblquote CCC Compression,\rdblquote  following this table.\cell \pard\plain 
\widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \cellx2880\clbrdrb\brdrs\brdrw15 \cellx4320\clbrdrb\brdrs\brdrw15 \cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell BI_JPEGN (0xFFFF0004)\cell 
To be defined later, when the ISO completes the official specification.\line \cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \cellx2880\clmgf \cellx8640\clmrg \cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b 
dwSizeImage}\cell Specifies the size in bytes of the compressed image.\cell \cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b dwXPelsPerMeter}\cell 
Specifies the horizontal resolution in pixels per meter of the target device for the bitmap. An application can use this value to select a bitmap from a resource group that best matches the characteristics of the current device. This field is set to zero 
if unused.\cell \cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b dwYPelsPerMeter}\cell 
Specifies the vertical resolution in pixels per meter of the target device for the bitmap. This field is set to zero if unused.\cell \cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b dwClrUsed}\cell 
Specifies the number of palette entries actually used by the bitmap. Possible values follow.\line \cell \cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \cellx2880\clbrdrt\brdrs\brdrw15 \cellx4320\clbrdrt\brdrs\brdrw15 \cellx8640 
\pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell \pard\plain \s53\sb120\widctlpar\intbl \b\fs20 Value\cell Result\cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \cellx2880\cellx4320\cellx8640 \pard\plain 
\s51\sb120\widctlpar\intbl \fs20 \cell 0\cell Bitmap uses the maximum number of colors corresponding to the value of the {\b wBitCount} field.\cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \cellx2880\clbrdrb\brdrs\brdrw15 
\cellx4320\clbrdrb\brdrs\brdrw15 \cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell Nonzero\cell If the {\b wBitCount} is less than 24, {\b dwClrUsed} specifies the actual number of colors which the graphics engine or device driver will access.

\par If the {\b wBitCount} field is set to 24, {\b dwClrUsed} specifies the size of the reference color table used to optimize performance of Windows color palettes.\line \cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \clbrdrb
\brdrs\brdrw15 \cellx2880\clmgf\clbrdrb\brdrs\brdrw15 \cellx8640\clmrg\clbrdrb\brdrs\brdrw15 \cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b dwClrImportant}\cell 
Specifies the number of color indexes that are considered important for displaying the bitmap. If this value is 0, then all colors are important.\line \cell \cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s4\li720\sb360\sa240\keepn\widctlpar 
\b\f55\fs28 Transitional Compression
\par \pard\plain \s56\li720\sb240\widctlpar \fs20 If the {\b dwCompression} field is set to BI_TRANS, the data is transitionally compressed using a table of byte transitions or sequences. Values in the data indicate a table position to start at, and the table
 provides continuing references to other table positions. Transitional compression applies only to eight-bit data, either from an eight-bit palettized image or from a multi-plane image in which each color component is represented in eight bits.
\par \pard\plain \li720\sb240\widctlpar \fs20 
The table consists of up to 256 16-byte rows at the beginning of the data section of the object. Nibbles (half-bytes) in the data section indicate an offset into a table row, at which location is stored the actual byte value. The actual value then becomes
 the row applicable to the next data nibble. The transitional encoding scheme is described more fully in a separate IBM document.
\par In transitional compression, the data section is a two-part compound object having the following items:
\par \pard\plain \s43\fi-360\li1080\sb240\widctlpar \fs20 \bullet \tab A transition table
\par \bullet \tab The compressed image data
\par \pard\plain \li720\sb240\widctlpar \fs20 
The transition table consists of an integer indicating the table size in bytes and a table of 16-byte rows. The first byte in each row is a row number and the next 15 are transition values. Rows are in descending sequence. The image is compr
essed according to the following rules:
\par \pard\plain \s43\fi-360\li1080\sb240\widctlpar \fs20 \bullet \tab Data is in nibbles (half-bytes) or in nibble-pairs (successive half-bytes which may cross a byte boundary).
\par \bullet \tab The first byte is a nibble-pair. It is the first byte of the image and also the first row number.
\par \bullet \tab Following a nibble-pair is a series of transition nibbles (1-15) ended by a terminator (0). Each transition nibble indicates an offset in the current row at which the next byte in the image is found; this value is also the next row number. 

\par \bullet \tab The terminator indicates that the next image byte is not in the table, but instead in the following nibble-pair. This value is also the next row number. 
\par \bullet \tab If the picture has an odd number of nibbles (i.e., it ends in the first half of the last byte), an extra zero nibble is included.
\par \pard\plain \s4\li720\sb360\sa240\keepn\widctlpar \b\f55\fs28 CCC Compression
\par \pard\plain \s56\li720\sb240\widctlpar \fs20 TBD.
\par \pard\plain \s4\li720\sb360\sa240\keepn\widctlpar \b\f55\fs28 Palette Chunk
\par \pard\plain \s56\li720\sb240\widctlpar \fs20 A PLT chunk represents a color table and consists of a valid PAL file. The PAL file format is defined in \ldblquote Palette File Format,\rdblquote  later in this chapter.
\par \pard\plain \s4\li720\sb360\sa240\keepn\widctlpar \b\f55\fs28 External Palette Chunk
\par \pard\plain \s56\li720\sb240\widctlpar \fs20 Instead of a PLT chunk, an RDIB ma
y contain an XPLT chunk, which indicates that the bitmap's palette is stored outside the bitmap. The palette might be stored in a separate file or as a separate compound file element. The XPLT chunk indicates the name and location of the external palette 
chunk and is defined as follows:
\par \pard\plain \s41\li864\sb240\widctlpar\tx1454\tx1829\tx2203\tx2578\tx2952\tx3326\tx3701\tx4075\tx4450\tx4824 \f3\fs16 <XPLT-chunk> {\f56\fs24 \'dd} XPLT(<fccLocation:FOURCC> <szPaletteName::ZSTR>)
\par \pard\plain \s55\li720\sb240\sa240\widctlpar \fs20 The {\b fccLocation} contains one of the following FOURCC values specifying the location of the external chunk:
\par \trowd \trgaph108\trleft612 \clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx2880\clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx8640 \pard\plain \s50\sb240\widctlpar\intbl \b\fs22 fccLocation Value\cell Chunk Location\cell \pard\plain 
\widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \clbrdrt\brdrs\brdrw15 \cellx2880\clbrdrt\brdrs\brdrw15 \cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 \lquote full\rquote \cell Palette is located in an external file, and the {\b 
szPaletteName} value specifies a complete filename with path.\cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \cellx2880\cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 \lquote file\rquote \cell 
Palette is located in an external file, and the {\b szPaletteName} value specifies a filename without path.\cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \clbrdrb\brdrs\brdrw15 \cellx2880\clbrdrb\brdrs\brdrw15 \cellx8640 
\pard\plain \s51\sb120\widctlpar\intbl \fs20 \lquote elem\rquote \cell Palette is located in the same compound file containing the DIB. The {\b szPaletteName} value specifies the name of the compound file element.\line \cell \pard\plain \widctlpar\intbl 
\fs20 \row \pard \li720\sb240\widctlpar The {\b szPaletteName} consists of a null-terminated string (ZSTR) containing the name of the external chunk containing the palette.
\par \pard\plain \s4\li720\sb360\sa240\keepn\widctlpar \b\f55\fs28 Bitmap Data Chunk
\par \pard\plain \s56\li720\sb240\widctlpar \fs20 The <bitmap-data> contains bitmap data in the format specified by the {\b biPelFormat} field of the <bmhd-chunk>.
\par \pard\plain \s2\sa240\keepn\widctlpar \b\f55\fs40 \page MIDI and RIFF\~MIDI File Formats
\par \pard\plain \s56\li720\sb240\widctlpar \fs20 
The Musical Instrument Digital Interface (MIDI) file format represents a Standard MIDI File, as defined by the MIDI Manufacturers Association. A MIDI file contains commands instructing instruments to play specific notes and perform other operations. 
{\pard\plain \s56\li720\sb240\widctlpar \v\fs20 {\xe {File formats;Musical Instrument Digital Interface (MIDI)}}}
\par \pard\plain \li720\sb240\widctlpar \fs20 The specifications for MIDI and MIDI files can be obtained from the following organization:{\pard\plain \li720\sb240\widctlpar \v\fs20 {\xe {MIDI files;specifications}}}
\par \pard\plain \s38\li1080\sb240\widctlpar \fs20 International MIDI Association (IMA)\line 5316 W. 57th Street\line Los Angeles, CA 90056\line (213) 649-6434.
\par \pard\plain \li720\sb240\widctlpar \fs20 The \lquote RMID\rquote  format consists of a standard MIDI file enclosed in a RIFF chunk. Enclosing the MIDI file in a \lquote RIFF\rquote  chunk allows the file to be consistently identified; for example, an 
\lquote INFO\rquote  list can be included in the file. {\pard\plain \li720\sb240\widctlpar \v\fs20 {\xe {RIFF files;RMID format}}}{\pard\plain \li720\sb240\widctlpar \v\fs20 {\xe {File formats;RIFF Musical Instrument Digital Interface (MIDI)}}}
{\pard\plain \li720\sb240\widctlpar \v\fs20 {\xe {RMID file format}}}{\pard\plain \li720\sb240\widctlpar \v\fs20 {\xe {MIDI files;RMID format}}}
\par The \lquote RMID\rquote  form is defined as follows, using the standard RIFF form definition:
\par \pard\plain \s41\li864\sb240\widctlpar\tx1454\tx1829\tx2203\tx2578\tx2952\tx3326\tx3701\tx4075\tx4450\tx4824 \f3\fs16 <RMID-form>\tab {\f56\fs24 \'dd}\tab RIFF ('RMID' data( <MIDI-data> ))
\par \pard\plain \li720\sb240\widctlpar \fs20 The <MIDI-data> is equivalent to a Standard MIDI File.
\par \pard\plain \s2\sb480\sa240\keepn\widctlpar \b\f55\fs40 Palette File Format
\par \pard\plain \s56\li720\sb240\widctlpar \fs20 The Palette (PAL) File Format represents a logical palette, which is a collection of colors represented as RGB values. There are two types of PAL formats:
\par \pard\plain \s43\fi-360\li1080\sb240\widctlpar \fs20 \bullet \tab A simple PAL format
\par \bullet \tab An extended PAL format
\par \pard\plain \s3\sb360\sa240\keepn\widctlpar \b\f55\fs28 Simple PAL Format
\par \pard\plain \s56\li720\sb240\widctlpar \fs20 The simple PAL format is defined as follows:{\pard\plain \s56\li720\sb240\widctlpar \v\fs20 {\xe {Palette files;PAL file format}}}{\pard\plain \s56\li720\sb240\widctlpar \v\fs20 {\xe {PAL file format}}}
{\pard\plain \s56\li720\sb240\widctlpar \v\fs20 {\xe {File formats;Palette (PAL)}}}
\par \pard\plain \s41\li864\sb240\widctlpar\tx1454\tx1829\tx2203\tx2578\tx2952\tx3326\tx3701\tx4075\tx4450\tx4824 \f3\fs16 RIFF('PAL' data( <palette:LOGPALETTE> ))
\par \pard\plain \li720\sb240\widctlpar \fs20 LOGPALETTE is the Windows 3.0 logical palette structure, defined as follows:{\pard\plain \li720\sb240\widctlpar \v\fs20 {\xe {Palette files;logical palette structure}}}{\pard\plain \li720\sb240\widctlpar \v\fs20 
{\xe {LOGPALETTE data structure;with palette files}}}{\pard\plain \li720\sb240\widctlpar \v\fs20 {\xe {Logical palette structure}}}
\par \pard\plain \s41\li864\sb240\widctlpar\tx1454\tx1829\tx2203\tx2578\tx2952\tx3326\tx3701\tx4075\tx4450\tx4824 \f3\fs16 typedef struct tagLOGPALETTE \{\line   WORD\tab \tab \tab \tab palVersion;\line   WORD\tab \tab \tab \tab palNumEntries;\line 
  PALETTEENTRY\tab \tab palPalEntry[];\line \} LOGPALETTE;
\par \pard\plain \s55\li720\sb240\sa240\widctlpar \fs20 The LOGPALETTE structure fields are as follows:
\par \trowd \trgaph108\trleft612 \clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx2880\clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx8640 \pard\plain \s50\sb240\widctlpar\intbl \b\fs22 Field \cell Description\cell \pard\plain \widctlpar\intbl \fs20 
\row \trowd \trgaph108\trleft612 \clbrdrt\brdrs\brdrw15 \cellx2880\clbrdrt\brdrs\brdrw15 \cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b palVersion}\cell Specifies the Windows version number for the structure.\cell \pard\plain 
\widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \cellx2880\cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b palNumEntries}\cell Specifies the number of palette color entries.\cell \pard\plain \widctlpar\intbl \fs20 \row \trowd 
\trgaph108\trleft612 \clbrdrb\brdrs\brdrw15 \cellx2880\clbrdrb\brdrs\brdrw15 \cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b palPalEntry[]}\cell 
Specifies an array of PALETTEENTRY data structures that define the color and usage of each entry in the logical palette.\line \cell \pard\plain \widctlpar\intbl \fs20 \row \pard \li720\sb240\widctlpar 
The colors in the palette entry table should appear in order of importance. This is because entries earlier in the logical palette are most likely to be placed in the system palette.
\par The PALETTEENTRY data structure specifies the color and usage of an entry in a logical color palette. The structure is defined as follows:{\pard\plain \li720\sb240\widctlpar \v\fs20 {\xe {PALETTEENTRY data structure;with palette files}}}{\pard\plain 
\li720\sb240\widctlpar \v\fs20 {\xe {Palette files;setting intensity}}}{\pard\plain \li720\sb240\widctlpar \v\fs20 {\xe {RGB values;palette intensity}}}
\par \pard\plain \s41\li864\sb240\widctlpar\tx1454\tx1829\tx2203\tx2578\tx2952\tx3326\tx3701\tx4075\tx4450\tx4824 \f3\fs16 typedef struct tagPALETTEENTRY \{\line   BYTE\tab \tab peRed;\line   BYTE\tab \tab peGreen;\line   BYTE\tab \tab peBlue;\line   BYTE\tab 
\tab peFlags;\line \} PALETTEENTRY;
\par \pard\plain \s55\li720\sb240\sa240\widctlpar \fs20 The PALETTEENTRY structure fields are as follows:
\par \trowd \trgaph108\trleft612 \clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx2880\clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx8640 \pard\plain \s50\sb240\widctlpar\intbl \b\fs22 Field\cell Description\cell \pard\plain \widctlpar\intbl \fs20 
\row \trowd \trgaph108\trleft612 \clbrdrt\brdrs\brdrw15 \cellx2880\clbrdrt\brdrs\brdrw15 \cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b peRed}\cell Specifies the intensity of red for the palette entry color.\cell \pard\plain \widctlpar\intbl 
\fs20 \row \trowd \trgaph108\trleft612 \cellx2880\cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b peGreen}\cell Specifies the intensity of green for the palette entry color.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain 
\s51\sb120\widctlpar\intbl \fs20 {\b peBlue}\cell Specifies the intensity of blue for the palette entry color.\cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \clbrdrb\brdrs\brdrw15 \cellx2880\clbrdrb\brdrs\brdrw15 \cellx8640 
\pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b peFlags}\cell Specifies how the palette entry is to be used.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s3\sb360\sa240\keepn\widctlpar \b\f55\fs28 Extended PAL Format
\par \pard\plain \s56\li720\sb240\widctlpar \fs20 The extended PAL format includes the following:
\par \pard\plain \s43\fi-360\li1080\sb240\widctlpar \fs20 \bullet \tab A palette-header chunk 
\par \bullet \tab A data chunk containing an RGB palette (consisting of a LOGPALETTE structure) or some other palette type, including YUV and XYZ palettes.
\par \pard\plain \li720\sb240\widctlpar \fs20 For an RGB palette, the extended PAL format is represented as follows:
\par \pard\plain \s41\li864\sb240\widctlpar\tx1454\tx1829\tx2203\tx2578\tx2952\tx3326\tx3701\tx4075\tx4450\tx4824 \f3\fs16 RIFF('PAL' plth( <palette-header> ) data( <LOGPALETTE-data> ))
\par \pard\plain \li720\sb240\widctlpar \fs20 For a YUV palette, the extended PAL format is represented as follows:
\par \pard\plain \s41\li864\sb240\widctlpar\tx1454\tx1829\tx2203\tx2578\tx2952\tx3326\tx3701\tx4075\tx4450\tx4824 \f3\fs16 RIFF('PAL' plth( <palette-header> ) yuvp( <YUV-LOGPALETTE-data> ))
\par \pard\plain \li720\sb240\widctlpar \fs20 Both the {\b <LOGPALETTE-data>} and {\b <YUV-LOGPALETTE-data>} use the Windows 3.0 LOGPALETTE structure, described in \ldblquote Simple PAL Format,\rdblquote  earlier in this section. The {\b <YUV-LOGPALETTE-data>}
 contains YUV values instead of RGB values.
\par The \lquote plth\rquote  chunk is defined as follows:
\par \pard\plain \s41\li864\sb240\widctlpar\tx1454\tx1829\tx2203\tx2578\tx2952\tx3326\tx3701\tx4075\tx4450\tx4824 \f3\fs16 <plth-ck> {\f56\fs24 \'dd} PLT( struct \{\line \tab \tab DWORD\tab dwMapType;\line \tab \tab WORD\tab wWhite;\tab \tab \tab \tab 
// Fields from this point on are\line \tab \tab WORD\tab wBlack;\tab \tab \tab \tab // optional. If they are included\line \tab \tab WORD\tab wBorder;\tab \tab \tab // but not used, set them to 0xFFFF.\line \tab \tab WORD\tab wRegisteredMap;\line \tab 
\tab WORD\tab wCustomBase; \tab \tab // If an application encounters a\line \tab \tab WORD\tab wCustomCnt;\tab \tab \tab // 'PLT' chunk smaller than shown\line \tab \tab WORD\tab wRsvBase;\tab \tab \tab // here, it should treat the missing\line \tab \tab 
WORD\tab wRsvCount;\tab \tab \tab // fields as unused.\line \tab \tab WORD\tab wArtBase;\line \tab \tab WORD\tab wArtCnt;\line \tab \tab WORD\tab wNumIntense;\line \} )
\par \pard\plain \s55\li720\sb240\sa240\widctlpar \fs20 The structure fields are described in the following:
\par \trowd \trgaph108\trleft612 \clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx2880\clmgf\clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx8640\clmrg\clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx8640 \pard\plain \s50\sb240\widctlpar\intbl 
\b\fs22 Field\cell Description\cell \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \clbrdrt\brdrs\brdrw15 \cellx2880\clmgf\clbrdrt\brdrs\brdrw15 \cellx8640\clmrg\clbrdrt
\brdrs\brdrw15 \cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b dwMapType\cell }FOURCC code specifying the type of palette. Currently, the following palette types are identified:\line 
\par \pard \s51\fi-1080\li1080\sb120\widctlpar\intbl\brdrt\brdrs\brdrw15\brsp20 \brdrbtw\brdrs\brdrw15\brsp20 {\b Code\tab Description}
\par \pard \s51\fi-1080\li1080\sb120\widctlpar\intbl \lquote data\rquote \tab Specifies an RGB palette. Data chunk contains a LOGPALETTE structure.
\par \lquote yuvp\rquote \tab Specifies a YUV palette. Data chunk contains a YUV palette.
\par \pard\plain \s54\fi-1080\li1080\sb120\widctlpar\intbl\brdrb\brdrs\brdrw15\brsp20 \brdrbtw\brdrs\brdrw15\brsp20 \fs20 \lquote xyzp\rquote \tab Specifies an XYZ palette. Data chunk contains a XYZ palette.\line \cell \pard\plain \s51\sb120\widctlpar\intbl 
\fs20 \cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \cellx2880\clmgf \cellx8640\clmrg \cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b wWhite\line wBlack\cell }
Specify palette-map indices corresponding to the closest value of white and black. These identify the pair of colors with the best contrast for use in cu
rsors, calibration, etc. These values are usually changed if the palette changes. Ignore these fields if they contain 0xFFFF.\cell \cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b wBorder\cell }
Specifies the index of the palette entry to be used for any display-border regions, if supported by the display device. Ignore this field if it contains 0xFFFF.\cell \cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl 
\fs20 {\b wRegisteredMap\cell }Specifies how many palette entries correspond to a registered color map. Registered entries are stored at the front of the palette. Ignore this field if it contains 0xFFFF. \cell \cell \pard\plain \widctlpar\intbl \fs20 
\row \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b \cell }Registered map entries are always stored at the beginning of the palette, so {\b wRegisteredMap}
 also indicates the index of the first custom color in the palette. Registered color maps include predefined palettes for general use, forest/nature, or seasides. Currently defined values are the following:\line 
\par \pard \s51\fi-1080\li1080\sb120\widctlpar\intbl\brdrt\brdrs\brdrw15\brsp20 \brdrbtw\brdrs\brdrw15\brsp20 {\b Value\tab Description}
\par \pard\plain \s54\fi-1080\li1080\sb120\widctlpar\intbl \fs20 PAL_UNREGISTERED (0xFFFF)\line Color map does not contain colors from a registered color map.
\par PAL_VGA (0x0000)\line Color map contains the standard 16 VGA colors.
\par \pard \s54\fi-1080\li1080\sb120\widctlpar\intbl\brdrb\brdrs\brdrw15\brsp20 \brdrbtw\brdrs\brdrw15\brsp20 PAL_AVC198 (0x0001)\line Standard AVC 198-entry palette.\line 
\par \pard \s54\fi-1080\li1080\sb120\widctlpar\intbl \cell \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b wCustomBase\cell }
Specifies the index of the first custom color of the palette. The beginning of the palette contains the entries of the registered map, so {\b wCustomBase} also indicates the number of entries in the registered palette. Map entries starting with {\b 
wCustomBase} comprise additional custom colors used in the bitmap. Ignore this value if {\b wRegisteredPalette} is PAL_UNREGISTERED, or if {\b wCustomBase} contains 0xFFFF.\cell \cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain 
\s51\sb120\widctlpar\intbl \fs20 {\b wCustomCnt\cell }Specifies the number of custom colors in the palette.  Ignore this value if {\b wRegisteredPalette} is PAL_UNREGISTERED, or if this field contains 0xFFFF.\cell \cell \pard\plain \widctlpar\intbl \fs20 
\row \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b wRsvBase\cell }
Specifies the index of the first reserved color of the palette. Reserved colors are those reserved for menus, text, and other screen elements. Reserved colors must be stored contiguously. Ignore this field if it contains 0xFFFF.\cell \cell \pard\plain 
\widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b wRsvCnt\cell }Specifies the number of reserved entries. Ignore this field if it contains 0xFFFF.\cell \cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain 
\s51\sb120\widctlpar\intbl \fs20 {\b wArtBase\cell }Specifies the index of the first art color of the palette. Art colors are colors used for
 text and drawing. Art colors consist of a number of hues, each of which has multiple intensities. The various intensities are used for anti-aliasing, a method of using different shades of a color to improve the quality of images displayed on low-resoluti
on devices.
\par For example, if the first art color is red anti-aliased to black with three intensities, the first three entries in the palette would be dark red, medium red, and bright red. The art colors constitute an
 array, and all hues have the same number of intensities. The user can set both the number of hues and the number of intensities. Ignore these fields if they contain 0xFFFF.\cell \cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain 
\s51\sb120\widctlpar\intbl \fs20 {\b wArtCnt\cell }Specifies the number of art colors. Ignore this field if it contains 0xFFFF.\cell \cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \clbrdrb\brdrs\brdrw15 \cellx2880\clmgf\clbrdrb
\brdrs\brdrw15 \cellx8640\clmrg\clbrdrb\brdrs\brdrw15 \cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b wNumIntense\cell }
Specifies the number of palette entries reserved for the anti-aliased levels of a given art color. This field must be present if {\b wArtBase} is present. Ignore this field if it contains 0xFFFF.\line \cell \cell \pard\plain \widctlpar\intbl \fs20 \row 
\pard\plain \s2\sb480\sa240\keepn\widctlpar \b\f55\fs40 Rich Text Format (RTF)
\par \pard\plain \s56\li720\sb240\widctlpar \fs20 The Rich Text Format
 (RTF) is a standard method of encoding formatted text and graphics using only 7-bit ASCII characters. Formatting includes different font sizes, faces, and styles, as well as paragraph alignment, justification, and tab control.{\pard\plain 
\s56\li720\sb240\widctlpar \v\fs20 {\xe {Rich Text Format file format}}}{\pard\plain \s56\li720\sb240\widctlpar \v\fs20 {\xe {RTF file format}}}{\pard\plain \s56\li720\sb240\widctlpar \v\fs20 {\xe {File formats;Rich Text Format (RTF)}}}
\par \pard\plain \li720\sb240\widctlpar \fs20 RTF is described in the {\i Microsoft Word Technical Reference: For Windows and OS/2}, published by Microsoft Press.
\par \pard\plain \s2\sb480\sa240\keepn\widctlpar \b\f55\fs40 Waveform Audio File Format (WAVE)
\par \pard\plain \s56\li720\sb240\widctlpar \fs20 This section describes the Waveform format, which is used to represent digitized sound.{\pard\plain \s56\li720\sb240\widctlpar \v\fs20 {\xe {RIFF forms;WAVE}}}{\pard\plain \s56\li720\sb240\widctlpar \v\fs20 
{\xe {Waveform files;WAVE format}}}{\pard\plain \s56\li720\sb240\widctlpar \v\fs20 {\xe {File formats;Waveform Audio (WAVE)}}}
\par \pard\plain \li720\sb240\widctlpar \fs20 The WAVE form is defined as follows. Programs must expect (and ignore) any unknown chunks encountered, as with all RIFF forms. However, {\b <fmt\_ck>} must always occur before {\b <wave\_data>}
, and both of these chunks are mandatory in a WAVE file.
\par \pard\plain \s41\li864\sb240\widctlpar\tx1454\tx1829\tx2203\tx2578\tx2952\tx3326\tx3701\tx4075\tx4450\tx4824 \f3\fs16 <WAVE-form> {\f56\fs24 \'dd} \line \tab \tab RIFF( 'WAVE'\tab \line \tab \tab \tab \tab <fmt-ck>\tab \tab \tab \tab \tab // Format\line 
\tab \tab \tab \tab [<fact-ck>]\tab \tab \tab \tab \tab // Fact chunk\line \tab \tab \tab \tab [<cue-ck>]\tab \tab \tab \tab \tab // Cue points\line \tab \tab \tab \tab [<playlist-ck>]\tab \tab \tab \tab // Playlist\line \tab \tab \tab \tab 
[<assoc-data-list>]\tab \tab \tab // Associated data list\line \tab \tab \tab \tab <wave-data>\tab  )\tab \tab \tab  \tab // Wave data
\par \pard\plain \li720\sb240\widctlpar \fs20 The WAVE chunks are described in the following sections.
\par \pard\plain \s3\sb360\sa240\keepn\widctlpar \b\f55\fs28 WAVE Format Chunk
\par \pard\plain \s56\li720\sb240\widctlpar \fs20 The WAVE format chunk {\b <fmt-ck>} specifies the format of the {\b <wave-data>}. The {\b <fmt-ck>} is defined as follows:
\par \pard\plain \s41\li864\sb240\widctlpar\tx1454\tx1829\tx2203\tx2578\tx2952\tx3326\tx3701\tx4075\tx4450\tx4824 \f3\fs16 <fmt-ck> {\f56\fs24 \'dd}\tab \tab fmt(\tab <common-fields>\tab \line \tab \tab \tab \tab \tab \tab <format-specific-fields> )\line 
\line <common-fields> {\f56\fs24 \'dd}\line \tab \tab struct\line \tab  \tab \{ \line \tab \tab \tab WORD\tab wFormatTag;\tab \tab \tab \tab // Format category\line \tab  \tab \tab WORD\tab wChannels;\tab \tab \tab \tab // Number of channels\line \tab  
\tab \tab DWORD\tab dwSamplesPerSec; \tab \tab // Sampling rate\line \tab  \tab \tab DWORD\tab dwAvgBytesPerSec;\tab \tab // For buffer estimation\line \tab  \tab \tab WORD\tab wBlockAlign;\tab \tab \tab // Data block size\line \tab  \tab \}
\par \pard\plain \s55\li720\sb240\sa240\widctlpar \fs20 The fields in the {\b <common-fields>} chunk are as follows:
\par \trowd \trgaph108\trleft612 \clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx2880\clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx8640 \pard\plain \s50\sb240\widctlpar\intbl \b\fs22 Field\cell Description\cell \pard\plain \widctlpar\intbl \fs20 
\row \trowd \trgaph108\trleft612 \clbrdrt\brdrs\brdrw15 \cellx2880\clbrdrt\brdrs\brdrw15 \cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b wFormatTag}\cell A number indicating the WAVE format category of the file. The content of the {\b 
<format-specific-fields>} portion of the \lquote fmt\rquote  chunk, and the interpretation of the waveform data, depend on this value. 
\par You must register any new WAVE format categories. See \ldblquote Registering Multimedia Formats\rdblquote  in Chapter 1, \ldblquote Overview of Multimedia Specifications,\rdblquote  for information on registering WAVE format categories.
\par \ldblquote Wave Format Categories,\rdblquote  following this section, lists the currently defined WAVE format categories.\cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \cellx2880\cellx8640 \pard\plain \s51\sb120\widctlpar\intbl 
\fs20 {\b wChannels\cell }The number of channels represented in the waveform data, such as 1 for mono or 2 for stereo.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b dwSamplesPerSec\cell }
The sampling rate (in samples per second) at which each channel should be played.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b dwAvgBytesPerSec\cell }The average number of bytes per second at which
 the waveform data should be transferred. Playback software can estimate the buffer size using this value.\cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \clbrdrb\brdrs\brdrw15 \cellx2880\clbrdrb\brdrs\brdrw15 \cellx8640 
\pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b wBlockAlign\cell }The block alignment (in bytes) of the waveform data. Playback software needs to process a multiple of {\b wBlockAlign} bytes of data at a time, so the value of {\b wBlockAlign}
 can be used for buffer alignment.\line \cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s55\li720\sb240\sa240\widctlpar \fs20 The {\b <format-specific-fields>}
 consists of zero or more bytes of parameters. Which parameters occur depends on the WAVE format category\-\endash see the following section for details. Playback software should be written to allow for (and ignore) any unknown {\b 
<format-specific-fields>} parameters that occur at the end of this field.{\pard\plain \s55\li720\sb240\sa240\widctlpar \v\fs20 {\xe {Samples, setting bits per sample}}}
\par \pard\plain \s3\sb360\sa240\keepn\widctlpar \b\f55\fs28 WAVE Format Categories
\par \pard\plain \s56\li720\sb240\widctlpar \fs20 The format category of a WAVE file is specified by the value of the {\b wFormatTag} field of the \lquote fmt\rquote  chunk. The representation of data in {\b <wave-data>}, and the content of the {\b <format\_
specific\_fields>} of the \lquote fmt\rquote  chunk, depend on the format category.{\pard\plain \s56\li720\sb240\widctlpar \v\fs20 {\xe {Waveform files;format categories}}} 
\par \pard\plain \li720\sb240\widctlpar \fs20 The currently defined open non-proprietary WAVE format categories are as follows:\line 
\par \trowd \trgaph108\trleft612 \clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx4320\clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx8640 \pard\plain \s50\sb240\widctlpar\intbl \b\fs22 wFormatTag Value\cell Format Category\cell \pard\plain 
\widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \clbrdrb\brdrs\brdrw15 \cellx4320\clbrdrb\brdrs\brdrw15 \cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 WAVE_FORMAT_PCM (0x0001)\cell Microsoft Pulse Code Modulation (PCM) format\line \cell 
\pard\plain \widctlpar\intbl \fs20 \row \pard \li720\sb240\widctlpar \page The following are the registered proprietary WAVE format categories:\line 
\par \trowd \trgaph108\trleft612 \clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx4320\clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx8640 \pard\plain \s50\sb240\widctlpar\intbl \b\fs22 wFormatTag Value\cell Format Category\cell \pard\plain 
\widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \cellx4320\cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 IBM_FORMAT_MULAW (0x0101)\cell IBM mu-law format\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl 
\fs20 IBM_FORMAT_ALAW (0x0102)\cell IBM a-law format\cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \clbrdrb\brdrs\brdrw15 \cellx4320\clbrdrb\brdrs\brdrw15 \cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 
IBM_FORMAT_ADPCM (0x0103)\cell IBM AVC Adaptive Differential Pulse Code Modulation format\line \cell \pard\plain \widctlpar\intbl \fs20 \row \pard \li720\sb240\widctlpar The following sections describe the Microsoft WAVE_FORMAT_PCM format.
\par \pard\plain \s4\li720\sb360\sa240\keepn\widctlpar \b\f55\fs28 Pulse Code Modulation (PCM) Format
\par \pard\plain \s56\li720\sb240\widctlpar \fs20 If the {\b wFormatTag} field of the {\b <fmt-ck>} is set to WAVE_FORMAT_PCM, then the waveform data consists of samples represented in pulse code modulation (PCM) format. For PCM waveform data, the {\b 
<format-specific-fields>} is defined as follows:
\par \pard\plain \s41\li864\sb240\widctlpar\tx1454\tx1829\tx2203\tx2578\tx2952\tx3326\tx3701\tx4075\tx4450\tx4824\tx5198\tx5573\tx5947\tx6322\tx6696 \f3\fs16 <PCM-format-specific> {\f56\fs24 \'dd} \line \tab \tab struct\line  \tab \tab \{\line \tab \tab \tab 
WORD\tab wBitsPerSample;\tab \tab \tab // Sample size\line \tab  \tab \}
\par \pard\plain \li720\sb240\widctlpar \fs20 The {\b wBitsPerSample} field specifies the number of bits of data used to represent each sample of each channel. If there are multiple channels, the sample size is the same for each channel.
\par For PCM data, the {\b wAvgBytesPerSec} field of the \lquote fmt\rquote  chunk should be equal to the following formula rounded up to the next whole number:
\par \pard\plain \s38\li1080\sb240\widctlpar \fs20 {\field\flddirty{\*\fldinst EQ wChannels x wBitsPerSecond x \\f(wBitsPerSample,8)}{\fldrslt }} 
\par \pard\plain \li720\sb240\widctlpar \fs20 The {\b wBlockAlign} field should be equal to the following formula, rounded to the next whole number:{\pard\plain \li720\sb240\widctlpar \v\fs20 {\xe {Data blocks;aligning waveform}}}
\par \pard\plain \s38\li1080\sb240\widctlpar \fs20 {\field\flddirty{\*\fldinst EQ wChannels x \\f(wBitsPerSample, 8)}{\fldrslt }} 
\par \pard\plain \s5\li720\sb240\keepn\widctlpar \b\f55\fs20 Data Packing for PCM WAVE Files
\par \pard\plain \s56\li720\sb240\widctlpar \fs20 In a single-channel WAVE file, samples are stored consecutively. For stereo WAVE f
iles, channel 0 represents the left channel, and channel 1 represents the right channel. The speaker position mapping for more than two channels is currently undefined. In multiple-channel WAVE files, samples are interleaved.
\par \pard\plain \s55\li720\sb240\sa240\widctlpar \fs20 The following diagrams show the data packing for a 8-bit mono and stereo WAVE files:
\par \trowd \trqc\trgaph108\trleft612 \cellx2520\cellx4320\cellx6120\cellx7920 \pard\plain \s51\qc\sb120\widctlpar\intbl \fs20 {\b\f55 Sample 1\cell Sample 2\cell Sample 3\cell Sample 4\cell }\pard\plain \widctlpar\intbl \fs20 \row \trowd 
\trqc\trgaph108\trrh720\trleft612 \clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cellx2520\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cellx4320\clbrdrt
\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cellx6120\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cellx7920 \pard\plain \s51\qc\sb120\widctlpar\intbl \fs20 {\f55 
Channel 0\cell Channel 0\cell Channel 0\cell Channel 0\cell }\pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s44\qc\li720\sb120\sa360\widctlpar \b\f55\fs20 Data Packing for 8-Bit Mono PCM
\par \trowd \trqc\trgaph108\trleft612 \clmgf \cellx4320\clmrg \cellx4320\clmgf \cellx7920\clmrg \cellx7920 \pard\plain \s51\qc\sb120\widctlpar\intbl \fs20 {\b\f55 Sample 1\cell \cell Sample 2\cell \cell }\pard\plain \widctlpar\intbl \fs20 \row \trowd 
\trqc\trgaph108\trrh720\trleft612 \clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cellx2520\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cellx4320\clbrdrt
\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cellx6120\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cellx7920 \pard\plain \s51\qc\widctlpar\intbl \fs20 {\f55 Channel 0
\line (left)\cell Channel 1\line (right)\cell Channel 0\line (left)\cell Channel 0\line (right)\cell }\pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s44\qc\li720\sb120\sa360\widctlpar \b\f55\fs20 Data Packing for 8-Bit Stereo PCM
\par \pard\plain \s55\li720\sb240\sa240\widctlpar \fs20 The following diagrams show the data packing for 16-bit mono and stereo WAVE files:
\par \trowd \trqc\trgaph108\trleft612 \clmgf \cellx4320\clmrg \cellx4320\clmgf \cellx7920\clmrg \cellx7920 \pard\plain \s51\qc\sb120\widctlpar\intbl \fs20 {\b\f55 Sample 1\cell \cell Sample 2\cell \cell }\pard\plain \widctlpar\intbl \fs20 {\b\f55 \row }\trowd 
\trqc\trgaph108\trrh720\trleft612 \clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cellx2520\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cellx4320\clbrdrt
\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cellx6120\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cellx7920 \pard\plain \s51\qc\widctlpar\intbl \fs20 {\f55 Channel 0
\line \line low-order byte\cell Channel 0\line \line high-order byte\cell Channel 0\line \line low-order byte\cell Channel 0\line \line high-order byte\cell }\pard\plain \widctlpar\intbl \fs20 {\f55 \row }\pard\plain \s44\qc\li720\sb120\sa360\widctlpar 
\b\f55\fs20 Data Packing for 16-Bit Mono PCM
\par \trowd \trqc\trgaph108\trleft612 \clmgf \cellx7920\clmrg \cellx7920\clmrg \cellx7920\clmrg \cellx7920 \pard\plain \s51\qc\sb120\widctlpar\intbl \fs20 {\b\f55 Sample 1\cell \cell \cell \cell }\pard\plain \widctlpar\intbl \fs20 {\b\f55 \row }\trowd 
\trqc\trgaph108\trrh720\trleft612 \clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cellx2520\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cellx4320\clbrdrt
\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cellx6120\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cellx7920 \pard\plain \s51\qc\widctlpar\intbl \fs20 {\f55 Channel 0
\line (left)\line low-order byte\cell Channel 0\line (left)\line high-order byte\cell Channel 1\line (right)\line low-order byte\cell Channel 1\line (right)\line high-order byte\cell }\pard\plain \widctlpar\intbl \fs20 {\f55 \row }\pard\plain 
\s44\qc\li720\sb120\sa360\widctlpar \b\f55\fs20 Data Packing for 16-Bit Stereo PCM
\par \pard\plain \s5\li720\sb240\keepn\widctlpar \b\f55\fs20 Data Format of the Samples
\par \pard\plain \s56\li720\sb240\widctlpar \fs20 Each sample is contained in an integer {\i i}. The size of {\i i}
 is the smallest number of bytes required to contain the specified sample size. The least significant byte is stored first. The bits that represent the sample amplitude are stored in the most significant bits of {\i i}
, and the remaining bits are set to zero.
\par \pard\plain \li720\sb240\widctlpar \fs20 For example, if the sample size (recorded in {\b nBitsPerSample}) is 12 bits, then each sample is stored in a two-byte integer. The least significant four bits of the first (least significant) byte is set to zero.
{\pard\plain \li720\sb240\widctlpar \v\fs20 {\xe {Amplitude, setting waveform}}}
\par \pard\plain \s55\li720\sb240\sa240\widctlpar \fs20 The data format and maximum and minimums values for PCM waveform samples of various sizes are as follows:
\par \trowd \trgaph108\trleft612 \clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx2520\clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx4320\clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx6480\clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx8640 
\pard\plain \s50\sb240\widctlpar\intbl \b\fs22 Sample Size\cell Data Format\cell Maximum Value\cell Minimum Value\cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \clbrdrt\brdrs\brdrw15 \cellx2520\clbrdrt\brdrs\brdrw15 \cellx4320
\clbrdrt\brdrs\brdrw15 \cellx6480\clbrdrt\brdrs\brdrw15 \cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 One to eight bits\cell Unsigned integer\cell 255 (0xFF)\cell 0\cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 
\clbrdrb\brdrs\brdrw15 \cellx2520\clbrdrb\brdrs\brdrw15 \cellx4320\clbrdrb\brdrs\brdrw15 \cellx6480\clbrdrb\brdrs\brdrw15 \cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 Nine or more bits\cell Signed integer {\i i}\cell Largest positive value of {
\i i}\cell Most negative value of {\i i\line }\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s55\li720\sb240\sa240\widctlpar \fs20 For example, the maximum, minimum, and midpoint values for 8-bit and 16-bit PCM waveform data are as follows:

\par \trowd \trgaph108\trleft612 \clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx2520\clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx4320\clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx6480\clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx8640 
\pard\plain \s50\sb240\widctlpar\intbl \b\fs22 Format\cell Maximum Value\cell Minimum Value\cell Midpoint Value\cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \clbrdrt\brdrs\brdrw15 \cellx2520\clbrdrt\brdrs\brdrw15 \cellx4320
\clbrdrt\brdrs\brdrw15 \cellx6480\clbrdrt\brdrs\brdrw15 \cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 8-bit PCM\cell 255 (0xFF)\cell 0\cell 128 (0x80)\cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \clbrdrb
\brdrs\brdrw15 \cellx2520\clbrdrb\brdrs\brdrw15 \cellx4320\clbrdrb\brdrs\brdrw15 \cellx6480\clbrdrb\brdrs\brdrw15 \cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 16-bit PCM\cell 32767 (0x7FFF)\cell -32768 (-0x8000)\cell 0\line \cell \pard\plain 
\widctlpar\intbl \fs20 \row \pard\plain \s5\li720\sb240\keepn\widctlpar \b\f55\fs20 Examples of PCM WAVE Files
\par \pard\plain \s56\li720\sb240\widctlpar \fs20 Example of a PCM WAVE file with 11.025 kHz sampling rate, mono, 8 bits per sample:
\par \pard\plain \s41\li864\sb240\widctlpar\tx1454\tx1829\tx2203\tx2578\tx2952\tx3326\tx3701\tx4075\tx4450\tx4824 \f3\fs16 RIFF(\tab 'WAVE'\tab \tab fmt(1, 1, 11025, 11025, 1, 8)\line \tab \tab \tab  \tab \tab data( <wave-data> ) )
\par \pard\plain \li720\sb240\widctlpar \fs20 Example of a PCM WAVE file with 22.05 kHz sampling rate, stereo, 8 bits per sample:
\par \pard\plain \s41\li864\sb240\widctlpar\tx1454\tx1829\tx2203\tx2578\tx2952\tx3326\tx3701\tx4075\tx4450\tx4824 \f3\fs16 RIFF(\tab 'WAVE'\tab \tab fmt(1, 2, 22050, 44100, 2, 8)\line \tab \tab \tab  \tab \tab data( <wave-data> ) )
\par \pard\plain \li720\sb240\widctlpar \fs20 Example of a PCM WAVE file with 44.1 kHz sampling rate, mono, 20 bits per sample:
\par \pard\plain \s41\li864\sb240\widctlpar\tx1454\tx1829\tx2203\tx2578\tx2952\tx3326\tx3701\tx4075\tx4450\tx4824 \f3\fs16 RIFF(\tab 'WAVE'\tab  \tab INFO(INAM("O Canada"Z))\line \tab \tab \tab \tab  \tab fmt(1, 1, 44100, 132300, 3, 20)\line \tab \tab \tab 
\tab  \tab data( <wave-data> ) )
\par \pard\plain \s3\sb360\sa240\keepn\widctlpar \b\f55\fs28 Storage of WAVE Data
\par \pard\plain \s56\li720\sb240\widctlpar \fs20 The {\b <wave-data>} contains the waveform data. It is defined as follows:
\par \pard\plain \s41\li864\sb240\widctlpar\tx1454\tx1829\tx2203\tx2578\tx2952\tx3326\tx3701\tx4075\tx4450\tx4824 \f3\fs16 <wave-data> {\f56\fs24 \'dd\tab \tab }\{ <data-ck> | <data-list> \}\line \line <data-ck> \tab {\f56\fs24 \'dd\tab \tab }
data( <wave-data> )\line \line <wave-list> {\f56\fs24 \'dd\tab \tab }LIST( 'wavl' \{ \tab \tab <data-ck> | \tab \tab // Wave samples\line \tab \tab \tab \tab \tab \tab \tab \tab \tab \tab <silence-ck> \}... )\tab // Silence\line \line <silence-ck> {
\f56\fs24 \'dd\tab \tab }slnt( <dwSamples:DWORD> )\tab \tab // Count of\line \tab \tab \tab \tab \tab \tab \tab \tab \tab \tab \tab \tab \tab // silent samples
\par \pard\plain \li720\sb240\widctlpar \fs20 {\b\i Note:  }The \lquote slnt\rquote  chunk represents silence, not necessarily a 
repeated zero volume or baseline sample. In 16-bit PCM data, if the last sample value played before the silence section is a 10000, then if data is still output to the D to A converter, it must maintain the 10000 value. If a zero value is used, a click ma
y be heard at the start and end of the silence section. If play begins at a silence section, then a zero value might be used since no other information is available. A click might be created if the data following the silent section starts with a nonzero v
alue.
\par \pard\plain \s3\sb360\sa240\keepn\widctlpar \b\f55\fs28 FACT Chunk
\par \pard\plain \s56\li720\sb240\widctlpar \fs20 The {\b <fact-ck>} fact chunk stores important information about the contents of the WAVE file. This chunk is defined as follows:
\par \pard\plain \s41\li864\sb240\widctlpar\tx1454\tx1829\tx2203\tx2578\tx2952\tx3326\tx3701\tx4075\tx4450\tx4824 \f3\fs16 <fact-ck> {\f56\fs24 \'dd}\tab fact( <dwFileSize:DWORD> )\tab \tab \tab // Number of samples
\par \pard\plain \li720\sb240\widctlpar \fs20 The \ldblquote fact\rdblquote  chunk is required if the waveform data is contained in a \ldblquote wavl\rdblquote  LIST chunk and for all compressed audio formats. The chunk is not required for PCM files using the 
\ldblquote data\rdblquote  chunk format.
\par The "fact" chunk will be expanded to include any other information required by future WAVE formats. Added fields will appear following the {\b <dwFileSize>} field. Applications can use the chunk size field to determine which fields are present.
\par \pard\plain \s3\sb360\sa240\keepn\widctlpar \b\f55\fs28 Cue-Points Chunk
\par \pard\plain \s56\li720\sb240\widctlpar \fs20 The {\b <cue-ck>} cue-points chunk identifies a series of positions in the waveform data stream. The {\b <cue-ck>} is defined as follows:
\par \pard\plain \s41\li864\sb240\widctlpar\tx1454\tx1829\tx2203\tx2578\tx2952\tx3326\tx3701\tx4075\tx4450\tx4824 \f3\fs16 <cue-ck> {\f56\fs24 \'dd} \tab \tab cue( \tab <dwCuePoints:DWORD>\tab \tab // Count of cue points\line \tab \tab \tab \tab \tab \tab 
\tab <cue-point>... )\tab \tab // Cue-point table\line \line <cue-point> {\f56\fs24 \'dd}\tab \tab struct \{\line \tab \tab \tab \tab \tab \tab DWORD  dwName;\tab \line \tab \tab \tab \tab \tab \tab DWORD  dwPosition;\line \tab \tab \tab \tab \tab \tab 
FOURCC fccChunk;\line \tab \tab \tab \tab \tab \tab DWORD  dwChunkStart;\line \tab \tab \tab \tab \tab \tab DWORD  dwBlockStart;\tab \line \tab \tab \tab \tab \tab \tab DWORD  dwSampleOffset;\line \tab \tab \tab \tab \tab \}
\par \pard\plain \s55\li720\sb240\sa240\widctlpar \fs20 The {\b <cue-point>} fields are as follows:
\par \trowd \trgaph108\trleft612 \clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx2880\clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx8640 \pard\plain \s50\sb240\widctlpar\intbl \b\fs22 Field\cell Description\cell \pard\plain \widctlpar\intbl \fs20 
\row \trowd \trgaph108\trleft612 \cellx2880\cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b dwName\cell }Specifies the cue point name. Each {\b <cue-point>} record must have a unique {\b dwName} field.\cell \pard\plain \widctlpar\intbl \fs20 
\row \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b dwPosition\cell }Specifies the sample position of the cue point. This is the sequential sample number within the play order. See \ldblquote Playlist Chunk,\rdblquote 
 later in this document, for a discussion of the play order.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b fccChunk\cell }Specifies the name or chunk ID of the chunk containing the cue point.\cell 
\pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b dwChunkStart\cell }
Specifies the file position of the start of the chunk containing the cue point. This is a byte offset relative to the start of the data section of the \lquote wavl\rquote  LIST chunk.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain 
\s51\sb120\widctlpar\intbl \fs20 {\b dwBlockStart\cell }Specifies the file position of the start of the block containing the position. This is a byte offset relative to the start of the data section of the \lquote wavl\rquote  LIST chunk.\cell 
\pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \clbrdrb\brdrs\brdrw15 \cellx2880\clbrdrb\brdrs\brdrw15 \cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b dwSampleOffset\cell }
Specifies the sample offset of the cue point relative to the start of the block. \line \cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s4\li720\sa240\keepn\widctlpar \b\f55\fs28 \page Examples of File Position Values
\par \pard\plain \s56\li720\sb240\widctlpar \fs20 The following table describes the {\b <cue-point>} field values for a WAVE file containing multiple \lquote data\rquote  and \lquote slnt\rquote  chunks enclosed in a \lquote wavl\rquote  LIST chunk:\line 

\par \trowd \trgaph108\trleft612 \clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx2700\clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx4680\clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx8640 \pard\plain \s50\sb240\widctlpar\intbl \b\fs22 
Cue Point Location\cell Field\cell Value\cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \clbrdrt\brdrs\brdrw15 \cellx2700\clbrdrt\brdrs\brdrw15 \cellx4680\clbrdrt\brdrs\brdrw15 \cellx8640 \pard\plain \s51\sb120\widctlpar\intbl 
\fs20 In a \lquote slnt\rquote  chunk\cell {\b fccChunk\cell }FOURCC value \lquote slnt\rquote .\cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \cellx2700\cellx4680\cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {
\b dwChunkStart\cell }File position of the \lquote slnt\rquote  chunk relative to the start of the data section in the \lquote wavl\rquote  LIST chunk.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b 
dwBlockStart\cell }File position of the data section of the \lquote slnt\rquote  chunk relative to the start of the data section of the \lquote wavl\rquote  LIST chunk.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl 
\fs20 \cell {\b dwSampleOffset\cell }Sample position of the cue point relative to the start of the \lquote slnt\rquote  chunk.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 In a PCM \lquote data\rquote  chunk
\cell {\b fccChunk\cell }FOURCC value \lquote data\rquote .\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b dwChunkStart\cell }File position of the \lquote data\rquote 
 chunk relative to the start of the data section in the \lquote wavl\rquote  LIST chunk.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b dwBlockStart\cell }
File position of the cue point relative to the start of the data section of the \lquote wavl\rquote  LIST chunk. \cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b dwSampleOffset\cell }Zero value.\cell 
\pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 In a compressed \lquote data\rquote  chunk\cell {\b fccChunk\cell }FOURCC value \lquote data\rquote .\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain 
\s51\sb120\widctlpar\intbl \fs20 \cell {\b dwChunkStart\cell }File position of the start of the \lquote data\rquote  chunk relative to the start of the data section of the \lquote wavl\rquote  LIST chunk.\cell \pard\plain \widctlpar\intbl \fs20 \row 
\pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b dwBlockStart\cell }File position of the enclosing block relative to the start of the data section of the \lquote wavl\rquote  LIST chunk. The software can begin the decompression at this point.\cell 
\pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \clbrdrb\brdrs\brdrw15 \cellx2700\clbrdrb\brdrs\brdrw15 \cellx4680\clbrdrb\brdrs\brdrw15 \cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b dwSampleOffset\cell }
Sample position of the cue point relative to the start of the block.\line \cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s55\li720\sb240\sa240\widctlpar \fs20 The following table describes the {\b <cue-point>}
 field values for a WAVE file containing a single \lquote data\rquote  chunk:
\par \trowd \trgaph108\trleft612 \clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx2700\clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx4680\clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx8640 \pard\plain \s50\sb240\widctlpar\intbl \b\fs22 
Cue Point Location\cell Field\cell Value\cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \clbrdrt\brdrs\brdrw15 \cellx2700\clbrdrt\brdrs\brdrw15 \cellx4680\clbrdrt\brdrs\brdrw15 \cellx8640 \pard\plain \s51\sb120\widctlpar\intbl 
\fs20 Within PCM data\cell {\b fccChunk\cell }FOURCC value \lquote data\rquote .\cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \cellx2700\cellx4680\cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b dwChunkStart
\cell }Zero value.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b dwBlockStart\cell }Zero value.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b 
dwSampleOffset\cell }Sample position of the cue point relative to the start of the \lquote data\rquote  chunk.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 In a compressed \lquote data\rquote  chunk\cell {\b 
fccChunk\cell }FOURCC value \lquote data\rquote .\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b dwChunkStart\cell }Zero value.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain 
\s51\sb120\widctlpar\intbl \fs20 \cell {\b dwBlockStart\cell }File position of the enclosing block relative to the start of the \lquote data\rquote  chunk. The software can begin the decompression at this point.\cell \pard\plain \widctlpar\intbl \fs20 
\row \trowd \trgaph108\trleft612 \clbrdrb\brdrs\brdrw15 \cellx2700\clbrdrb\brdrs\brdrw15 \cellx4680\clbrdrb\brdrs\brdrw15 \cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b dwSampleOffset\cell }
Sample position of the cue point relative to the start of the block.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s3\sb360\sa240\keepn\widctlpar \b\f55\fs28 Playlist Chunk
\par \pard\plain \s56\li720\sb240\widctlpar \fs20 The {\b <playlist-ck>} playlist chunk specifies a play order for a series of cue points. The {\b <playlist-ck>} is defined as follows:
\par \pard\plain \s41\li864\sb240\widctlpar\tx1454\tx1829\tx2203\tx2578\tx2952\tx3326\tx3701\tx4075\tx4450\tx4824 \f3\fs16 <playlist-ck> {\f56\fs24 \'dd}\tab \tab plst(\line \tab \tab \tab \tab \tab \tab <dwSegments:DWORD>\tab // Count of play segments\line 
\tab \tab \tab \tab \tab \tab <play-segment>... )\tab // Play-segment table\line \line <play-segment> {\f56\fs24 \'dd}\tab \tab struct \{\line \tab \tab \tab \tab \tab \tab \tab DWORD dwName;\line \tab \tab \tab \tab \tab \tab \tab DWORD dwLength;\line 
\tab \tab \tab \tab \tab \tab \tab DWORD dwLoops;\line \tab \tab \tab \tab \tab \tab \}
\par \pard\plain \s55\li720\sb240\sa240\widctlpar \fs20 The {\b <play-segment>} fields are as follows:
\par \trowd \trgaph108\trleft612 \clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx2880\clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx8640 \pard\plain \s50\sb240\widctlpar\intbl \b\fs22 Field\cell Description\cell \pard\plain \widctlpar\intbl \fs20 
\row \trowd \trgaph108\trleft612 \cellx2880\cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b dwName\cell }Specifies the cue point name. This value must match one of the names listed in the {\b <cue-ck>} cue-point table.\cell \pard\plain 
\widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b dwLength\cell }Specifies the length of the section in samples.\cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \clbrdrb\brdrs\brdrw15 \cellx2880\clbrdrb
\brdrs\brdrw15 \cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b dwLoops\cell }Specifies the number of times to play the section.\line \cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s3\sb360\sa240\keepn\widctlpar \b\f55\fs28 
Associated Data Chunk
\par \pard\plain \s56\li720\sb240\widctlpar \fs20 The {\b <assoc-data-list>} associated data list provides the ability to attach information like labels to sections of the waveform data stream. The {\b <assoc-data-list>} is defined as follows:
\par \pard\plain \s41\li864\sb240\widctlpar\tx1454\tx1829\tx2203\tx2578\tx2952\tx3326\tx3701\tx4075\tx4450\tx4824 \f3\fs16 <assoc-data-list> {\f56\fs24 \'dd}\tab \tab LIST(\tab 'adtl'
\par \pard\plain \s42\li864\widctlpar\tx1454\tx1829\tx2203\tx2578\tx2952\tx3326\tx3701\tx4075\tx4450\tx4824 \f3\fs16 \tab \tab \tab \tab \tab \tab \tab  \tab \tab <labl-ck>\tab \tab \tab // Label
\par \tab \tab \tab \tab \tab \tab \tab \tab \tab <note-ck>\tab \tab \tab // Note
\par \tab \tab \tab \tab \tab \tab \tab \tab \tab <ltxt-ck>\tab \tab \tab // Text with data length
\par \tab \tab \tab \tab \tab \tab \tab \tab \tab <file-ck> )\tab \tab \tab // Media file
\par 
\par <labl-ck> {\f56\fs24 \'dd}\tab \tab \tab \tab labl(\tab <dwName:DWORD>
\par \tab \tab \tab \tab \tab \tab \tab \tab \tab <data:ZSTR> )
\par 
\par <note-ck> {\f56\fs24 \'dd}\tab \tab \tab \tab note(\tab <dwName:DWORD>
\par \tab \tab \tab \tab \tab \tab \tab \tab \tab <data:ZSTR> )\tab 
\par 
\par <ltxt-ck> {\f56\fs24 \'dd}\tab \tab \tab \tab ltxt(\tab <dwName:DWORD>\tab 
\par \tab \tab \tab \tab \tab \tab \tab \tab \tab <dwSampleLength:DWORD>\tab 
\par \tab \tab \tab \tab \tab \tab \tab \tab \tab <dwPurpose:DWORD>
\par \tab \tab \tab \tab \tab \tab \tab \tab \tab <wCountry:WORD>
\par \tab \tab \tab \tab \tab \tab \tab \tab \tab <wLanguage:WORD>
\par \tab \tab \tab \tab \tab \tab \tab \tab \tab <wDialect:WORD>
\par \tab \tab \tab \tab \tab \tab \tab \tab \tab <wCodePage:WORD>
\par \tab \tab \tab \tab \tab \tab \tab \tab \tab <data:BYTE>... )
\par 
\par <file-ck> {\f56\fs24 \'dd}\tab \tab \tab \tab file(\tab <dwName:DWORD>
\par \tab \tab \tab \tab \tab \tab \tab \tab \tab <dwMedType:DWORD>
\par \tab \tab \tab \tab \tab \tab \tab \tab \tab <fileData:BYTE>...)
\par \pard\plain \s4\li720\sb360\sa240\keepn\widctlpar \b\f55\fs28 Label and Note Information
\par \pard\plain \s56\li720\sb240\widctlpar \fs20 The \lquote labl\rquote  and \lquote note\rquote  chunks have similar fields. The \lquote labl\rquote  chunk contains a label, or title, to associate with a cue point. The \lquote note\rquote 
 chunk contains comment text for a cue point. The fields are as follows:\line 
\par \trowd \trgaph108\trleft612 \clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx2880\clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b Field}\cell {\b Description}\cell \pard\plain \widctlpar\intbl 
\fs20 \row \trowd \trgaph108\trleft612 \cellx2880\cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b dwName}\cell Specifies the cue point name.  This value must match one of the names listed in the <cue-ck> cue-point table.\cell \pard\plain 
\widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \clbrdrb\brdrs\brdrw15 \cellx2880\clbrdrb\brdrs\brdrw15 \cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b data}\cell Specifies a NULL-terminated string containing a text label (for the 
\lquote labl\rquote  chunk) or comment text (for the \lquote note\rquote  chunk).\line \cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s4\li720\sb360\sa240\keepn\widctlpar \b\f55\fs28 Text with Data Length Information
\par \pard\plain \s56\li720\sb240\widctlpar \fs20 The \ldblquote ltxt\rdblquote  chunk contains text that is associated with a data segment of specific length. The chunk fields are as follows:\line 
\par \trowd \trgaph108\trleft612 \clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx2880\clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b Field}\cell {\b Description}\cell \pard\plain \widctlpar\intbl 
\fs20 {\b \row }\trowd \trgaph108\trleft612 \cellx2880\cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b dwName}\cell Specifies the cue point name.  This value must match one of the names listed in the <cue-ck> cue-point table.\cell \pard\plain 
\widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b dwSampleLength}\cell Specifies the number of samples in the segment of waveform data.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 {
\b dwPurpose}\cell Specifies the type or purpose of the text. For example, {\b dwPurpose} can specify a FOURCC code like \lquote scrp\rquote  for script text or \lquote capt\rquote  for close-caption text.\cell \pard\plain \widctlpar\intbl \fs20 \row 
\pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b wCountry}\cell Specifies the country code for the text. See \ldblquote Country Codes\rdblquote  in Chapter 2, \ldblquote Resource Interchange File Format,\rdblquote  for a current list of country codes.
\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b wLanguage},\line {\b wDialect}\cell Specify the language and dialect codes for the text. See \ldblquote Language and Dialect Codes\rdblquote  in Chapter 2, 
\ldblquote Resource Interchange File Format,\rdblquote  for a current list of language and dialect codes.\cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \clbrdrb\brdrs\brdrw15 \cellx2880\clbrdrb\brdrs\brdrw15 \cellx8640 
\pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b wCodePage}\cell Specifies the code page for the text. \line \cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s4\li720\sb360\sa240\keepn\widctlpar \b\f55\fs28 Embedded File Information
\par \pard\plain \s56\li720\sb240\widctlpar \fs20 The \lquote file\rquote  chunk contains information described in other file formats (for example, an \lquote RDIB\rquote  file or an ASCII text file). The chunk fields are as follows:\line 
\par \trowd \trgaph108\trleft612 \clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx2880\clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b Field}\cell {\b Description}\cell \pard\plain \widctlpar\intbl 
\fs20 {\b \row }\trowd \trgaph108\trleft612 \cellx2880\cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b dwName}\cell Specifies the cue point name.  This value must match one of the names listed in the <cue-ck> cue-point table.\cell \pard\plain 
\widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b dwMedType}\cell Specifies the file type contained in the {\b fileData} field. If the {\b fileData} section contains a RIFF form, the {\b dwMedType}
 field is the same as the RIFF form type for the file. 
\par This field can contain a zero value.\cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \clbrdrb\brdrs\brdrw15 \cellx2880\clbrdrb\brdrs\brdrw15 \cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b fileData}\cell 
Contains the media file.\line \cell \pard\plain \widctlpar\intbl \fs20 \row \pard \li720\sb240\widctlpar 
\par \pard\plain \s47\sb240\widctlpar \b\f55\expnd12\expndtw60 \column Chapter {\field{\*\fldinst SEQ chapter \\r4}{\fldrslt {\lang1024 4}}}
\par \pard\plain \s1\sa1200\keepn\widctlpar\brdrb\brdrs\brdrw15\brsp20 \brdrbtw\brdrs\brdrw15\brsp20 \b\f55\fs48 Media Control Interface
\par \pard\plain \li720\sb240\widctlpar \fs20 
The Media Control Interface (MCI) is a high-level command control interface to multimedia devices and resource files. MCI provides applications with device-independent capabilities for controlling audio and visual peripherals. Your application can use MCI
 to control any multimedia device, including audio playback and recording, as well as videodisc and videotape players.
\par MCI provides a standard command set for playing and recording multimedia devices and resource files. Developers cr
eating multimedia applications are encouraged to use this high-level command interface rather than the low-level functions specific to each platform. The MCI command set acts as a platform-independent layer that sits between multimedia applications and th
e underlying system software. 
\par The command set is extensible in two ways:
\par \pard\plain \s43\fi-360\li1080\sb240\widctlpar \fs20 \bullet \tab Developers can incorporate new multimedia devices and file formats in the MCI command set by creating new MCI drivers to interpret the commands.
\par \bullet \tab New commands and command options can be added to support special features or functions required by new multimedia devices or file formats.
\par \pard\plain \s2\sb480\sa240\keepn\widctlpar \b\f55\fs40 MCI Command Strings
\par \pard\plain \s56\li720\sb240\widctlpar \fs20 
Using MCI, an application can control multimedia devices using simple command strings like open, play, and close. The MCI commands provide a generic interface to different multimedia devices, reducing the number of commands a developer needs to learn. A m
ultimedia application might even accept MCI commands from an end user and pass them unchanged to the MCI driver, which parses the command and performs the appropriate action.
\par \pard\plain \li720\sb240\widctlpar \fs20 
A set of basic commands is supported by all MCI devices. Developers can also define MCI commands and command options specific to a particular multimedia device or file format. These device-specific commands and command options are needed only when the bas
ic command set does not support a feature specific to the device or file format.
\par \pard\plain \s3\sa240\keepn\widctlpar \b\f55\fs28 \page Example of MCI Command Use
\par \pard\plain \s56\li720\sb240\widctlpar \fs20 The following example shows a series of MCI commands that play track 6 of an audio compact disc:
\par \pard\plain \s41\li864\sb240\widctlpar\tx1454\tx1829\tx2203\tx2578\tx2952\tx3326\tx3701\tx4075\tx4450\tx4824 \f3\fs16 open cdaudio\line set cdaudio time format tmsf\line play cdaudio from 6 to 7\line close cdaudio
\par \pard\plain \li720\sb240\widctlpar \fs20 The next example shows a similar series of MCI commands that play the first 10,000 samples of a waveform audio file:
\par \pard\plain \s41\li864\sb240\widctlpar\tx1454\tx1829\tx2203\tx2578\tx2952\tx3326\tx3701\tx4075\tx4450\tx4824 \f3\fs16 open c:\\mmdata\\purplefi.wav type waveaudio alias finch\line set finch time format samples\line play finch from 1 to 10000 wait\line 
close finch
\par \pard\plain \li720\sb240\widctlpar \fs20 Notice the following:
\par \pard\plain \s43\fi-360\li1080\sb240\widctlpar \fs20 \bullet \tab The same basic commands ({\b open}, {\b play}, and {\b close}) are used with both devices.
\par \bullet \tab The {\b open} command for the \ldblquote waveaudio\rdblquote  device includes a filename specification. The \ldblquote waveaudio\rdblquote  device is a compound device (one associated with a media element), while the \ldblquote cdaudio
\rdblquote  device is a simple device (one without an associated media element).
\par \bullet \tab The {\b set} commands both specify time formats, but the time format options for the \ldblquote cdaudio\rdblquote  device are different from those used with the \ldblquote waveaudio\rdblquote  device.
\par \bullet \tab The parameters used with the {\b from} and {\b to} flags are appropriate to the respective device. For the \ldblquote cdaudio\rdblquote  device, the parameters specify a range of tracks; for the \ldblquote waveaudio\rdblquote 
 device, the parameters specify a range of samples.
\par \pard\plain \s3\sb360\sa240\keepn\widctlpar \b\f55\fs28 Categories of MCI Command Strings{\pard\plain \s3\sb360\sa240\keepn\widctlpar \b\v\f55\fs28 {\xe {Media Control Interface;commands defined}}}
\par \pard\plain \s56\li720\sb240\widctlpar \fs20 MCI command strings divide into the following categories:
\par \pard\plain \s43\fi-360\li1080\sb240\widctlpar \fs20 \bullet \tab {\i System commands} are interpreted directly by MCI rather than being relayed to a device.
\par \bullet \tab {\i Required commands} are recognized by all MCI devices. If a device does not support a required command, it can return \ldblquote unsupported function\rdblquote  in response to the message. {\pard\plain \s43\fi-360\li1080\sb240\widctlpar 
\v\fs20 {\xe {Media Control Interface;required commands@defined}}}
\par \bullet \tab {\i Basic commands} are optional commands. If a device uses a basic command, it must respond to all options for that command. If a device does not use a basic command, it can return \ldblquote unrecognized command\rdblquote 
 in response to the message. {\pard\plain \s43\fi-360\li1080\sb240\widctlpar \v\fs20 {\xe {Media Control Interface;basic commands@defined}}}
\par \bullet \tab {\i Extended commands} are specific to a device type or device class; for example, videodisc players. These commands contain both unique commands and extensions to the required and basic commands. {\pard\plain 
\s43\fi-360\li1080\sb240\widctlpar \v\fs20 {\xe {<$IMedia Control Interface;extended commands@defined}}}
\par \pard\plain \s3\sa240\keepn\widctlpar \b\f55\fs28 \page Command Syntax Conventions
\par \pard\plain \s56\li720\sb240\widctlpar \fs20 This chapter uses the following documentation conventions:\line 
\par \trowd \trgaph108\trleft612 \clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx2160\clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx8640 \pard\plain \s50\sb240\widctlpar\intbl \b\fs22 Convention\cell Description\cell \pard\plain \widctlpar\intbl 
\fs20 \row \trowd \trgaph108\trleft612 \cellx2160\cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b bold}\cell MCI command or flag keyword.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\i italics}
\cell Command parameter to be replaced with a valid string, number, or rectangle specification.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \ldblquote quotes\rdblquote \cell 
Parameter text to be typed exactly as shown.\cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \clbrdrb\brdrs\brdrw15 \cellx2160\clbrdrb\brdrs\brdrw15 \cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 [ brackets ]\cell 
Optional flags or parameters\line \cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s3\sb360\sa240\keepn\widctlpar \b\f55\fs28 {\pard\plain \s3\sb360\sa240\keepn\widctlpar \b\v\f55\fs28 {\xe {Media Control Interface;commands defined}}}
System Commands
\par \pard\plain \s56\li720\sb240\widctlpar \fs20 The following list summarizes the system commands. MCI supports these commands directly rather than passing them to MCI devices. {\pard\plain \s56\li720\sb240\widctlpar \v\fs20 {\xe {
Media Control Interface;system messages@defined}}}\line 
\par \trowd \trgaph108\trleft612 \clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx2160\clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx8640 \pard\plain \s50\sb240\widctlpar\intbl \b\fs22 Message\cell Description\cell \pard\plain \widctlpar\intbl \fs20 
\row \trowd \trgaph108\trleft612 \cellx2160\cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b sound}\cell Play system sounds defined in a system setup file.\cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \clbrdrb
\brdrs\brdrw15 \cellx2160\clbrdrb\brdrs\brdrw15 \cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b sysinfo}\cell Returns information about MCI devices.\line \cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain 
\s3\sb360\sa240\keepn\widctlpar \b\f55\fs28 Required Commands
\par \pard\plain \s56\li720\sb240\widctlpar \fs20 The following list summarizes the required commands. All devices recognize these messages. If a device does not support a required command, it can return \ldblquote unsupported function\rdblquote  in r
esponse to the message. \line 
\par \trowd \trgaph108\trleft612 \clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx2160\clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx8640 \pard\plain \s50\sb240\widctlpar\intbl \b\fs22 Message\cell Description\cell \pard\plain \widctlpar\intbl \fs20 
\row \trowd \trgaph108\trleft612 \clbrdrt\brdrs\brdrw15 \cellx2160\clbrdrt\brdrs\brdrw15 \cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b capability}\cell Obtains the capabilities of a device.\cell \pard\plain \widctlpar\intbl \fs20 \row 
\trowd \trgaph108\trleft612 \cellx2160\cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b close}\cell Closes the device.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b info}\cell 
Obtains textual information from a device.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b open}\cell Initializes the device.\cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \clbrdrb
\brdrs\brdrw15 \cellx2160\clbrdrb\brdrs\brdrw15 \cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b status}\cell Returns various status information from the device.\line \cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain 
\s3\sa240\keepn\widctlpar \b\f55\fs28 \page Basic Commands
\par \pard\plain \s56\li720\sb240\widctlpar \fs20 The following list summarizes the basic commands. MCI devices are not required to recognize these commands.  If the device does not recognize a basic command, it can return \ldblquote unrecognized command
\rdblquote  in response to the message.{\pard\plain \s56\li720\sb240\widctlpar \v\fs20 {\xe {Media Control Interface;basic messages@defined}}}\line 
\par \trowd \trgaph108\trleft612 \clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx2160\clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx8640 \pard\plain \s50\sb240\widctlpar\intbl \b\fs22 Message\cell Description\cell \pard\plain \widctlpar\intbl \fs20 
\row \trowd \trgaph108\trleft612 \clbrdrt\brdrs\brdrw15 \cellx2160\clbrdrt\brdrs\brdrw15 \cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b load}\cell Recalls data from a disk file.\cell \pard\plain \widctlpar\intbl \fs20 \row \trowd 
\trgaph108\trleft612 \cellx2160\cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b pause}\cell Stops playing.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b play}\cell Starts transmitting output data.
\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b record}\cell Starts recording input data.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b resume}\cell 
Resumes playing or recording from a paused state.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b save}\cell Saves data to a disk file.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain 
\s51\sb120\widctlpar\intbl \fs20 {\b seek}\cell Seeks forward or backward.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b set}\cell Sets the operating state of the device.\cell \pard\plain \widctlpar\intbl 
\fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b status}\cell Obtains status information about the device. (The flags for this command supplement the flags for the command in the required command group.)\cell \pard\plain \widctlpar\intbl \fs20 
\row \trowd \trgaph108\trleft612 \clbrdrb\brdrs\brdrw15 \cellx2160\clbrdrb\brdrs\brdrw15 \cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b stop}\cell Stops playing.\line \cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain 
\s3\sb360\sa240\keepn\widctlpar \b\f55\fs28 Extended Commands
\par \pard\plain \s56\li720\sb240\widctlpar \fs20 
MCI devices can have additional commands or extend the definition of the required and basic commands. While some extended commands only apply to a specific device driver most of them apply to all devices of a particular type. For example, the MIDI sequenc
er command set extends the {\b set} command to add time formats needed by MIDI sequencers.You can find descriptions of extended commands in the command tables in this chapter.
\par \pard\plain \s4\li720\sb360\sa240\keepn\widctlpar \b\f55\fs28 Extended Commands Reserved for Future Use
\par \pard\plain \s56\li720\sb240\widctlpar \fs20 The following commands can be defined as extended commands. With the exception of the {\b delete} command, they are not currently defined for any MCI devices.\line 
\par \trowd \trgaph108\trleft612 \clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx2160\clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx8640 \pard\plain \s50\sb240\widctlpar\intbl \b\fs22 Message\cell Description\cell \pard\plain \widctlpar\intbl \fs20 
\row \trowd \trgaph108\trleft612 \cellx2160\cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b copy}\cell Copies data to the Clipboard. Parameters and flags for this message vary according to the  selected device.   \cell \pard\plain 
\widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b cut}\cell Moves data from the MCI element to the Clipboard. Parameters and flags for this message vary according to the selected device. \cell \pard\plain \widctlpar\intbl \fs20 
\row \trowd \trgaph108\trleft612 \clbrdrb\brdrs\brdrw15 \cellx2160\clbrdrb\brdrs\brdrw15 \cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b delete}\cell 
Removes data from the MCI element. Parameters and flags for this message vary according to the selected device.\line \cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s3\sa240\keepn\widctlpar \b\f55\fs28 \page Creating a Command String
\par \pard\plain \s56\li720\sb240\widctlpar \fs20 There are three components associated with each command string: the command, the name or ID of the device receiving the command, and the command arguments. A command string has the following form: {\pard\plain 
\s56\li720\sb240\widctlpar \v\fs20 {\xe {Media Control Interface;command string defined}}}
\par \pard\plain \li720\sb240\widctlpar \fs20 {\i command    device_name    arguments}
\par These components contain the following information:
\par \pard\plain \s43\fi-360\li1080\sb240\widctlpar \fs20 \bullet \tab The {\i command} includes a command from the system, required, basic, or extended command set. Examples of commands include {\b open}, {\b close}, and {\b play}.
\par \bullet \tab The {\i device_name} designates the target of the {\i command}. MCI accepts the names of MCI device types and names of media elements for the {\i device_name}. An example of a device name is \ldblquote cdAudio\rdblquote .
\par \bullet \tab The {\i arguments} specify the flags and parameters used by the {\i command}. Flags
 are key words recognized by the MCI command, and parameters are variables  associated with the MCI command or flag. Parameters specify variable data values such as filenames, track or frame numbers, or speed values. You can use the following data types f
or the parameters in a string command: 
\par \pard\plain \s60\fi-360\li1440\sb240\widctlpar \fs20 \bullet \tab Strings\endash 
String data types can be delimited by leading and trailing white space or by matching quotation marks. If MCI encounters a single (unmatched) quotation mark, it ignores the quotation mark. To embed a quote i
n string, use two quotes (""). To specify an empty string, you can use double quotes ("") for the string. 
\par \bullet \tab Signed long integers\endash 
Signed long integer data types are delimited by leading and trailing white space. Unless otherwise specified, integers can be positive or negative. If using negative integers, do not embed white space between the negative sign and the first digit.
\par \bullet \tab Rectangle\endash Rectangle data types are an ordered list of four signed integer values. White space delimits this data type as well as separates each integer in the list. 
\par \pard\plain \s43\fi-360\li1080\sb240\widctlpar \fs20 \tab For example, the {\b play} command uses the arguments \ldblquote {\b from} {\i position} {\b to} {\i position}\rdblquote  to specify starting and ending points for the playback. The {\b from} and {
\b to} arguments are flags, and the two {\i position} values are parameters.
\par \pard\plain \li720\sb240\widctlpar \fs20 For example, the following command string instructs the CD audio player \ldblquote cdaudio\rdblquote  to play from the start of the waveform to position 500: 
\par \pard\plain \s41\li864\sb240\widctlpar\tx1454\tx1829\tx2203\tx2578\tx2952\tx3326\tx3701\tx4075\tx4450\tx4824 \f3\fs16 play cdaudio from 0 to 500
\par \pard\plain \li720\sb240\widctlpar \fs20 Unspecified command arguments assume a default value. For example, if the flag {\i from} was unspecified in the previous example, the audio player would start playing at the current position. 
\par \pard\plain \s3\sa240\keepn\widctlpar \b\f55\fs28 \page About MCI Device Types
\par \pard\plain \s56\li720\sb240\widctlpar \fs20 Your application identifies an MCI device by specifying an MCI {\i device type}. A device type indicates the physical type of device. The following table lists the currently defined MCI device types:\line 

\par \trowd \trgaph108\trleft612 \clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx2880\clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx8640 \pard\plain \s50\sb240\widctlpar\intbl \b\fs22 Device Type\cell Description\cell \pard\plain \widctlpar\intbl 
\fs20 \row \trowd \trgaph108\trleft612 \cellx2880\cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 cdaudio{\fs16\up6 1}\cell CD audio player\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 dat\cell 
Digital audio tape player\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 digitalvideo\cell Digital video in a window (not GDI based)\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain 
\s51\sb120\widctlpar\intbl \fs20 other\cell Undefined MCI device\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 scanner\cell Image scanner\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain 
\s51\sb120\widctlpar\intbl \fs20 sequencer{\fs16\up6 1}\cell MIDI sequencer\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 vcr\cell Videotape recorder or player\cell \pard\plain \widctlpar\intbl \fs20 \row 
\pard\plain \s51\sb120\widctlpar\intbl \fs20 videodisc{\fs16\up6 1}\cell Videodisc player\cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \clbrdrb\brdrs\brdrw15 \cellx2880\clbrdrb\brdrs\brdrw15 \cellx8640 \pard\plain 
\s51\sb120\widctlpar\intbl \fs20 waveaudio{\fs16\up6 1}\cell Audio device that plays digitized waveform files\line \cell \pard\plain \widctlpar\intbl \fs20 \row \pard \li720\sb240\widctlpar {\fs16\up6 1}
An extended command set is provided for these devices.
\par If you have a particular device type installed more than once, the device type names in the system setup file have integers appended to them. This creates unique names for each MCI device type entry. For example, if the \ldblquote cdaudio\rdblquote 
 device type is installed twice, the names \ldblquote cdaudio1\rdblquote  and \ldblquote cdaudio2\rdblquote  are used to create unique names for each occurrence of the device type. Each name usually refers to a different CD audio player in the system.
{\pard\plain \li720\sb240\widctlpar \v\fs20 {\xe {Device types;drivers}}}
\par \pard\plain \s2\sb480\sa240\keepn\widctlpar \b\f55\fs40 Using MCI Command Strings
\par \pard\plain \s56\li720\sb240\widctlpar \fs20 The tables at the end of this chapter describe command strings for the MCI devices. The following sections describe commonly used command strings. 
\par \pard\plain \s3\sb360\sa240\keepn\widctlpar \b\f55\fs28 Opening a Device{\pard\plain \s3\sb360\sa240\keepn\widctlpar \b\v\f55\fs28 {\xe {Media Control Interface;opening a device}}}
\par \pard\plain \s56\li720\sb240\widctlpar \fs20 Before using a device, you must initialize it with the {\b open} command. The number of devices you can have open depends on the amount of available memory. The {\b open} command has the following syntax:

\par \pard\plain \li720\sb240\widctlpar \fs20 {\b open} {\i device_name} [{\b shareable}] [{\b type} {\i device_type}] [{\b  alias} {\i alias }]
\par \pard\plain \s55\li720\sb240\sa240\widctlpar \fs20  The parameters for the {\b open} command are:
\par \trowd \trgaph108\trleft612 \clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx2880\clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx8640 \pard\plain \s50\sb240\widctlpar\intbl \b\fs22 Parameters\cell Description\cell \pard\plain \widctlpar\intbl 
\fs20 \row \trowd \trgaph108\trleft612 \clbrdrt\brdrs\brdrw15 \cellx2880\clbrdrt\brdrs\brdrw15 \cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\i device_name}\cell Specifies the destination device or MCI element name (filename).\cell \pard\plain 
\widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \cellx2880\cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b shareable}\cell Allows applications to share a common device or device element.\cell \pard\plain \widctlpar\intbl \fs20 \row 
\pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b type} {\i device_type}\cell Specifies the device when the {\i device_name} refers to an MCI element.\cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \clbrdrb\brdrs\brdrw15 
\cellx2880\clbrdrb\brdrs\brdrw15 \cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b alias} {\i alias}\cell Specifies an alternate name for the device.\line \cell \pard\plain \widctlpar\intbl \fs20 \row \pard \li720\sb240\widctlpar 
MCI classifies device drivers as {\i compound} and {\i simple}. Compound device drivers use a {\i device element}\endash a media element associated with a device\endash 
during operation. For most compound device drivers, the device element is the source or destination data file. For file elements, the element name references a file and its path.
\par Simple device drivers do not require a device element for playback. For example, compact disc audio device drivers are simple device drivers.
\par \pard\plain \s4\li720\sb360\sa240\keepn\widctlpar \b\f55\fs28 Opening Simple Devices
\par \pard\plain \s56\li720\sb240\widctlpar \fs20 Simple devices require only the {\i device_name}
 for operation. You don't need to provide any additional information (such as a name of a data file) to open these devices. For these devices, substitute the name of a device type obtained from the system setup file. For example, you can open a videodisc 
device with the following command:
\par \pard\plain \s41\li864\sb240\widctlpar\tx1454\tx1829\tx2203\tx2578\tx2952\tx3326\tx3701\tx4075\tx4450\tx4824 \f3\fs16 open videodisc1
\par \pard\plain \s4\li720\sb360\sa240\keepn\widctlpar \b\f55\fs28 Opening Compound Devices
\par \pard\plain \s56\li720\sb240\widctlpar \fs20 There are three ways to open a compound device:
\par \pard\plain \s43\fi-360\li1080\sb240\widctlpar \fs20 \bullet \tab By specifying just the device type
\par \bullet \tab By specifying both the element name and the device type
\par \bullet \tab By specifying just the element name
\par \pard\plain \li720\sb240\widctlpar \fs20 
To determine the capabilities of a device, you can open a device by specifying only the device type. When opened this way, most compound devices will let you determine their capabilities and close them. For example, you can open the sequencer with the fol
lowing command:
\par \pard\plain \s41\li864\sb240\widctlpar\tx1454\tx1829\tx2203\tx2578\tx2952\tx3326\tx3701\tx4075\tx4450\tx4824 \f3\fs16 open sequencer
\par \pard\plain \li720\sb240\widctlpar \fs20 To associate a device element with a particular device, you must specify the element name and device type. In the {\b open} command, substitute the element name for the {\i device_name}, add the {\b type}
 flag, and substitute the name of the device you want to use for {\i device_type}
. This combination lets your application specify the MCI device it needs to use. For example, you can open a device element of the waveaudio device with the following command:
\par \pard\plain \s41\li864\sb240\widctlpar\tx1454\tx1829\tx2203\tx2578\tx2952\tx3326\tx3701\tx4075\tx4450\tx4824 \f3\fs16 open  right.wav  type  waveaudio
\par \pard\plain \li720\sb240\widctlpar \fs20 To associate a default MCI device with a device element, you can specify just an element name. In this case, MCI uses the filename extension of the element name to select the device type.
\par \pard\plain \s4\li720\sb360\sa240\keepn\widctlpar \b\f55\fs28 Using the Shareable Flag
\par \pard\plain \s56\li720\sb240\widctlpar \fs20 The {\b shareable} flag lets multiple applications or tasks concurrently access the same device (or element) and device instance. 
\par \pard\plain \li720\sb240\widctlpar \fs20 If your application opens a device or device element without the {\b shareable}
 flag, no other application can access it simultaneously. If your application opens a device or device element as shareable, other applications can also access it by also opening it as shareable. The shared device or device element gives each application 
the ability to change the parameters governing the operating state of the device or device element. Each time that a device or device element is opened as shareable, a unique device ID is returned (even though the device IDs refer to the same instance)

\par If you make a device or device element shareable, your application should not make any assumptions about the state of a device. When working with shared devices, your application might need to compensate for changes made by other applications using the sa
me services. 
\par If a device can service only one application or task it will fail an open with the {\b shareable} flag. 
\par While most compound device elements are not shareable, you can open multiple elements (where each element is unique), or you can open a single element multiple times. If you open a single file element multiple times, MCI creates an independent instance fo
r each open device. Each file element opened within a task must have a unique name. The {\b alias} flag described in the next section lets you use a unique name for each element.
\par \pard\plain \s4\li720\sb360\sa240\keepn\widctlpar \b\f55\fs28 Using the Alias Flag
\par \pard\plain \s56\li720\sb240\widctlpar \fs20 The {\b alias}
 flag specifies an alternate name for the given device. The alias provides a shorthand notation for compound devices with lengthy pathnames. If your application creates a device alias, it must use the alias rather than the device name for all subsequent r
eferences.
\par \pard\plain \s4\li720\sb360\sa240\keepn\widctlpar \b\f55\fs28 Opening New Device Elements
\par \pard\plain \s56\li720\sb240\widctlpar \fs20 To create a new device element for a task such as capturing a sound using waveform recording, specify {\b new} as a {\i device_name}. MCI does not save a new file element until you save it with the {\b save}
 command. When creating a new file, you must include a device alias with the {\b open} command. The following commands open a new waveaudio device element, start and stop recording, save the file element, and close the device element:
\par \pard\plain \s41\li864\sb240\widctlpar\tx1454\tx1829\tx2203\tx2578\tx2952\tx3326\tx3701\tx4075\tx4450\tx4824 \f3\fs16 open new type waveaudio alias capture\line record capture\line stop capture\line save capture orca.wav\line close capture 
\par \pard\plain \s3\sb360\sa240\keepn\widctlpar \b\f55\fs28 Closing a Device{\pard\plain \s3\sb360\sa240\keepn\widctlpar \b\v\f55\fs28 {\xe {Media Control Interface;closing a device}}}
\par \pard\plain \s56\li720\sb240\widctlpar \fs20 The {\b close} command releases access to a device or device element. To help MCI manage the devices, your application must explicitly close each device or device element when it is finished with it.
\par \pard\plain \s3\sa240\keepn\widctlpar \b\f55\fs28 \page Shortcuts and Variations for MCI Commands
\par \pard\plain \s56\li720\sb240\widctlpar \fs20 The MCI string interface lets you use several shortcuts when working with MCI devices. 
\par \pard\plain \s4\li720\sb360\sa240\keepn\widctlpar \b\f55\fs28 Using All as a Device Name
\par \pard\plain \s56\li720\sb240\widctlpar \fs20 You can specify {\b all} as a {\i device_name} for any command that does not return information. When you specify {\b all}, the command is sent to all devices opened by your application. For example, 
\ldblquote close all\rdblquote  closes all open devices and \ldblquote play all\rdblquote 
 starts playing all devices opened by the task. Because MCI sends the commands to each device, there is a delay between when the first device receives the command and when the last device receives the command.
\par \pard\plain \s4\li720\sb360\sa240\keepn\widctlpar \b\f55\fs28 Combining the Device Type and Device Element Name
\par \pard\plain \s56\li720\sb240\widctlpar \fs20 You can eliminate the {\b type} flag in the {\b open} command if you combine the device type with the device element name. MCI recognizes this combination when you use the following syntax:
\par \pard\plain \s38\li1080\sb240\widctlpar \fs20 {\i device_type}!{\i element_name}
\par \pard\plain \li720\sb240\widctlpar \fs20 The exclamation mark separates the device type from the element name. The following example opens the right.wav element with the waveaudio device:
\par \pard\plain \s41\li864\sb240\widctlpar\tx1454\tx1829\tx2203\tx2578\tx2952\tx3326\tx3701\tx4075\tx4450\tx4824 \f3\fs16 open waveaudio!right.wav
\par \pard\plain \s4\li720\sb360\sa240\keepn\widctlpar \b\f55\fs28 Automatic Open
\par \pard\plain \s56\li720\sb240\widctlpar \fs20 If MCI cannot identify the {\i device_name} as an already open device, MCI tries to automatically open the specified device. Automatic open does not let your application specify the {\b type}
 flag. If the device type is not supplied, MCI determines the device type from the element (filename) extensions listed in t
he system setup file. If you want to use a specific device, you can combine the device type name with the device element name using the exclamation mark. 
\par \pard\plain \li720\sb240\widctlpar \fs20 
Only the command-string interface supports automatic open. Automatic open will fail for device-specific commands. For example, a command to unlock the front panel of a videodisc player will fail an automatic open because this capability is specific to the
 particular videodisc player. 
\par A device that was opened using the automatic open feature will not respond to a command that uses {\b all} as a device name.
\par \pard\plain \s4\li720\sb360\sa240\keepn\widctlpar \b\f55\fs28 Automatic Close
\par \pard\plain \s56\li720\sb240\widctlpar \fs20 
MCI automatically closes any device automatically opened using the command-string interface. MCI closes a device when the command completes, when you abort the command, when you request notification with a subsequent command, or when MCI detects a failure
.{\pard\plain \s56\li720\sb240\widctlpar \v\fs20 {\xe {Automatic open/close}}}
\par \pard\plain \s3\sa240\keepn\widctlpar \b\f55\fs28 \page Using Wait and Notify Flags
\par \pard\plain \s56\li720\sb240\widctlpar \fs20 Normally, MCI commands return to the user immediately, even if it takes several minutes to complete the action initiated by the comman
d. For example, after a VCR device receives a rewind command, it returns before the tape has finished rewinding. You can use either of the following required MCI flags to modify this default behavior:\line 
\par \trowd \trgaph108\trleft612 \clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx2880\clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx8640 \pard\plain \s50\sb240\widctlpar\intbl \b\fs22 Flag\cell Description\cell \pard\plain \widctlpar\intbl \fs20 \row 
\trowd \trgaph108\trleft612 \clbrdrt\brdrs\brdrw15 \cellx2880\clbrdrt\brdrs\brdrw15 \cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b notify}\cell 
Directs the device to send an MM_MCINOTIFY message to a window when the requested action is complete. \cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \clbrdrb\brdrs\brdrw15 \cellx2880\clbrdrb\brdrs\brdrw15 \cellx8640 \pard\plain 
\s51\sb120\widctlpar\intbl \fs20 {\b wait}\cell Directs the device to wait until the requested action is complete before returning to the application.\line \cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s4\li720\sb360\sa240\keepn\widctlpar 
\b\f55\fs28 Using the Notify Flag{\pard\plain \s4\li720\sb360\sa240\keepn\widctlpar \b\v\f55\fs28 {\xe {Media Control Interface;callbacks@sending messages to}}}
\par \pard\plain \s56\li720\sb240\widctlpar \fs20 The {\b notify}
 flag directs the device to post an MM_MCINOTIFY message when the device completes an action. Your application must have a window procedure to process the MM_MCINOTIFY message for notification to have any effect. While the results of a notification are ap
plication-dependent, the application's window procedure can act upon four possible conditions associated with the notify message:
\par \pard\plain \s43\fi-360\li1080\sb240\widctlpar \fs20 \bullet \tab Notification will occur when the notification conditions are satisfied.
\par \bullet \tab Notification can be superseded.
\par \bullet \tab Notification can be aborted.
\par \bullet \tab Notification can fail.
\par \pard\plain \li720\sb240\widctlpar \fs20 A successful notification occurs when the conditions required for initiating the callback are satisfied and the command completed without interruption. 
\par A notification is superseded when the device has a notification pending and you send it another notify request. When a notification is superseded, MCI resets the callback conditions to correspond to the notify request of the new command. 
\par A notification is aborted when you send a new command that prevents the callback conditions set by a previous command from being satisfied. For example, sending the stop command cancels a notification pending for the \ldblquote play to 500\rdblquote 
 command. If your command interrupts a command that has a notification pending, and your command also requests notification, MCI will abort the first notification immediately and respond to the second notification normally.
\par A notification fails if a device error occurs while a device is executing the MCI command. For example, MCI posts this message when a hardware error occurs during a play command.
\par \pard\plain \s3\sa240\keepn\widctlpar \b\f55\fs28 \page Obtaining Information From MCI Devices
\par \pard\plain \s56\li720\sb240\widctlpar \fs20 Every device responds to the {\b capability}, {\b status}, and{\b  info}
 commands. These commands obtain information about the device. For example, your application can determine if a videodisc requires a device element using the following command:
\par \pard\plain \s41\li864\sb240\widctlpar\tx1454\tx1829\tx2203\tx2578\tx2952\tx3326\tx3701\tx4075\tx4450\tx4824 \f3\fs16 capability videodisc compound file
\par \pard\plain \li720\sb240\widctlpar \fs20 For most videodisc devices, this example would return {\b false}. The flags listed for the required and
 basic commands provide a minimum amount of information about a device. Many devices supplement the required and basic flags with extended flags to provide additional information about the device. 
\par When you request information with the {\b capability}, {\b status}, or {\b info} command, the argument list can contain only one flag requesting information. The string interface can only return one string or value in response to a {\b capability}, {\b 
status}, or {\b info} command.
\par \pard\plain \s3\sb360\sa240\keepn\widctlpar \b\f55\fs28 The Play Command
\par \pard\plain \s56\li720\sb240\widctlpar \fs20 The {\b play} command starts playing a device. Without any flags, the {\b play}
 command starts playing from the current position and plays until the command is halted or until the end of the media or file is reached. For example, \ldblquote play cdaudio\rdblquote  starts playing an audio disc from the position where it was stopped.

\par \pard\plain \li720\sb240\widctlpar \fs20 Most devices support the {\b play} command also support the {\b from} and {\b to} flags. These flags indicate the position at which the device should start and stop playing. For example, \ldblquote 
play cdaudio from 0\rdblquote  plays the audio disc from the beginning of the first trac
k. The units assigned to the position value depend on the device. For example, the position is normally specified in frames for CAV videodiscs, and milliseconds for digital audio.
\par As an extended command, devices add flags to use the capabilities of a particular device. For example, the {\b play} command for videodisc players adds the flags {\b fast}, {\b slow}, {\b reverse,} and {\b scan}. 
\par \pard\plain \s3\sb360\sa240\keepn\widctlpar \b\f55\fs28 Stop, Pause, and Resume Commands 
\par \pard\plain \s56\li720\sb240\widctlpar \fs20 The {\b stop} command suspends the playing or recording of a device. Many devices include the basic command {\b pause}, which also suspends these sessions. The difference between {\b stop} and {\b pause}
 depends on the device. Usually {\b pause} suspends operation but leaves the device ready to resume playing or recording immediately. 
\par \pard\plain \li720\sb240\widctlpar \fs20 Using {\b play} or {\b record} to restart a device will reset the {\b to} and {\b from} positions specified before the device was paused or stopped. Without the {\b from}
 flag, these commands reset the start position to the current position. Without the {\b to}
 flag, they reset the end position to the end of the media. If you want to continue playing or recording but want to stop at a position previously specified, use the {\b to} flag with these commands and repeat the position value. 
\par Some devices include the {\b resume} command to restart a paused device. This command does not change the {\b to} and {\b from} positions specified with the {\b play} or {\b record} command, which preceded the pause command. 
\par \pard\plain \s2\sa240\keepn\widctlpar \b\f55\fs40 \page MCI System Commands
\par \pard\plain \s56\li720\sb240\widctlpar \fs20 The following commands are interpreted directly by MCI. The remaining command tables list commands interpreted by the devices.\line 
\par \trowd \trgaph108\trleft612 \clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx2520\clmgf\clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx8640\clmrg\clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx8640 \pard\plain \s50\sb240\widctlpar\intbl 
\b\fs22 Command\cell Description\cell \cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \cellx2520\clmgf \cellx8640\clmrg \cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b sound}\cell 
The device name of this command specifies a sound defined in a system setup file.. If it is not found, MCI uses a system default sound. \cell \cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b sysinfo} {\i item}
\cell Obtains MCI system information. One of the following {\i items} modifies {\b sysinfo}:\cell \cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \cellx2520\cellx4320\cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {
\b installname}\cell Returns the name used to install the device.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b quantity}\cell 
Returns the number of MCI devices of the type specified by the device-name field. The device-name field must contain a standard MCI device type. Any digits after the name are ignored. The special device name {\b all}
 returns the total number of MCI devices in the system.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b quantity open}\cell 
Returns the number of open MCI devices of the type specified by the device name. The device name must be a standard MCI device type. Any digits after the name are ignored. The special device name {\b all}
 returns the total number of MCI devices in the system that are open. \cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b name} {\i index}\cell Returns the name of an MCI device. The {\i index}
 ranges from 1 to the number of devices of that type. If {\b all} is specified for the device name, {\i index} ranges from 1 to the total number of devices in the system.\cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \clbrdrb
\brdrs\brdrw15 \cellx2520\clbrdrb\brdrs\brdrw15 \cellx4320\clbrdrb\brdrs\brdrw15 \cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b name} {\i index }{\b open}{\i \cell }Returns the name of an open MCI device. The {\i index}
 ranges from 1 to the number of devices of that type. If {\b all} is specified for the device name, {\i index} ranges from 1 to the total number of devices in the system.\line \cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain 
\s2\sa240\keepn\widctlpar \b\f55\fs40 \page Required Commands for All Devices 
\par \pard\plain \s56\li720\sb240\widctlpar \fs20 The following commands are recognized by all devices. Extended commands can add other options to these commands. A list of the errors common to all the commands follows the required command table.\line 
\par \trowd \trgaph108\trleft612 \clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx2520\clmgf\clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx8640\clmrg\clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx8640 \pard\plain \s50\sb240\widctlpar\intbl 
\b\fs22 Command\cell Description\cell \cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \clbrdrt\brdrs\brdrw15 \cellx2520\clmgf\clbrdrt\brdrs\brdrw15 \cellx8640\clmrg\clbrdrt\brdrs\brdrw15 \cellx8640 \pard\plain 
\s51\sb120\widctlpar\intbl \fs20 {\b capability} {\i item}\cell Requests information about a particular capability of a device. While other capabilities are defined for specific devices and device types, the following {\i items} are always available:
\cell \cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \cellx2520\cellx4320\cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b can eject}\cell Returns {\b true} if the device can eject the media.\cell \pard\plain 
\widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b can play}\cell Returns {\b true} if the device can play. \cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b can record}
\cell Returns {\b true} if the device supports recording.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b can save}\cell Returns {\b true} if the device can save data.\cell \pard\plain \widctlpar\intbl 
\fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b compound device}\cell Returns {\b true} if the device requires an element name.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b 
device type}\cell Returns one of the following:
\par {\b audio tape \line cdaudio\line digital audio tape\line scanner\line sequencer\line videodisc\line videotape\line waveaudio}\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b has audio}\cell Returns {\b 
true} if the device supports audio playback.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b has video}\cell Returns {\b true} if the device supports video.\cell \pard\plain \widctlpar\intbl \fs20 \row 
\pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b uses files}\cell Returns {\b true} if the element of a compound device is a file pathname.\cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \cellx2520\clmgf \cellx8640\clmrg 
\cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b close}\cell 
When sent to a simple device, closes the device. When sent to a compound device element, closes the element and any resources associated with it. MCI unloads a device when it is no longer being used. \cell \cell \pard\plain \widctlpar\intbl \fs20 \row 
\pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b info} {\i item}\cell Fills a user-supplied buffer with a NULL-terminated string containing textual information. One of the following {\i item} modifies {\b info}:\cell \cell \pard\plain \widctlpar\intbl 
\fs20 \row \trowd \trgaph108\trleft612 \cellx2520\cellx4320\cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b product} \cell Returns a description of t
he hardware associated with a device. This usually includes the manufacturer and model information.\cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \cellx2520\clmgf \cellx8640\clmrg \cellx8640 \pard\plain 
\s51\sb120\widctlpar\intbl \fs20 {\b open} {\i items}\cell Initializes the device. The following optional {\i items} modify {\b open}:\cell \cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \cellx2520\cellx4320\cellx8640 
\pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b alias} {\i device\~alias}\cell Specifies an alternate name for the given device. If specified, it must be used for subsequent references. \cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain 
\s51\sb120\widctlpar\intbl \fs20 \cell {\b shareable}\cell Initializes the device or element as shareable. Subsequent attempts to open it fail unless you specify {\b shareable} in both the original and subsequent {\b open}
 commands. MCI returns an error if it is already open and not shareable.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b type} {\i device\~type}\cell 
Specifies the compound device that controls a device element. As an alternative to {\b type}, MCI can use the filename extension entries to select the device based on the extension used by the device element. \cell \pard\plain \widctlpar\intbl \fs20 \row 
\trowd \trgaph108\trleft612 \cellx2520\clmgf \cellx8640\clmrg \cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b status} {\i item}\cell Obtains status information for the device. One of the following {\i items} modifies {\b status}:\cell \cell 
\pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \cellx2520\cellx4320\cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b mode}\cell Returns the current mode of the device. 
\par Commonly supported standard modes are: {\b not ready}, {\b paused}, {\b playing}, {\b stopped}, {\b open}, {\b recording}, and {\b seeking}\cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \clbrdrb\brdrs\brdrw15 \cellx2520\clbrdrb
\brdrs\brdrw15 \cellx4320\clbrdrb\brdrs\brdrw15 \cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b ready}\cell Returns {\b true} if the device is ready.\line \cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain 
\s2\sb480\sa240\keepn\widctlpar \b\f55\fs40 Basic Commands for Specific Device Types
\par \pard\plain \s56\li720\sb240\widctlpar \fs20 
In addition to the commands described previously, each device supports a set of commands specific to its device type. Where possible, these type-specific commands are identical between types. When type-specific commands are common to multiple devices, the
y are considered basic commands. For example, the basic {\b play} command is identical for videodisc and videotape players. Other basic
 commands are listed in the following table. Although these commands are optional for a device, if a command is used it must recognize all options listed in this table. The options generally provide for a minimum set of capabilities, but some devices may 
return \ldblquote unsupported function\rdblquote  if an option is used which clearly doesn\rquote t apply.\line 
\par \trowd \trgaph108\trleft612 \clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx2880\clmgf\clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx8640\clmrg\clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx8640 \pard\plain \s50\sb240\widctlpar\intbl 
\b\fs22 Command\cell Description\cell \cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \clbrdrt\brdrs\brdrw15 \cellx2880\clmgf\clbrdrt\brdrs\brdrw15 \cellx8640\clmrg\clbrdrt\brdrs\brdrw15 \cellx8640 \pard\plain 
\s51\sb120\widctlpar\intbl \fs20 {\b load} {\i item}\cell Load a device element from disk. The following optional {\i item} modifies {\b load}:\cell \cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \cellx2880\cellx4680\cellx8640 
\pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b \cell }{\i filename}\cell Specifies the source path and file.\cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \cellx2880\clmgf \cellx8640\clmrg \cellx8640 \pard\plain 
\s51\sb120\widctlpar\intbl \fs20 {\b pause}\cell Pauses playing or recording.\cell \cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b play} {\i items}\cell Start playing the device. The following optional {\i 
items} modify {\b play}:\cell \cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \cellx2880\cellx4680\cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b from} {\i position\line }{\b to} {\i position}\cell 
Specifies the position to start and stop playing. If {\b from} is omitted, the play starts from the current position; if {\b to} is omitted, the play stops at the end of the media.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard \li720\sb240\widctlpar 
\page 
\par \trowd \trgaph108\trleft612 \cellx2880\clmgf \cellx8640\clmrg \cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b record} {\i items}\cell 
Start recording data. All data recorded after a file is opened is discarded if the file is closed without saving it. The following optional {\i items} modify {\b record}:\cell \cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 
\cellx2880\cellx4680\cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b insert}\cell Specifies that new data is added to the device element at the current position.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain 
\s51\sb120\widctlpar\intbl \fs20 \cell {\b from} {\i position\line }{\b to }{\i position\cell }Specifies the positions to start and stop recording. If {\b from} is omitted, the device starts recording at the current position; if {\b to}
 is omitted, the device records until a {\b stop} or {\b pause} command is received.{\i \cell }\pard\plain \widctlpar\intbl \fs20 {\i \row }\pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b overwrite}\cell 
Specifies that new data will replace data in the device element.\cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \cellx2880\clmgf \cellx8640\clmrg \cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b \cell }
The default recording mode ({\b insert} or {\b overwrite}) depends on the specific device. Each device should define a default recording mode.\cell \cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b resume\cell 
}Resumes playing or recording following a pause.\cell \cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b save} {\i item}\cell Saves the MCI element. The following optional {\i item} modifies {\b save}:\cell 
\cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \cellx2880\cellx4680\cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\i filename}\cell Specifies the destination path and file. \cell \pard\plain \widctlpar\intbl 
\fs20 \row \trowd \trgaph108\trleft612 \cellx2880\clmgf \cellx8640\clmrg \cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b seek} {\i item}\cell Moves to the specified position and stops. One of the following is required for {\i item} :\cell 
\cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \cellx2880\cellx4680\cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b to} {\i position}\cell Specifies the position to stop the seek. \cell \pard\plain 
\widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b to start}\cell Seeks to the start of the media or device element. \cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b 
to end}\cell Seeks to the end of the media or device element. \cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \cellx2880\clmgf \cellx8640\clmrg \cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b set} {\i items}\cell 
Sets the various control {\i items}:\cell \cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \cellx2880\cellx4680\cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b audio all off\line audio all on}\cell 
Enables or disables audio output\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b audio left off\line audio left on}\cell Enables or disables output to the left audio channel.\cell \pard\plain 
\widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b audio right off\line audio right on}\cell Enables or disables output to the right audio channel.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain 
\s51\sb120\widctlpar\intbl \fs20 \cell {\b door closed}\cell Loads the media and closes the door if possible.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b door open}\cell 
Opens the door and ejects the tray if possible.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b time format milliseconds}\cell Sets time format to milliseconds.
 All position information is this format after this command. You can abbreviate milliseconds as {\b ms}.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b video off\line video on}\cell 
Enables or disables video output.\cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \cellx2880\clmgf \cellx8640\clmrg \cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b status} {\i item}\cell 
Obtains status information for the device. One of the following {\i items} modifies {\b status}:\cell \cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \cellx2880\cellx4680\cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 
\cell {\b current track}\cell \pard \s51\fi-900\li900\sb120\widctlpar\intbl Returns the current track.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b length}\cell 
Returns the total length of the segment.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b length track} {\i track_number}\cell Returns the length of the serial track specified by {\i track_number}. \cell 
\pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b number of tracks}\cell \pard \s51\fi-900\li900\sb120\widctlpar\intbl Returns the number of tracks on the media. \cell \pard\plain \widctlpar\intbl \fs20 \row 
\pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b position}\cell Returns the current position.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b position track} {\i track_number}\cell 
Returns the position of the start of the track specified by {\i track_number}. \cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b start position}\cell 
Returns the starting position of the media or device element.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b time format}\cell Returns the time format.\cell \pard\plain \widctlpar\intbl \fs20 \row 
\trowd \trgaph108\trleft612 \clbrdrb\brdrs\brdrw15 \cellx2880\clmgf\clbrdrb\brdrs\brdrw15 \cellx8640\clmrg\clbrdrb\brdrs\brdrw15 \cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b stop}\cell Stops the device.\line \cell \cell \pard\plain 
\widctlpar\intbl \fs20 \row \pard\plain \s2\sa240\keepn\widctlpar \b\f55\fs40 \page CD Audio (Redbook) Commands
\par \pard\plain \s56\li720\sb240\widctlpar \fs20 The CD audio command set provides a common method for playing CD audio sequencesCD audio devices support the following core set of commands:\line 
\par \trowd \trgaph108\trleft612 \clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx2880\clmgf\clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx8640\clmrg\clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx8640 \pard\plain \s50\sb240\widctlpar\intbl 
\b\fs22 Command\cell Description\cell \cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \clbrdrt\brdrs\brdrw15 \cellx2880\clmgf\clbrdrt\brdrs\brdrw15 \cellx8640\clmrg\clbrdrt\brdrs\brdrw15 \cellx8640 \pard\plain 
\s51\sb120\widctlpar\intbl \fs20 {\b capability} {\i item}\cell Requests information about the capabilities of the CD audio device. One of the following {\i items} is required:\cell \cell \pard\plain \widctlpar\intbl \fs20 \row \trowd 
\trgaph108\trleft612 \cellx2880\cellx4680\cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b can eject}\cell Returns {\b true} if the CD audio device can eject the media.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain 
\s51\sb120\widctlpar\intbl \fs20 \cell {\b can play}\cell Returns {\b true} if the CD audio device can play the media.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b can record}\cell Returns {\b false}.
\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b can save}\cell Returns {\b false}.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b compound device}
\cell Returns {\b false}.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b device type}\cell Returns {\b CDaudio}.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl 
\fs20 \cell {\b has audio}\cell Returns {\b true}. \cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b has video}\cell Returns {\b false}.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain 
\s51\sb120\widctlpar\intbl \fs20 \cell {\b uses files}\cell Returns {\b false}..\cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \cellx2880\clmgf \cellx8640\clmrg \cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b close}
\cell Closes the device.\cell \cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b info} {\i item}\cell 
Fills a user-supplied buffer with a NULL-terminated string containing textual information. One of the following optional {\i item} modifies {\b info}:\cell \cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \cellx2880\cellx4680
\cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b product}\cell Returns the product name and model of the current audio device.\cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \cellx2880\clmgf \cellx8640\clmrg 
\cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b open} {\i items}\cell Initializes the device. MCI reserves cdaudio for the compact disc audio device type. The following optional {\i items} modify {\b open}:\cell \cell \pard\plain 
\widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \cellx2880\cellx4680\cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b alias} {\i device_ alias}\cell 
Specifies an alternate name for the given device. If specified, it must also be used for subsequent references. \cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b shareable}\cell 
Initializes the device as shareable. Subsequent attempts to open it fail unless you specify {\b shareable} in both the original and subsequent {\b open} commands. MCI returns an error if it is already open and not shareable.\cell \pard\plain 
\widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \cellx2880\clmgf \cellx8640\clmrg \cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b pause}\cell Pauses playing. \cell \cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain 
\s51\sb120\widctlpar\intbl \fs20 {\b play} {\i items}\cell Starts playing audio. The following optional {\i items} modify {\b play}:\cell \cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \cellx2880\cellx4680\cellx8640 \pard\plain 
\s51\sb120\widctlpar\intbl \fs20 \cell {\b from} {\i position} to {\i position}\cell Specifies the position to start and stop playing.\cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \cellx2880\clmgf \cellx8640\clmrg \cellx8640 
\pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b resume\cell }Resumes playing from a paused state.\cell \cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b seek} {\i item}\cell 
Moves to the specified location on the disc. If already playing or recording, the device is stopped. One of the following {\i items} modifies {\b seek}:\cell \cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \cellx2880\cellx4680
\cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b to} {\i position}\cell Specifies the destination position for the seek. If it is greater than the length of the disc, an out-of-range error is returned.\cell \pard\plain \widctlpar\intbl 
\fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b to start}\cell Specifies to seek to the start of the audio data on the CD. \cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b to end}\cell 
Specifies to seek to the end of the audio data on the CD. \cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \cellx2880\clmgf \cellx8640\clmrg \cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b set} {\i items}\cell 
Sets the various control {\i items}:\cell \cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \cellx2880\cellx4680\cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b audio all off}\line {\b audio all on}\cell 
Enables or disables audio output..\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b audio left off}\line {\b audio left on}\cell Enables or disables output to the left audio channel. \cell \pard\plain 
\widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b audio right off}\line {\b audio right on}\cell Enables or disables output to the right audio channel.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain 
\s51\sb120\widctlpar\intbl \fs20 \cell {\b door closed}\cell Retracts the tray and closes the door if possible.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b door open}\cell 
Opens the door and ejects the tray if possible.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b time format milliseconds}\cell 
Sets the time format to milliseconds. All position information is this format after this command. You can abbreviate milliseconds as {\b ms}.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b time format 
msf}\cell Sets the time format to {\i mm}:{\i ss}:{\i ff}, where {\i mm} is minutes, {\i ss} is seconds, and {\i ff} is frames. All position information is in this format after this command. On input, {\i ff} can be omitted if 0, and {\i ss}
 can be omitted if both it and {\i ff} are 0. These fields have the following maximum values:
\par Minutes\tab 99\line Seconds\tab 59\line Frames\tab 74\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b time format tmsf}\cell Sets the time format to tt:mm:ss:ff where \ldblquote tt\rdblquote  is tracks, 
\ldblquote mm\rdblquote  is minutes, \ldblquote ss\rdblquote  is seconds, and \ldblquote ff\rdblquote  is frames. All position information is in this format after this command. On input \ldblquote ff\rdblquote  can be omitted if 0, \ldblquote ss
\rdblquote  can be omitted if both it and \ldblquote ff\rdblquote  are 0, and \ldblquote mm\rdblquote  can be omitted if it, \ldblquote ss\rdblquote  and \ldblquote ff\rdblquote  are 0. These fields have the following maximum values:
\par Tracks\tab 99\line Minutes\tab 99\line Seconds\tab 59\line Frames\tab 74\cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \cellx2880\clmgf \cellx8640\clmrg \cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b status} {\i 
item}\cell Obtains status information for the device. One of the following {\i items} modifies {\b status}:\cell \cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \cellx2880\cellx4680\cellx8640 \pard\plain 
\s51\sb120\widctlpar\intbl \fs20 \cell {\b current track}\cell Returns the current track.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b length}\cell Returns the total length of the disc. \cell 
\pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b length track }{\i track_number}\cell Returns the length of the track specified by track_number.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain 
\s51\sb120\widctlpar\intbl \fs20 \cell {\b media present}\cell Returns {\b true} if the CD is inserted in the drive; otherwise, it returns {\b false}.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b mode
}\cell Returns {\b not ready}, {\b open}, {\b paused}, {\b playing}, {\b seeking}, or {\b stopped} for the current mode of the drive.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b number of tracks}
\cell Returns the number of tracks on the CD.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b position}\cell Returns the current position. \cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain 
\s51\sb120\widctlpar\intbl \fs20 \cell {\b position track }{\i track_no}\cell Returns the starting position of the track specified by {\i track_no}. \cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b ready
}\cell Returns {\b true} if the drive is ready.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b start position}\cell Returns the starting position of the CD.\cell \pard\plain \widctlpar\intbl \fs20 \row 
\pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b time format}\cell Returns the current time format.\cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \clbrdrb\brdrs\brdrw15 \cellx2880\clmgf\clbrdrb\brdrs\brdrw15 \cellx8640
\clmrg\clbrdrb\brdrs\brdrw15 \cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b stop} \cell Stops playing. \line \cell \cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s2\sa240\keepn\widctlpar \b\f55\fs40 \page MIDI Sequencer Commands

\par \pard\plain \s56\li720\sb240\widctlpar \fs20 The MIDI sequencer supports the following set of commands:\line 
\par \trowd \trgaph108\trleft612 \clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx2880\clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx4680\clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx8640 \pard\plain \s50\sb240\widctlpar\intbl \b\fs22 Command
\cell Description\cell \cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \clbrdrt\brdrs\brdrw15 \cellx2880\clmgf\clbrdrt\brdrs\brdrw15 \cellx8640\clmrg\clbrdrt\brdrs\brdrw15 \cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 {
\b capability} {\i item}\cell Requests additional information about the capabilities of the MIDI sequencer. One of the following {\i items} is required:\cell \cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \cellx2880\cellx4680
\cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b can eject}\cell Returns {\b false}..\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b can play}\cell Returns {\b true}
 if the sequencer can play.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b can record}\cell Returns {\b true} if the sequencer can record MIDI data.\cell \pard\plain \widctlpar\intbl \fs20 \row 
\pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b can save}\cell Returns {\b true} if the sequencer can save MIDI data.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b compound device}\cell 
Generally returns {\b true}; most sequencers are compound devices..\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b device type}\cell Returns {\b sequencer}.\cell \pard\plain \widctlpar\intbl \fs20 \row 
\pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b has audio}\cell Returns {\b true}.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b has video}\cell Returns {\b false}.\cell \pard\plain 
\widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b uses files}\cell Returns {\b true}.\cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \cellx2880\clmgf \cellx8640\clmrg \cellx8640 \pard\plain 
\s51\sb120\widctlpar\intbl \fs20 {\b close}\cell Closes the sequencer element and the port and file associated with it.\cell \cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b info} {\i item}\cell 
Fills a user-supplied buffer with a NULL-terminated string containing textual information. One of the following optional {\i item} modifies {\b info}:\cell \cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \cellx2880\cellx4680
\cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b product}\cell Returns the product name of the current MIDI sequencer.\cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \cellx2880\clmgf \cellx8640\clmrg \cellx8640 
\pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b open} {\i items}\cell Initializes the sequencer. The following optional {\i items} modify {\b open}:\cell \cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \cellx2880\cellx4680
\cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b alias} {\i device_ alias}\cell Specifies an alternate name for the sequencer element. If specified, it must also be used for subsequent references. \cell \pard\plain \widctlpar\intbl \fs20 
\row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b shareable}\cell Initializes the sequencer element as shareable. Subsequent attempts to open it fail unless you specify shareable in both the original and subsequent {\b open}
 commands. MCI returns an invalid device error if it is already open and not shareable.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b type} {\i device_ type}\cell MCI reserves sequencer for th
e MIDI sequencer device type. As an alternative to {\b type}, MCI can use the element filename extension entries to select the sequencer. \cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \cellx2880\clmgf \cellx8640\clmrg 
\cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b pause}\cell Pauses playing. \cell \cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b play} {\i items}\cell 
Starts playing the sequencer. The following optional {\i items} modify {\b play}:\cell \cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \cellx2880\cellx4680\cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b from} {
\i position\line }{\b to}{\i  position}\cell Specifies the positions to start and stop playing. If {\b from} is omitted, play starts at the current position; if {\b to} is omitted, play stops at the end of the file. \cell \pard\plain \widctlpar\intbl 
\fs20 \row \trowd \trgaph108\trleft612 \cellx2880\clmgf \cellx8640\clmrg \cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b record} {\i items}\cell 
Starts recording MIDI data. All data recorded after a file is opened is discarded if the file is closed without saving it. The following optional {\i items} modify {\b record}:\cell \cell \pard\plain \widctlpar\intbl \fs20 \row \trowd 
\trgaph108\trleft612 \cellx2880\cellx4680\cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b insert}\cell Specifies that new data is added to the device element.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain 
\s51\sb120\widctlpar\intbl \fs20 \cell {\b from} {\i position\line }{\b to}{\i  position}\cell Specifies the positions to start and stop recording. If {\b from} is omitted, the device starts recording at the current position; if {\b to}
 is omitted, the device records until a {\b stop} or {\b pause} command is received.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b overwrite}\cell 
Specifies that new data will replace data in the device element.\cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \cellx2880\clmgf \cellx8640\clmrg \cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b resume\cell }
Resumes playing or recording following a pause.\cell \cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b save} {\i item}\cell Saves the MCI element. The following item {\i modifies} {\b save}:\cell \cell 
\pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \cellx2880\cellx4680\cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\i filename}\cell The {\i filename} specifies the destination path and file. \cell \pard\plain 
\widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \cellx2880\clmgf \cellx8640\clmrg \cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b seek} {\i item}\cell Moves to the specified position in the file. One of the following {\i items}
 is required:\cell \cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \cellx2880\cellx4680\cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b to} {\i position}\cell Specifies the final position for the seek.\cell 
\pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b to start}\cell Specifies to seek to the start of the sequence. \cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell 
{\b to end}\cell Specifies to seek to the end of the sequence. \cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \cellx2880\clmgf \cellx8640\clmrg \cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b set} {\i items}\cell 
Sets the various control {\i items}:\cell \cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \cellx2880\cellx4680\cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b audio all off}\line {\b audio all on}\cell 
Enables or disables audio output..\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b audio left off}\line {\b audio left on}\cell Enables or disables output to the left audio channel.\cell \pard\plain 
\widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b audio right off}\line {\b audio right on}\cell Enables or disables output to the right audio channel.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain 
\s51\sb120\widctlpar\intbl \fs20 \cell {\b master MIDI}\cell Sets the MIDI sequencer as the synchronization source. Synchronization data is sent in MIDI format.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 
\cell {\b master none}\cell Inhibits the sequencer from sending synchronization data.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b master SMPTE}\cell 
Sets the MIDI sequencer as the synchronization source. Synchronization data is sent in SMPTE format.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b offset} {\i time}\cell Sets the SMPTE offset {\i time}
 in colon form ({\i hours}:{\i minutes}:{\i seconds}:{\i frames}). The offset is the beginning time of a SMPTE based sequence.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b port} {\i port_number}\cell 
Sets the MIDI port receiving the MIDI messages. This command will fail if the port you are trying to open is being used by another application.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b port mapper
} \cell Sets the MIDI mapper as the port receiving the MIDI messages. This command will fail if the MIDI mapper or a port it needs is being used by another application.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl 
\fs20 \cell {\b port none}\cell Disables the sending of MIDI messages..\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b slave file}\cell 
Sets the MIDI sequencer to use file data as the synchronization source. This is the default.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b slave MIDI}\cell 
Sets the MIDI sequencer to use incoming data MIDI for the synchronization source. The sequencer recognizes synchronization data with the MIDI format.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b 
slave none}\cell Sets the MIDI sequencer to ignore synchronization data.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b slave SMPTE}\cell 
Sets the MIDI sequencer to use incoming MIDI data for the synchronization source. The sequencer recognizes synchronization data with the SMPTE format.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b 
tempo} {\i tempo_value}\cell Sets the tempo of the sequence according to the current time format. For a ppqn-based file, the {\i integer} is interpreted as beats per minute. For a SMPTE-based file, the {\i integer} is interpreted as frames per second.
\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b time format milliseconds}\cell Sets time format to milliseconds. All position i
nformation is specified as milliseconds following this command. The sequence file sets the default format to ppqn or SMPTE. You can abbreviate milliseconds as {\b ms}.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl 
\fs20 \cell {\b time format song pointer}\cell Sets time format to song pointer (sixteenth notes). This can only be performed for a sequence of division type ppqn.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 
\cell {\b time format SMPTE 24}\cell Sets time format to SMPTE 24 frame rate. All position information is specified in SMPTE format following this command. The sequence file sets the default format to ppqn or SMPTE.\cell \pard\plain \widctlpar\intbl 
\fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b time format SMPTE 25}\cell 
Sets time format to SMPTE 25 frame rate. All position information is specified in SMPTE format following this command. The sequence file sets the default format to ppqn or SMPTE.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain 
\s51\sb120\widctlpar\intbl \fs20 \cell {\b time format SMPTE 30}\cell Sets time format to SMPTE 30 frame rate. All position information is specified in SMPTE format following this command. The sequence file sets the default format to ppqn or SMPTE.\cell 
\pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b time format SMPTE 30 drop}\cell Sets time format to SMPTE 30 drop frame rate. All position information is specifie
d in SMPTE format following this command. The sequence file sets the default format to ppqn or SMPTE.\cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \cellx2880\clmgf \cellx8640\clmrg \cellx8640 \pard\plain 
\s51\sb120\widctlpar\intbl \fs20 {\b status} {\i item}\cell Obtains status information for the MIDI sequencer. One of the following {\i items} modifies {\b status}:\cell \cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \cellx2880
\cellx4680\cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b current track}\cell Returns the current track number.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b division type}\cell 
Returns one of the following file division type: PPQN, SMPTE 24 frame, SMPTE 25 frame, SMPTE 30 drop frame, or SMPTE 30 frame. Use this information to determine the format of the MIDI file, and the meaning of tempo and position information.\cell 
\pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b length}\cell 
Returns the length of a sequence in the current time format. For ppqn files, this will be song pointer units. For SMPTE files, this will be in colon form ({\i hours}:{\i minutes}:{\i seconds}:{\i frames}).\cell \pard\plain \widctlpar\intbl \fs20 \row 
\pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b length track} {\i track_number}\cell Returns the length of a sequence using the current time format. For ppqn files, this will be song pointer units. For SMPTE files, this will be in colon form ({\i 
hours}:{\i minutes}:{\i seconds}:{\i frames}).\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b master}\cell Returns {\b midi}, {\b none}, or {\b smpte} depending on the type of synchronization set.\cell 
\pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b media present}\cell The sequencer returns {\b true}.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b mode}
\cell Returns {\b not ready}, {\b paused}, {\b playing}, {\b seeking}, or {\b stopped}. \cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b number of tracks}\cell Returns the number of tracks.\cell 
\pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b offset}\cell Returns the offset of a SMPTE-based file. The time is returned in colon form ({\i hours}:{\i minutes}:{\i seconds}:{\i frames}
). The offset is the starting time of a SMPTE based sequence.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b port}\cell Returns the MIDI port number assigned to the sequence. \cell \pard\plain 
\widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b position}\cell Returns the current position of a sequen
ce in the current time format. For ppqn files, this will be song pointer units. For SMPTE files, this will be in colon form ({\i hours}:{\i minutes}:{\i seconds}:{\i frames}).\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain 
\s51\sb120\widctlpar\intbl \fs20 \cell {\b position track} {\i track_number}\cell Returns the current position of the track specified by {\i track_number}
 in the current time format. For ppqn files, this will be song pointer units. For SMPTE files, this will be in colon form ({\i hours}:{\i minutes}:{\i seconds}:{\i frames}). \cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain 
\s51\sb120\widctlpar\intbl \fs20 \cell {\b ready}\cell Returns {\b true} if the device is ready.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b slave}\cell Returns {\b file}, {\b midi}, {\b none}, or {
\b smpte} depending on the type of synchronization set.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b start position}\cell Returns the starting position of the media or device element.\cell 
\pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b tempo}\cell 
Returns the current tempo of a sequence in the current time format. For files with ppqn format, the tempo is in beats per minute. For files with SMPTE format, the tempo is in frames per second.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain 
\s51\sb120\widctlpar\intbl \fs20 \cell {\b time format}\cell Returns the time format.\cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \clbrdrb\brdrs\brdrw15 \cellx2880\clmgf\clbrdrb\brdrs\brdrw15 \cellx8640\clmrg\clbrdrb
\brdrs\brdrw15 \cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b stop} \cell Stops playing. \line \cell \cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s2\sa240\keepn\widctlpar \b\f55\fs40 \page Videodisc Player Commands  
\par \pard\plain \s56\li720\sb240\widctlpar \fs20 Videodisc players support the following core set of commands:\line 
\par \trowd \trgaph108\trleft612 \clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx2880\clmgf\clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx8640\clmrg\clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx8640 \pard\plain \s50\sb240\widctlpar\intbl 
\b\fs22 Command\cell Description\cell \cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \clbrdrt\brdrs\brdrw15 \cellx2880\clmgf\clbrdrt\brdrs\brdrw15 \cellx8640\clmrg\clbrdrt\brdrs\brdrw15 \cellx8640 \pard\plain 
\s51\sb120\widctlpar\intbl \fs20 {\b capability} {\i item}\cell 
Reports the capabilities of the device. The device should report capabilities according to the type of disc (CAV or CLV) inserted in the drive. If no disc is inserted, the device should assume CAV. One of the following optional {\i items} modifies {\b 
capability}:\cell \cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \cellx2880\cellx4680\cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b can eject}\cell Returns {\b true} if the device can eject the media.\cell 
\pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b can play}\cell Returns {\b true} if the device supports playing. \cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 
\cell {\b can record}\cell Returns {\b true} if the video device can record. \cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b can reverse}\cell Returns {\b true} if the device can play in reverse, {\b 
false} otherwise. This is always {\b false} if a CLV disc is inserted.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b can save}\cell Returns {\b false}.\cell \pard\plain \widctlpar\intbl \fs20 \row 
\pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b compound device}\cell Returns {\b false}.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b device type}\cell Returns {\b videodisc}.\cell 
\pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b fast play rate}\cell Returns the standard fast play rate of the player in frames per second. Returns 0 if the device cannot play fast.\cell \pard\plain 
\widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b has audio}\cell Returns {\b true} if the videodisc player has audio.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b 
has video}\cell Returns {\b true}.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b media type\cell }Returns {\b CAV}, {\b CLV}, or {\b other}, depending on the type of videodisc.\cell \pard\plain 
\widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b normal play rate}\cell Returns the normal play rate in frames per second. Returns 0 for CLV discs.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain 
\s51\sb120\widctlpar\intbl \fs20 \cell {\b slow play rate}\cell Returns the standard slow play rate in frames per second. Returns 0 if the device cannot play slow.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 
\cell {\b uses files}\cell Returns {\b false}.\cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \cellx2880\clmgf \cellx8640\clmrg \cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b close}\cell Closes the device.\cell 
\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b escape} {\i item}\cell Sends custom information to a device. The following {\i item} modifies {\b escape}:\cell \cell \pard\plain \widctlpar\intbl \fs20 \row 
\trowd \trgaph108\trleft612 \cellx2880\cellx4680\cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\i string}\cell Specifies the custom infomation sent to the device.\cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 
\cellx2880\clmgf \cellx8640\clmrg \cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b info} {\i item}\cell Fills a user-supplied buffer with a NULL-terminated string containing textual information. The following optional {\i item} modifies {\b 
info}:\cell \cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \cellx2880\cellx4680\cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b product} \cell 
Returns the product name of the device that the peripheral is controlling.{\b .}\cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \cellx2880\clmgf \cellx8640\clmrg \cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b open} {
\i items}\cell Initializes the device. MCI reserves video disc for the videodisc device type. The following optional {\i items} modify {\b open}:\cell \cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \cellx2880\cellx4680\cellx8640
 \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b alias} {\i device_ alias}\cell Specifies an alternate name for the given device. If specified, it must also be used for subsequent references. \cell \pard\plain \widctlpar\intbl \fs20 \row 
\pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b shareable}\cell Initializes the device as shareable. Subsequent attempts to open it fail unless you specify {\b shareable} in both the original and subsequent {\b open}
 commands. MCI returns an invalid device error if it is already open and not shareable.\cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \cellx2880\clmgf \cellx8640\clmrg \cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b 
pause}\cell Stops playing. If a CAV disc is playing, it also freezes the video frame. If a CLV disc is playing, the player is stopped.\cell \cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b play} {\i items}
\cell Starts playing. The following optional {\i items} modify {\b play:}\cell \cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \cellx2880\cellx4680\cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b fast\line slow}
\cell Indicates that the device should play faster or slower than normal. To determine the exact speed on a particular player, use the {\b status speed} command. To specify the speed more precisely, use the {\b fps} flag. {\b Slow}
 applies only to CAV discs.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b from} {\i position\line }{\b to} {\i position}\cell 
Specifies the positions to start and stop playing. Positions are in frames for CAV discs and in seconds for CLV discs, unless {\b chapter} is also used (in which case, the position is given in chapters). If {\b from}
 is omitted, play starts at the current position; if {\b to} is omitted, the play stops at the end of the disc.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b reverse}\cell 
Sets the play direction to backwards. This applies only to CAV discs.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b scan}\cell 
Indicates the play speed is as fast as possible, possibly with audio disabled. This applies only to CAV discs.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b speed} {\i integer}\cell 
Specifies the rate of play. Currently supported speed values are measured in frames per second, which is the default. This applies only to CAV discs.\cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \cellx2880\clmgf \cellx8640
\clmrg \cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b resume\cell }Resumes playing.\cell \cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b seek} {\i item}\cell Sear
ches using fast forward or fast reverse with video and audio off. The following optional {\i items} modify {\b seek}:\cell \cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \cellx2880\cellx4680\cellx8640 \pard\plain 
\s51\sb120\widctlpar\intbl \fs20 \cell {\b reverse}\cell Indicates the seek direction on CAV discs is backwards. This modifier is invalid if {\b to} is specified.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 
\cell {\b to} {\i position}\cell Specifies the end position to stop the seek. If {\b to} is not specified, the seek continues until the end of the media is reached.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 
\cell {\b to start}\cell Specifies to seek to the start of the disc. \cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b to end}\cell Specifies to seek to the end of the disc. \cell \pard\plain 
\widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \cellx2880\clmgf \cellx8640\clmrg \cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b set} {\i items}\cell Sets the various control {\i items}:\cell \cell \pard\plain \widctlpar\intbl \fs20 
\row \trowd \trgaph108\trleft612 \cellx2880\cellx4680\cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b audio all off}\line {\b audio all on}\cell Enables or disables audio output.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain 
\s51\sb120\widctlpar\intbl \fs20 \cell {\b audio left off}\line {\b audio left on}\cell Enables or disables output to the left audio channel.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b 
audio right off}\line {\b audio right on}\cell Enables or disables output to the right audio channel.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b door open}\cell 
Opens the door and ejects the tray, if possible.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b door closed}\cell Retracts the tray and closes the door, if possible.\cell \pard\plain \widctlpar\intbl 
\fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b time format frames}\cell Sets the position format to frames on CAV discs. All position information is specified in this format following this command. This is the default for CAV discs.
\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b time format hms}\cell Sets position format to {\i h}:{\i mm}:{\i ss} where {\i h} is hours, {\i mm} is minutes, and {\i ss}
 is seconds. All position information is specified in this format following this command. On input, {\i h} may be omitted if 0, and {\i mm} may be omitted if both it and {\i h} are 0. This is the default for CLV discs.\cell \pard\plain \widctlpar\intbl 
\fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b time format milliseconds}\cell Sets the position format to milliseconds. All position information is specified in this format following this command. You can abbreviate milliseconds as {\b 
ms}.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b time format track}\cell Sets the position format to tracks (chapters). All position information is specified in this format following this command. 
\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b video on\line video off}\cell Turns the video on or off.\cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \cellx2880\clmgf 
\cellx8640\clmrg \cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b spin} {\i item}\cell Starts the disc spinning or stops the disc from spinning. One of the following {\i items} modifies {\b status}:\cell \cell \pard\plain \widctlpar\intbl 
\fs20 \row \trowd \trgaph108\trleft612 \cellx2880\cellx4680\cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b down}\cell Stops the disc from spinning.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl 
\fs20 \cell {\b up}\cell Starts the disc spinning.\cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \cellx2880\clmgf \cellx8640\clmrg \cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b status} {\i item}\cell 
Obtains status information for the device. One of the following {\i items} modifies {\b status}:\cell \cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \cellx2880\cellx4680\cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 
\cell {\b current track}\cell Returns the current track (chapter) number.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b disc size}\cell 
Returns either 8 or 12 to indicate the size of the loaded disc in inches.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b forward}\cell Returns {\b true}
 if the play direction is forward or if the device is not playing; {\b false} if the play direction is backward.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b length}\cell 
Returns the total length of the segment.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b length track} {\i track_number}\cell Returns the length of the track (chapter) specified by {\i track_number}.
\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b media present}\cell Returns {\b true} if a disc is inserted in the device, {\b false} otherwise.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain 
\s51\sb120\widctlpar\intbl \fs20 \cell {\b media type}\cell Returns either {\b CAV}, {\b CLV}, or {\b other} depending on the type of videodisc.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b mode}
\cell Returns {\b not ready}, {\b opened}, {\b paused}, {\b parked}, {\b playing}, {\b scanning}, {\b seeking}, or {\b stopped}.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b number of tracks}\cell 
Returns the number of tracks (chapters) on the media. \cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b position}\cell Returns the current position.\cell \pard\plain \widctlpar\intbl \fs20 \row 
\pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b position track} {\i track_number}\cell Returns the position of the start of the track (chapter) specified by {\i track_number}.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain 
\s51\sb120\widctlpar\intbl \fs20 \cell {\b ready}\cell Returns {\b true} if the device is ready.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b side}\cell 
Returns 1 or 2 to indicate which side of the disc is loaded.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b speed}\cell Returns the speed in frames per second.\cell \pard\plain \widctlpar\intbl \fs20 
\row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b start position}\cell Returns the starting position of the disc.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b time format}\cell 
Returns the time format.\cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \cellx2880\clmgf \cellx8640\clmrg \cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b step} {\i items}\cell 
Step the play one or more frames forward or backward. The default action is to step one frame forward. The {\b step} command applies only to CAV discs. The following {\i items} modifies {\b step}:\cell \cell \pard\plain \widctlpar\intbl \fs20 \row \trowd 
\trgaph108\trleft612 \cellx2880\cellx4680\cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b by} {\i frames}\cell Specifies the number of {\i frames} to step. If a negative value is used, the {\b reverse} flag is ignored.\cell \pard\plain 
\widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b reverse}\cell Step backward.\cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \clbrdrb\brdrs\brdrw15 \cellx2880\clmgf\clbrdrb\brdrs\brdrw15 
\cellx8640\clmrg\clbrdrb\brdrs\brdrw15 \cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b stop}\cell Stop playing. \line \cell \cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s2\sa240\keepn\widctlpar \b\f55\fs40 \page 
Waveform Audio Commands
\par \pard\plain \s56\li720\sb240\widctlpar \fs20 Waveform audio drivers must support the following core set of commands:\line 
\par \trowd \trgaph108\trleft612 \clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx2880\clmgf\clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx8640\clmrg\clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx8640 \pard\plain \s50\sb240\widctlpar\intbl 
\b\fs22 Command\cell Description\cell \cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \clbrdrt\brdrs\brdrw15 \cellx2880\clmgf\clbrdrt\brdrs\brdrw15 \cellx8640\clmrg\clbrdrt\brdrs\brdrw15 \cellx8640 \pard\plain 
\s51\sb120\widctlpar\intbl \fs20 {\b capability} {\i item}\cell Requests additional information about the capabilities of the waveform audio driver. One of the following {\i items} modify {\b capability}:\cell \cell \pard\plain \widctlpar\intbl \fs20 
\row \trowd \trgaph108\trleft612 \cellx2880\cellx4680\cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b can eject}\cell Returns {\b false}.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b 
can play}\cell Returns {\b true} if the device can play. The wave audio device returns true if an output device is available.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b can record}\cell Returns {\b 
true} if the waveform driver can record. The waveform audio device returns {\b true} if an input device is available.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b can save}\cell Returns {\b true}
 if the wave audio device can save data. \cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b compound device}\cell Generally returns {\b true}; most waveform audio devices are compound devices.\cell 
\pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b device type}\cell Returns {\b waveaudio}.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b has audio}\cell 
Returns {\b true}\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b has video}\cell Returns {\b false}.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b 
inputs}\cell Returns the total number of input devices.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b outputs}\cell Returns the total number of output devices.\cell \pard\plain \widctlpar\intbl \fs20 
\row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b uses files}\cell Returns {\b true}.\cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \cellx2880\clmgf \cellx8640\clmrg \cellx8640 \pard\plain \s51\sb120\widctlpar\intbl 
\fs20 {\b close}\cell Closes the device element and any resources associated with it. \cell \cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b cue} {\i item}\cell Prepares for playing or recording. The {\b cue}
 command does not have to be issued prior to playing or recording. However, depending on the device, it might reduce the delay associated with the {\b play} or {\b record} command. This command fails if playing or recording is in progress. The {\i item}
 is one of the following:\cell \cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \cellx2880\cellx4680\cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b input}\cell Prepares for recording.\cell \pard\plain 
\widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b output}\cell Prepares for playing. This is the default.\cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \cellx2880\clmgf \cellx8640\clmrg 
\cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b delete} {\i items}\cell Deletes a data segment from the MCI element. The following optional {\i items} modify {\b delete}:\cell \cell \pard\plain \widctlpar\intbl \fs20 \row \trowd 
\trgaph108\trleft612 \cellx2880\cellx4680\cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b from} {\i position\line }{\b to} {\i position}\cell Specifies the positions to start and stop deleting data. If {\b from}
 is omitted, the deletion starts at the current position; if {\b to} is omitted, the deletion stops at the end of the file or waveform.\cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \cellx2880\clmgf \cellx8640\clmrg \cellx8640 
\pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b info} {\i item}\cell Fills a user-supplied buffer with a NULL-terminated string containing textual information. One of the following {\i items} modifies {\b info}:\cell \cell \pard\plain \widctlpar\intbl 
\fs20 \row \trowd \trgaph108\trleft612 \cellx2880\cellx4680\cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b file} \cell Returns the current filename.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl 
\fs20 \cell {\b product}\cell Returns the product name of the current audio output device.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b input}\cell 
Returns the product name of the current waveform input device or {\b none} if no device is set.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b \cell output}\cell 
Returns the product name of the current waveform output device or {\b none} if no device is set.\cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \cellx2880\clmgf \cellx8640\clmrg \cellx8640 \pard\plain \s51\sb120\widctlpar\intbl 
\fs20 {\b open} {\i items}\cell Initializes the device. The following {\i items} are optional:\cell \cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \cellx2880\cellx4680\cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 
\cell {\b alias} {\i device_ alias}\cell Specifies an alternate name for the given device. If specified, it must also be used the alias for references. \cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b 
buffer} {\i buffer_size}\cell Sets the size in seconds of the buffer used by the wave audio device. The default size of the buffer is set when the wave audio device is installed or configured. Typically, the buffer size is set to 4 seconds.\cell 
\pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b shareable}\cell Initializes the device element as shareable. Subsequent attempts to open it fail unless you specify {\b shareable}
 in both the original and subsequent {\b open} commands. MCI returns an error if it is already open and not shareable. \cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b type} {\i device_type}\cell 
Specifies the compound device used to control a device element. MCI reserves waveaudio for the waveform audio device type. As an alternative to {\b type}, MCI can use the element filename extension entries to select the controlling device \cell 
\pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \cellx2880\clmgf \cellx8640\clmrg \cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b pause}\cell Pauses playing or recording. \cell \cell \pard\plain \widctlpar\intbl \fs20 \row 
\pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b play} {\i items}\cell Starts playing audio. The following optional {\i items} modify {\b play}:\cell \cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \cellx2880\cellx4680\cellx8640 
\pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b from} {\i position}\line {\b to} {\i position}\cell Specifies the positions to start and stop playing. If {\b from} is omitted, play starts at the current position; if {\b to}
 is omitted, play stops at the end of the file or waveform.\cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \cellx2880\clmgf \cellx8640\clmrg \cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b record} {\i items}\cell 
Starts recording audio. All data recorded after a file is opened is discarded if the file is closed without saving it. The following optional {\i items} modify {\b record}:\cell \cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 
\cellx2880\cellx4680\cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b insert}\cell Specifies that new data is added to the device element.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b 
from} {\i position\line }{\b to} {\i position}\cell Specifies the positions to start and stop recording. If {\b from} is omitted, the device starts recording at the current position; if {\b to} is omitted, the device records until a {\b stop} or {\b pause
} command is received.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b overwrite}\cell Specifies that new data will replace data in the device element. \cell \pard\plain \widctlpar\intbl \fs20 \row 
\trowd \trgaph108\trleft612 \cellx2880\clmgf \cellx8640\clmrg \cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b resume} \cell Resumes playing or recording following a pause. \cell \cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain 
\s51\sb120\widctlpar\intbl \fs20 {\b save} {\i item\cell }Saves the MCI element in its current format. The following item modifies {\b save}:\cell \cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \cellx2880\cellx4680\cellx8640 
\pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\i filename}\cell Specifies the file and pathname used to save data.\cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \cellx2880\clmgf \cellx8640\clmrg \cellx8640 \pard\plain 
\s51\sb120\widctlpar\intbl \fs20 {\b seek} {\i item\cell }Moves to the specified location in the file. Playback or recording is stopped after the seek. One of the following items modify {\b seek}:\cell \cell \pard\plain \widctlpar\intbl \fs20 \row \trowd 
\trgaph108\trleft612 \cellx2880\cellx4680\cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b to} {\i position}\cell Specifies the stop position.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell 
{\b to start}\cell Specifies to seek to the first sample. \cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b to end}\cell Specifies to seek to the last sample. \cell \pard\plain \widctlpar\intbl \fs20 
\row \trowd \trgaph108\trleft612 \cellx2880\clmgf \cellx8640\clmrg \cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b set} {\i items}\cell Sets the following control {\i items}:\cell \cell \pard\plain \widctlpar\intbl \fs20 \row \trowd 
\trgaph108\trleft612 \cellx2880\cellx4680\cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b alignment} {\i integer}\cell Sets the alignment of data blocks. The file is saved in the new format. \cell \pard\plain \widctlpar\intbl \fs20 \row 
\pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b any input} \cell Use any input that supports the current format when recording. This is the default.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {
\b any output} \cell Use any output that supports the current format when playing. This is the default.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b audio all off}\line {\b audio all on}\cell 
Enables or disables audio output.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b audio left off}\line {\b audio left on}\cell Enables or disables output to the left audio channel. \cell \pard\plain 
\widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b audio right off}\line {\b audio right on}\cell Enables or disables output to the right audio channel.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain 
\s51\sb120\widctlpar\intbl \fs20 \cell {\b bitspersample} {\i bit_count}\cell Sets the number of bits per sample played or recorded. The file is saved in this format.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl 
\fs20 \cell {\b bytespersec} {\i byte_rate}\cell Sets the average number of bytes per second played or recorded. The file is saved in this format.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b channels
} {\i channel_count}\cell Sets the channel count for playing and recording. The file is saved in this format.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b format tag} {\i tag}\cell Sets the format ty
pe for playing and recording. The file is saved in this format.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b format tag pcm}\cell 
Sets the format type to PCM for playing and recording. The file is saved in this format.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b input} {\i integer}\cell Sets the audio channel used as the input.
\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b output} {\i integer}\cell Sets the audio channel used as the output.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl 
\fs20 \cell {\b samplespersec} {\i integer}\cell Sets the sample rate for playing and recording. The file is saved in this format.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b time format bytes}\cell 
Sets the time format to bytes. All position information is specified as bytes following this command.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b time format milliseconds}\cell 
Sets the time format to milliseconds. All position information is specified as milliseconds following this command. You can abbreviate milliseconds as {\b ms}.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 
\cell {\b time format samples}\cell Sets the time format to samples. All position information is specified as samples following this command.\cell \pard\plain \widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \cellx2880\clmgf \cellx8640\clmrg 
\cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b status} {\i item}\cell Obtains status information for the device. One of the following {\i items} modifies {\b status}:\cell \cell \pard\plain \widctlpar\intbl \fs20 \row \trowd 
\trgaph108\trleft612 \cellx2880\cellx4680\cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b alignment}\cell Returns the block alignment of data in bytes.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl 
\fs20 \cell {\b bitspersample}\cell Returns the bits per sample.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b bytespersec}\cell Returns the average number of bytes per second played or recorded.\cell 
\pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b channels}\cell Returns the number of channels set (1 for mono, 2 for stereo).\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain 
\s51\sb120\widctlpar\intbl \fs20 \cell {\b current track}\cell Returns the index of the current track.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b format tag}\cell Returns the format tag.\cell 
\pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b input}\cell Returns the currently set input. If no input is set, the error returned indicates that any device can be used.\cell \pard\plain \widctlpar\intbl 
\fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b length}\cell Returns the total length of the waveform. \cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b length track} {\i track_number}
\cell Returns the length of the waveform track.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b level}\cell Returns the current audio sample value.\cell \pard\plain \widctlpar\intbl \fs20 \row 
\pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b media present}\cell Returns {\b true}.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b mode}\cell Returns {\b not ready, paused}, {\b playing}, {\b 
stopped}, {\b recording}, or {\b seeking}.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b number of tracks}\cell Returns the number of tracks (chapters).\cell \pard\plain \widctlpar\intbl \fs20 \row 
\pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b output}\cell Returns the currently set output. If no output is set, the error returned indicates that any device can be used.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain 
\s51\sb120\widctlpar\intbl \fs20 \cell {\b position}\cell Returns the current position. \cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b position track} \line {\i track_number}\cell 
Returns the position of the track specified by {\i track_number}.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b ready}\cell Returns {\b true} if the device is ready.\cell \pard\plain \widctlpar\intbl 
\fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b samplespersec}\cell Returns the number of samples per second played or recorded.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b 
start position}\cell Returns the starting position of the waveform data.\cell \pard\plain \widctlpar\intbl \fs20 \row \pard\plain \s51\sb120\widctlpar\intbl \fs20 \cell {\b time format}\cell Returns the current time format.\cell \pard\plain 
\widctlpar\intbl \fs20 \row \trowd \trgaph108\trleft612 \clbrdrb\brdrs\brdrw15 \cellx2880\clmgf\clbrdrb\brdrs\brdrw15 \cellx8640\clmrg\clbrdrb\brdrs\brdrw15 \cellx8640 \pard\plain \s51\sb120\widctlpar\intbl \fs20 {\b stop}\cell Stops playing or recording.
\line \cell \cell \pard\plain \widctlpar\intbl \fs20 \row \pard \li720\sb240\widctlpar 
\par 
\par }