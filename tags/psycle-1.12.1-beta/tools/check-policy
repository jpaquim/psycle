#! /usr/bin/env python

# This source is free software ; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation ; either version 2, or (at your option) any later version.
# copyright 2006-2010 members of the psycle project http://psycle.sourceforge.net ; johan boule <bohan@jabber.org>

# This tool checks various policies in the source code (formating ...)

import os, sys, fnmatch

class find:
	'a forward iterator that traverses a directory tree'
	
	def __init__(
		self,
		strip_path,
		include_patterns = None,
		exclude_patterns = None
	):
		self._strip_path = strip_path
		if include_patterns is None: self._include_patterns = ['*']
		else:
			assert type(include_patterns) == type([])
			self._include_patterns = include_patterns
		dir_dict = {}
		for include_pattern in self._include_patterns:
			head = self._split_wilcards(include_pattern)
			if not os.path.isdir(os.path.join(self._strip_path, head)): head, tail = os.path.split(head)
			if not len(head): head = '.'
			try: dir_dict[head].append(include_pattern)
			except KeyError: dir_dict[head] = [include_pattern]
		self._stack = []
		for dir, include_patterns in dir_dict.items(): self._stack.append(self._stack_element(dir, include_patterns))
		# Note that the stack may contain foo and foo/bar, and in this case we list the foo/bar dir twice!
		# This is why we have per-dir include patterns so that files aren't found multiple times.
		# TODO This could be optimised by finding common dirs and then only listing the same dir once.
		if exclude_patterns is None: self._exclude_patterns = [os.path.join('*', '.*'), os.path.join('*', 'todo', '*')]
		else:
			assert type(exclude_patterns) == type([])
			self._exclude_patterns = exclude_patterns
		self._files = []
		self._index = 0
		
	def full_path(self): return os.path.join(self._strip_path, self._relative_path)
	def strip_path(self): return self._strip_path
	def relative_path(self): return self._relative_path

	def __getitem__(self, index):
		while True:
			try:
				file = self._files[self._index]
				self._index += 1
			except IndexError:
				# pop next directory from stack
				stack_element = self._stack.pop()
				self._dir = stack_element._dir
				self._files = []
				for file in os.listdir(os.path.join(self._strip_path, self._dir)):
					relative_path = os.path.join(self._dir, file)
					full_path = os.path.join(self._strip_path, relative_path)
					if os.path.isdir(full_path): self._stack.append(self._stack_element(relative_path, stack_element._include_patterns))
					else:
						match = False
						for include_pattern in stack_element._include_patterns:
							if fnmatch.fnmatchcase(relative_path, include_pattern):
								match = True
								break
						if match:
								for exclude_pattern in self._exclude_patterns:
									if fnmatch.fnmatchcase(relative_path, exclude_pattern):
										match = False
										break
						if match: self._files.append(file)
				self._index = 0
			else:
				# got a filename
				return self.file(self._strip_path, os.path.join(self._dir, file))

	class _stack_element:
		def __init__(self, dir, include_patterns):
			self._dir = dir
			self._include_patterns = include_patterns

	def _split_wilcards(self, path):
		components = []
		head = path
		while True:
			head, tail = os.path.split(head)
			components.append(tail)
			if not len(head): break
		components.reverse()
		result = []
		for component in components:
			if '*' in component: break
			result.append(component)
		return os.path.sep.join(result)
	
	class file:
		def __init__(self, strip, relative):
			self._strip = strip
			self._relative = relative
		def full(self): return os.path.join(self._strip, self._relative)
		def strip(self): return self._strip
		def relative(self): return self._relative

def check_tabs_spaces_and_carriage_returns(path):
	result = True
	f = file(path, 'r')
	lines = f.readlines()
	f.close()
	carriage_return_found = False
	line_number = 0
	for line in lines:
		line_number += 1
		indentation = True
		was_space = False
		for char in line:
			if char == '\r':
				if not carriage_return_found:
					print path + ':' + str(line_number) + ':', 'carriage return'
					carriage_return_found = True
					result = False
			elif indentation:
				if char == '\t':
					if was_space:
						print path + ':' + str(line_number) + ':', 'spaces used for indentation'
						result = False
						break
					was_space = False
				elif char == ' ':
					if was_space:
						print path + ':' + str(line_number) + ':', 'spaces used for indentation'
						result = False
						break
					was_space = True
				elif char == '*': indentation = False
				elif was_space:
						print path + ':' + str(line_number) + ':', 'spaces used for indentation'
						result = False
						break
				else: indentation = False
			elif char == '\t':
				print path + ':' + str(line_number) + ':', 'tabulation used for other purpose than indentation'
				result = False
				break
	return result

if __name__ == '__main__':
	result = True
	if len(sys.argv) > 1: paths = sys.argv[1:]
	else:
		os.chdir(os.path.join(os.path.split(sys.argv[0])[0], os.pardir))
		paths = [os.curdir]
	for path in paths:
		files = find(path,
			include_patterns = [
				'*.cpp',
				'*.hpp',
				'*.hpp.in',
				'*.ipp',
				'*.h',
				'*.h.in',
				'*.i',
				'*.rc',
				'*.xpm',
				'*.py',
				'*.text',
				'*.txt',
				'*.html',
				'*.xml',
				'*.m4',
				'*.ac',
				'*.am',
				'*.pc',
				'*.pc.in',
				'*.pro',
				'*.pri',
				'SConstruct',
				'SConscript',
				'README',
				'AUTHORS'
			],
			exclude_patterns = [
				os.path.join(os.curdir, 'external-packages', '*'),
				os.path.join('*', '++*'),
				os.path.join('*', 'nbproject', '*'),
				os.path.join('*', 'moc_*.cpp'),
				os.path.join('*', 'qrc_*.cpp')
			])
		for f in files: result &= check_tabs_spaces_and_carriage_returns(f.full())
	if result: sys.exit(0)
	else: sys.exit(1)
