//////////////////////////////////////////////////////////////////////
//
//	Osc.h
//
//	druttis@darkface.pp.se
//
//////////////////////////////////////////////////////////////////////

#pragma once

#include "Wavetable.h"

//////////////////////////////////////////////////////////////////////
//	Osc class
//////////////////////////////////////////////////////////////////////

class Osc  
{
	//////////////////////////////////////////////////////////////////
	//	Variables
	//////////////////////////////////////////////////////////////////

private:

	Wavetable	_wavetable;
	float		_phase;
	float		_increment;

	//////////////////////////////////////////////////////////////////
	//	Methods
	//////////////////////////////////////////////////////////////////

public:

	//////////////////////////////////////////////////////////////////
	//	Constructor
	//////////////////////////////////////////////////////////////////

	Osc()
	{
		Init();
	}

	//////////////////////////////////////////////////////////////////
	//	Destructor
	//////////////////////////////////////////////////////////////////

	virtual ~Osc()
	{
	}

	//////////////////////////////////////////////////////////////////
	//	Init
	//////////////////////////////////////////////////////////////////

	void Init()
	{
		_wavetable.Init();
		Reset();
	}

	//////////////////////////////////////////////////////////////////
	//	Reset
	//////////////////////////////////////////////////////////////////

	__forceinline void Reset()
	{
		SetPhase(0.0f);
	}

	//////////////////////////////////////////////////////////////////
	//	GetWavetableLength
	//////////////////////////////////////////////////////////////////

	__forceinline int GetWavetableLength()
	{
		return _wavetable.GetLength();
	}

	//////////////////////////////////////////////////////////////////
	//	GetWavetableSamples
	//////////////////////////////////////////////////////////////////

	__forceinline float *GetWavetableSamples()
	{
		return _wavetable.GetSamples();
	}

	//////////////////////////////////////////////////////////////////
	//	SetSamples
	//////////////////////////////////////////////////////////////////

	__forceinline void SetWavetableSamples(float *pSamples, int length)
	{
		_wavetable.SetSamples(pSamples, length);
	}

	//////////////////////////////////////////////////////////////////
	//	GetPhase
	//////////////////////////////////////////////////////////////////

	__forceinline float GetPhase()
	{
		return _phase;
	}

	//////////////////////////////////////////////////////////////////
	//	SetPhase
	//////////////////////////////////////////////////////////////////

	__forceinline float SetPhase(float phase)
	{
		_phase = phase;
	}

	//////////////////////////////////////////////////////////////////
	//	GetIncrement
	//////////////////////////////////////////////////////////////////

	__forceinline float GetIncrement()
	{
		return _increment;
	}

	//////////////////////////////////////////////////////////////////
	//	SetIncrement
	//////////////////////////////////////////////////////////////////

	__forceinline float SetIncrement(float increment)
	{
		_increment = increment;
	}

	//////////////////////////////////////////////////////////////////
	//	ClipPhase (call this about each 32.rd sample for speed)
	//////////////////////////////////////////////////////////////////

	__forceinline void ClipPhase()
	{
		_phase = _wavetable.ClipPhase(_phase);
	}

	//////////////////////////////////////////////////////////////////
	//	GetSampleN (no interpollation)
	//////////////////////////////////////////////////////////////////

	__forceinline float GetSampleN(float fm)
	{
		float out = _wavetable.GetSample(_phase + fm);
		_phase = _phase + _increment;
		return out;
	}

	//////////////////////////////////////////////////////////////////
	//	GetSampleL (linear interpollation)
	//////////////////////////////////////////////////////////////////

	__forceinline float GetSampleL(float fm)
	{
		float out = _wavetable.GetLinear(_phase + fm);
		_phase = _phase + _increment;
		return out;
	}

};
