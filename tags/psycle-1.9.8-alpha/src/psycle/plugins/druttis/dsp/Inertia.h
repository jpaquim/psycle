//////////////////////////////////////////////////////////////////////
//
//	Inertia.h
//
//	druttis@darkface.pp.se
//
//////////////////////////////////////////////////////////////////////
#pragma once
//////////////////////////////////////////////////////////////////////
//
//	Inertia Constants
//
//////////////////////////////////////////////////////////////////////
#define INERTIA_MAXTICKS 32767
//////////////////////////////////////////////////////////////////////
//
//	Inertia Class
//
//////////////////////////////////////////////////////////////////////
class Inertia
{
	//////////////////////////////////////////////////////////////////
	//	Properties
	//////////////////////////////////////////////////////////////////
private:
	int			m_length;
	float		m_target;
	//////////////////////////////////////////////////////////////////
	//	Internal variables
	//////////////////////////////////////////////////////////////////
	int			m_ticks;
	int			m_decr;
	float		m_value;
	float		m_coeff;
	bool		m_valid;
	//////////////////////////////////////////////////////////////////
	//	Constructor & Destructor
	//////////////////////////////////////////////////////////////////
public:
	Inertia();
	~Inertia();
	//////////////////////////////////////////////////////////////////
	//	Get / Set Methods
	//////////////////////////////////////////////////////////////////
	int GetLength();
	void SetLength(int length);
	float GetTarget();
	void SetTarget(float target);
	float GetValue();
private:
	void Update();
	//////////////////////////////////////////////////////////////////
	//	Methods
	//////////////////////////////////////////////////////////////////
public:
	//////////////////////////////////////////////////////////////////
	//	IsValid
	//////////////////////////////////////////////////////////////////
	__forceinline bool IsValid()
	{
		return m_valid;
	}
	//////////////////////////////////////////////////////////////////
	//	Invalidate
	//////////////////////////////////////////////////////////////////
	__forceinline void Invalidate()
	{
		m_valid = false;
	}
	//////////////////////////////////////////////////////////////////
	//	IsIdle
	//////////////////////////////////////////////////////////////////
	__forceinline bool IsIdle()
	{
		return IsValid() && (m_decr == 0);
	}
	//////////////////////////////////////////////////////////////////
	//	Reset
	//////////////////////////////////////////////////////////////////
	__forceinline void Reset()
	{
		m_ticks = INERTIA_MAXTICKS;
		m_decr = 0;
		m_value = m_target;
		m_coeff = 0.0f;
	}
	//////////////////////////////////////////////////////////////////
	//	Stop
	//////////////////////////////////////////////////////////////////
	__forceinline void Stop()
	{
		m_ticks = INERTIA_MAXTICKS;
		m_decr = 0;
		m_coeff = 0.0f;
	}
	//////////////////////////////////////////////////////////////////
	//	Clip
	//////////////////////////////////////////////////////////////////
	__forceinline int Clip(int nsamples)
	{
		m_valid = true;
		if (m_ticks <= 0)
		{
			Reset();
		}
		return (nsamples < m_ticks ? nsamples : m_ticks);
	}
	//////////////////////////////////////////////////////////////////
	//	Next
	//////////////////////////////////////////////////////////////////
	__forceinline float Next()
	{
		const float out = m_value;
		m_ticks -= m_decr;
		m_value += m_coeff;
		return out;
	}
	//////////////////////////////////////////////////////////////////
	//	Fill
	//////////////////////////////////////////////////////////////////
	void Fill(float *pout, int nsamples);
	//////////////////////////////////////////////////////////////////
	//	Fill & Mult
	//////////////////////////////////////////////////////////////////
	void Fill(float *pbuf, float mul, int nsamples);
};
