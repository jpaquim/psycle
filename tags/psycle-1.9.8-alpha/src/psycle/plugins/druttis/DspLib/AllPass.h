//////////////////////////////////////////////////////////////////////
//
//	AllPass.h
//
//	druttis@darkface.pp.se
//
//////////////////////////////////////////////////////////////////////

#pragma once

//////////////////////////////////////////////////////////////////////
//	AllPass
//////////////////////////////////////////////////////////////////////

class AllPass  
{

	//////////////////////////////////////////////////////////////////
	//	Variables
	//////////////////////////////////////////////////////////////////

private:

	float	_delay;
	float	_a;
	float	_z;

	//////////////////////////////////////////////////////////////////
	//	Methods
	//////////////////////////////////////////////////////////////////

public:

	//////////////////////////////////////////////////////////////////
	//	Constructor
	//////////////////////////////////////////////////////////////////

	AllPass()
	{
		Init();
	}

	//////////////////////////////////////////////////////////////////
	//	Destructor
	//////////////////////////////////////////////////////////////////

	virtual ~AllPass()
	{
	}

	//////////////////////////////////////////////////////////////////
	//	Init
	//////////////////////////////////////////////////////////////////

	__forceinline void Init()
	{
		SetDelay(0.0f);
		Reset();
	}

	//////////////////////////////////////////////////////////////////
	//	Reset
	//////////////////////////////////////////////////////////////////

	__forceinline void Reset()
	{
		_z = 0.0f;
	}

	//////////////////////////////////////////////////////////////////
	//	GetDelay
	//////////////////////////////////////////////////////////////////

	__forceinline float GetDelay()
	{
		return _delay;
	}

	//////////////////////////////////////////////////////////////////
	//	SetDelay
	//////////////////////////////////////////////////////////////////

	__forceinline void SetDelay(float delay)
	{
		if (delay < 0.0f)
			delay = 0.0f;
		if (delay > 1.0f)
			delay = 1.0f;
		_delay = delay;
		_a = (1.0f - delay) / (1.0f + delay);
	}

	//////////////////////////////////////////////////////////////////
	//	GetSample
	//////////////////////////////////////////////////////////////////

	__forceinline float GetSample(float in)
	{
		float y = _z - in * _a;
		_z = y * _a + in;
		return y;
	}

};
